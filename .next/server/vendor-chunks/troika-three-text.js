/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/troika-three-text";
exports.ids = ["vendor-chunks/troika-three-text"];
exports.modules = {
  /***/ "(ssr)/./node_modules/troika-three-text/dist/troika-three-text.umd.js":
    /*!**********************************************************************!*\
  !*** ./node_modules/troika-three-text/dist/troika-three-text.umd.js ***!
  \**********************************************************************/
    /***/ function (__unused_webpack_module, exports, __webpack_require__) {
      eval(
        '(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! three */ "(ssr)/./node_modules/three/build/three.js"), __webpack_require__(/*! troika-worker-utils */ "(ssr)/./node_modules/troika-worker-utils/dist/troika-worker-utils.umd.js"), __webpack_require__(/*! troika-three-utils */ "(ssr)/./node_modules/troika-three-utils/dist/troika-three-utils.umd.js")) :\n  0;\n}(this, (function (exports, three, troikaWorkerUtils, troikaThreeUtils) { \'use strict\';\n\n  /**\n   * Initializes and returns a function to generate an SDF texture for a given glyph.\n   * @param {function} createGlyphSegmentsQuadtree - factory for a GlyphSegmentsQuadtree implementation.\n   * @param {number} config.sdfDistancePercent - see docs for SDF_DISTANCE_PERCENT in TextBuilder.js\n   *\n   * @return {function(Object): {renderingBounds: [minX, minY, maxX, maxY], textureData: Uint8Array}}\n   */\n  function createSDFGenerator(createGlyphSegmentsQuadtree, config) {\n    var sdfDistancePercent = config.sdfDistancePercent;\n\n    /**\n     * How many straight line segments to use when approximating a glyph\'s quadratic/cubic bezier curves.\n     */\n    var CURVE_POINTS = 16;\n\n    /**\n     * Find the point on a quadratic bezier curve at t where t is in the range [0, 1]\n     */\n    function pointOnQuadraticBezier(x0, y0, x1, y1, x2, y2, t) {\n      var t2 = 1 - t;\n      return {\n        x: t2 * t2 * x0 + 2 * t2 * t * x1 + t * t * x2,\n        y: t2 * t2 * y0 + 2 * t2 * t * y1 + t * t * y2\n      }\n    }\n\n    /**\n     * Find the point on a cubic bezier curve at t where t is in the range [0, 1]\n     */\n    function pointOnCubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, t) {\n      var t2 = 1 - t;\n      return {\n        x: t2 * t2 * t2 * x0 + 3 * t2 * t2 * t * x1 + 3 * t2 * t * t * x2 + t * t * t * x3,\n        y: t2 * t2 * t2 * y0 + 3 * t2 * t2 * t * y1 + 3 * t2 * t * t * y2 + t * t * t * y3\n      }\n    }\n\n    /**\n     * Generate an SDF texture segment for a single glyph.\n     * @param {object} glyphObj\n     * @param {number} sdfSize - the length of one side of the SDF image.\n     *        Larger images encode more details. Must be a power of 2.\n     * @return {{textureData: Uint8Array, renderingBounds: *[]}}\n     */\n    function generateSDF(glyphObj, sdfSize) {\n      //console.time(\'glyphSDF\')\n\n      var textureData = new Uint8Array(sdfSize * sdfSize);\n\n      // Determine mapping between glyph grid coords and sdf grid coords\n      var glyphW = glyphObj.xMax - glyphObj.xMin;\n      var glyphH = glyphObj.yMax - glyphObj.yMin;\n\n      // Choose a maximum distance radius in font units, based on the glyph\'s max dimensions\n      var fontUnitsMaxDist = Math.max(glyphW, glyphH) * sdfDistancePercent;\n\n      // Use that, extending to the texture edges, to find conversion ratios between texture units and font units\n      var fontUnitsPerXTexel = (glyphW + fontUnitsMaxDist * 2) / sdfSize;\n      var fontUnitsPerYTexel = (glyphH + fontUnitsMaxDist * 2) / sdfSize;\n\n      var textureMinFontX = glyphObj.xMin - fontUnitsMaxDist - fontUnitsPerXTexel;\n      var textureMinFontY = glyphObj.yMin - fontUnitsMaxDist - fontUnitsPerYTexel;\n      var textureMaxFontX = glyphObj.xMax + fontUnitsMaxDist + fontUnitsPerXTexel;\n      var textureMaxFontY = glyphObj.yMax + fontUnitsMaxDist + fontUnitsPerYTexel;\n\n      function textureXToFontX(x) {\n        return textureMinFontX + (textureMaxFontX - textureMinFontX) * x / sdfSize\n      }\n\n      function textureYToFontY(y) {\n        return textureMinFontY + (textureMaxFontY - textureMinFontY) * y / sdfSize\n      }\n\n      if (glyphObj.pathCommandCount) { //whitespace chars will have no commands, so we can skip all this\n        // Decompose all paths into straight line segments and add them to a quadtree\n        var lineSegmentsIndex = createGlyphSegmentsQuadtree(glyphObj);\n        var firstX, firstY, prevX, prevY;\n        glyphObj.forEachPathCommand(function (type, x0, y0, x1, y1, x2, y2) {\n          switch (type) {\n            case \'M\':\n              prevX = firstX = x0;\n              prevY = firstY = y0;\n              break\n            case \'L\':\n              if (x0 !== prevX || y0 !== prevY) { //yup, some fonts have zero-length line commands\n                lineSegmentsIndex.addLineSegment(prevX, prevY, (prevX = x0), (prevY = y0));\n              }\n              break\n            case \'Q\': {\n              var prevPoint = {x: prevX, y: prevY};\n              for (var i = 1; i < CURVE_POINTS; i++) {\n                var nextPoint = pointOnQuadraticBezier(\n                  prevX, prevY,\n                  x0, y0,\n                  x1, y1,\n                  i / (CURVE_POINTS - 1)\n                );\n                lineSegmentsIndex.addLineSegment(prevPoint.x, prevPoint.y, nextPoint.x, nextPoint.y);\n                prevPoint = nextPoint;\n              }\n              prevX = x1;\n              prevY = y1;\n              break\n            }\n            case \'C\': {\n              var prevPoint$1 = {x: prevX, y: prevY};\n              for (var i$1 = 1; i$1 < CURVE_POINTS; i$1++) {\n                var nextPoint$1 = pointOnCubicBezier(\n                  prevX, prevY,\n                  x0, y0,\n                  x1, y1,\n                  x2, y2,\n                  i$1 / (CURVE_POINTS - 1)\n                );\n                lineSegmentsIndex.addLineSegment(prevPoint$1.x, prevPoint$1.y, nextPoint$1.x, nextPoint$1.y);\n                prevPoint$1 = nextPoint$1;\n              }\n              prevX = x2;\n              prevY = y2;\n              break\n            }\n            case \'Z\':\n              if (prevX !== firstX || prevY !== firstY) {\n                lineSegmentsIndex.addLineSegment(prevX, prevY, firstX, firstY);\n              }\n              break\n          }\n        });\n\n        // For each target SDF texel, find the distance from its center to its nearest line segment,\n        // map that distance to an alpha value, and write that alpha to the texel\n        for (var sdfX = 0; sdfX < sdfSize; sdfX++) {\n          for (var sdfY = 0; sdfY < sdfSize; sdfY++) {\n            var signedDist = lineSegmentsIndex.findNearestSignedDistance(\n              textureXToFontX(sdfX + 0.5),\n              textureYToFontY(sdfY + 0.5),\n              fontUnitsMaxDist\n            );\n            //if (!isFinite(signedDist)) throw \'infinite distance!\'\n            var alpha = isFinite(signedDist) ? Math.round(255 * (1 + signedDist / fontUnitsMaxDist) * 0.5) : signedDist;\n            alpha = Math.max(0, Math.min(255, alpha)); //clamp\n            textureData[sdfY * sdfSize + sdfX] = alpha;\n          }\n        }\n      }\n\n      //console.timeEnd(\'glyphSDF\')\n\n      return {\n        textureData: textureData,\n\n        renderingBounds: [\n          textureMinFontX,\n          textureMinFontY,\n          textureMaxFontX,\n          textureMaxFontY\n        ]\n      }\n    }\n\n\n    return generateSDF\n  }\n\n  /**\n   * Creates a self-contained environment for processing text rendering requests.\n   *\n   * It is important that this function has no closure dependencies, so that it can be easily injected\n   * into the source for a Worker without requiring a build step or complex dependency loading. All its\n   * dependencies must be passed in at initialization.\n   *\n   * @param {function} fontParser - a function that accepts an ArrayBuffer of the font data and returns\n   * a standardized structure giving access to the font and its glyphs:\n   *   {\n   *     unitsPerEm: number,\n   *     ascender: number,\n   *     descender: number,\n   *     forEachGlyph(string, fontSize, letterSpacing, callback) {\n   *       //invokes callback for each glyph to render, passing it an object:\n   *       callback({\n   *         index: number,\n   *         advanceWidth: number,\n   *         xMin: number,\n   *         yMin: number,\n   *         xMax: number,\n   *         yMax: number,\n   *         pathCommandCount: number,\n   *         forEachPathCommand(callback) {\n   *           //invokes callback for each path command, with args:\n   *           callback(\n   *             type: \'M|L|C|Q|Z\',\n   *             ...args //0 to 6 args depending on the type\n   *           )\n   *         }\n   *       })\n   *     }\n   *   }\n   * @param {function} sdfGenerator - a function that accepts a glyph object and generates an SDF texture\n   * from it.\n   * @param {Object} config\n   * @return {Object}\n   */\n  function createFontProcessor(fontParser, sdfGenerator, config) {\n\n    var defaultFontUrl = config.defaultFontUrl;\n\n\n    /**\n     * @private\n     * Holds data about font glyphs and how they relate to SDF atlases\n     *\n     * {\n     *   \'fontUrl@sdfSize\': {\n     *     fontObj: {}, //result of the fontParser\n     *     glyphs: {\n     *       [glyphIndex]: {\n     *         atlasIndex: 0,\n     *         glyphObj: {}, //glyph object from the fontParser\n     *         renderingBounds: [x0, y0, x1, y1]\n     *       },\n     *       ...\n     *     },\n     *     glyphCount: 123\n     *   }\n     * }\n     */\n    var fontAtlases = Object.create(null);\n\n    /**\n     * Holds parsed font objects by url\n     */\n    var fonts = Object.create(null);\n\n    var INF = Infinity;\n\n\n    /**\n     * Load a given font url\n     */\n    function doLoadFont(url, callback) {\n      function tryLoad() {\n        var onError = function (err) {\n          console.error(("Failure loading font " + url + (url === defaultFontUrl ? \'\' : \'; trying fallback\')), err);\n          if (url !== defaultFontUrl) {\n            url = defaultFontUrl;\n            tryLoad();\n          }\n        };\n        try {\n          var request = new XMLHttpRequest();\n          request.open(\'get\', url, true);\n          request.responseType = \'arraybuffer\';\n          request.onload = function () {\n            if (request.status >= 400) {\n              onError(new Error(request.statusText));\n            }\n            else if (request.status > 0) {\n              try {\n                var fontObj = fontParser(request.response);\n                callback(fontObj);\n              } catch (e) {\n                onError(e);\n              }\n            }\n          };\n          request.onerror = onError;\n          request.send();\n        } catch(err) {\n          onError(err);\n        }\n      }\n      tryLoad();\n    }\n\n\n    /**\n     * Load a given font url if needed, invoking a callback when it\'s loaded. If already\n     * loaded, the callback will be called synchronously.\n     */\n    function loadFont(fontUrl, callback) {\n      if (!fontUrl) { fontUrl = defaultFontUrl; }\n      var font = fonts[fontUrl];\n      if (font) {\n        // if currently loading font, add to callbacks, otherwise execute immediately\n        if (font.pending) {\n          font.pending.push(callback);\n        } else {\n          callback(font);\n        }\n      } else {\n        fonts[fontUrl] = {pending: [callback]};\n        doLoadFont(fontUrl, function (fontObj) {\n          var callbacks = fonts[fontUrl].pending;\n          fonts[fontUrl] = fontObj;\n          callbacks.forEach(function (cb) { return cb(fontObj); });\n        });\n      }\n    }\n\n\n    /**\n     * Get the atlas data for a given font url, loading it from the network and initializing\n     * its atlas data objects if necessary.\n     */\n    function getSdfAtlas(fontUrl, sdfGlyphSize, callback) {\n      if (!fontUrl) { fontUrl = defaultFontUrl; }\n      var atlasKey = fontUrl + "@" + sdfGlyphSize;\n      var atlas = fontAtlases[atlasKey];\n      if (atlas) {\n        callback(atlas);\n      } else {\n        loadFont(fontUrl, function (fontObj) {\n          atlas = fontAtlases[atlasKey] || (fontAtlases[atlasKey] = {\n            fontObj: fontObj,\n            glyphs: {},\n            glyphCount: 0\n          });\n          callback(atlas);\n        });\n      }\n    }\n\n\n    /**\n     * Main entry point.\n     * Process a text string with given font and formatting parameters, and return all info\n     * necessary to render all its glyphs.\n     */\n    function process(\n      ref,\n      callback,\n      metricsOnly\n    ) {\n      var text = ref.text; if ( text === void 0 ) text = \'\';\n      var font = ref.font; if ( font === void 0 ) font = defaultFontUrl;\n      var sdfGlyphSize = ref.sdfGlyphSize; if ( sdfGlyphSize === void 0 ) sdfGlyphSize = 64;\n      var fontSize = ref.fontSize; if ( fontSize === void 0 ) fontSize = 1;\n      var letterSpacing = ref.letterSpacing; if ( letterSpacing === void 0 ) letterSpacing = 0;\n      var lineHeight = ref.lineHeight; if ( lineHeight === void 0 ) lineHeight = \'normal\';\n      var maxWidth = ref.maxWidth; if ( maxWidth === void 0 ) maxWidth = INF;\n      var textAlign = ref.textAlign; if ( textAlign === void 0 ) textAlign = \'left\';\n      var textIndent = ref.textIndent; if ( textIndent === void 0 ) textIndent = 0;\n      var whiteSpace = ref.whiteSpace; if ( whiteSpace === void 0 ) whiteSpace = \'normal\';\n      var overflowWrap = ref.overflowWrap; if ( overflowWrap === void 0 ) overflowWrap = \'normal\';\n      var anchorX = ref.anchorX; if ( anchorX === void 0 ) anchorX = 0;\n      var anchorY = ref.anchorY; if ( anchorY === void 0 ) anchorY = 0;\n      var includeCaretPositions = ref.includeCaretPositions; if ( includeCaretPositions === void 0 ) includeCaretPositions = false;\n      var chunkedBoundsSize = ref.chunkedBoundsSize; if ( chunkedBoundsSize === void 0 ) chunkedBoundsSize = 8192;\n      var colorRanges = ref.colorRanges; if ( colorRanges === void 0 ) colorRanges = null;\n      if ( metricsOnly === void 0 ) metricsOnly=false;\n\n      var mainStart = now();\n      var timings = {total: 0, fontLoad: 0, layout: 0, sdf: {}, sdfTotal: 0};\n\n      // Ensure newlines are normalized\n      if (text.indexOf(\'\\r\') > -1) {\n        console.warn(\'FontProcessor.process: got text with \\\\r chars; normalizing to \\\\n\');\n        text = text.replace(/\\r\\n/g, \'\\n\').replace(/\\r/g, \'\\n\');\n      }\n\n      // Ensure we\'ve got numbers not strings\n      fontSize = +fontSize;\n      letterSpacing = +letterSpacing;\n      maxWidth = +maxWidth;\n      lineHeight = lineHeight || \'normal\';\n      textIndent = +textIndent;\n\n      getSdfAtlas(font, sdfGlyphSize, function (atlas) {\n        var fontObj = atlas.fontObj;\n        var hasMaxWidth = isFinite(maxWidth);\n        var newGlyphs = null;\n        var glyphBounds = null;\n        var glyphAtlasIndices = null;\n        var glyphColors = null;\n        var caretPositions = null;\n        var totalBounds = null;\n        var chunkedBounds = null;\n        var maxLineWidth = 0;\n        var renderableGlyphCount = 0;\n        var canWrap = whiteSpace !== \'nowrap\';\n        var ascender = fontObj.ascender;\n        var descender = fontObj.descender;\n        var unitsPerEm = fontObj.unitsPerEm;\n        timings.fontLoad = now() - mainStart;\n        var layoutStart = now();\n\n        // Find conversion between native font units and fontSize units; this will already be done\n        // for the gx/gy values below but everything else we\'ll need to convert\n        var fontSizeMult = fontSize / unitsPerEm;\n\n        // Determine appropriate value for \'normal\' line height based on the font\'s actual metrics\n        // TODO this does not guarantee individual glyphs won\'t exceed the line height, e.g. Roboto; should we use yMin/Max instead?\n        if (lineHeight === \'normal\') {\n          lineHeight = (ascender - descender) / unitsPerEm;\n        }\n\n        // Determine line height and leading adjustments\n        lineHeight = lineHeight * fontSize;\n        var halfLeading = (lineHeight - (ascender - descender) * fontSizeMult) / 2;\n        var topBaseline = -(fontSize + halfLeading);\n        var caretHeight = Math.min(lineHeight, (ascender - descender) * fontSizeMult);\n        var caretBottomOffset = (ascender + descender) / 2 * fontSizeMult - caretHeight / 2;\n\n        // Distribute glyphs into lines based on wrapping\n        var lineXOffset = textIndent;\n        var currentLine = new TextLine();\n        var lines = [currentLine];\n        fontObj.forEachGlyph(text, fontSize, letterSpacing, function (glyphObj, glyphX, charIndex) {\n          var char = text.charAt(charIndex);\n          var glyphWidth = glyphObj.advanceWidth * fontSizeMult;\n          var curLineCount = currentLine.count;\n          var nextLine;\n\n          // Calc isWhitespace and isEmpty once per glyphObj\n          if (!(\'isEmpty\' in glyphObj)) {\n            glyphObj.isWhitespace = !!char && /\\s/.test(char);\n            glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax;\n          }\n          if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n            renderableGlyphCount++;\n          }\n\n          // If a non-whitespace character overflows the max width, we need to soft-wrap\n          if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {\n            // If it\'s the first char after a whitespace, start a new line\n            if (currentLine.glyphAt(curLineCount - 1).glyphObj.isWhitespace) {\n              nextLine = new TextLine();\n              lineXOffset = -glyphX;\n            } else {\n              // Back up looking for a whitespace character to wrap at\n              for (var i = curLineCount; i--;) {\n                // If we got the start of the line there\'s no soft break point; make hard break if overflowWrap=\'break-word\'\n                if (i === 0 && overflowWrap === \'break-word\') {\n                  nextLine = new TextLine();\n                  lineXOffset = -glyphX;\n                  break\n                }\n                // Found a soft break point; move all chars since it to a new line\n                else if (currentLine.glyphAt(i).glyphObj.isWhitespace) {\n                  nextLine = currentLine.splitAt(i + 1);\n                  var adjustX = nextLine.glyphAt(0).x;\n                  lineXOffset -= adjustX;\n                  for (var j = nextLine.count; j--;) {\n                    nextLine.glyphAt(j).x -= adjustX;\n                  }\n                  break\n                }\n              }\n            }\n            if (nextLine) {\n              currentLine.isSoftWrapped = true;\n              currentLine = nextLine;\n              lines.push(currentLine);\n              maxLineWidth = maxWidth; //after soft wrapping use maxWidth as calculated width\n            }\n          }\n\n          var fly = currentLine.glyphAt(currentLine.count);\n          fly.glyphObj = glyphObj;\n          fly.x = glyphX + lineXOffset;\n          fly.width = glyphWidth;\n          fly.charIndex = charIndex;\n\n          // Handle hard line breaks\n          if (char === \'\\n\') {\n            currentLine = new TextLine();\n            lines.push(currentLine);\n            lineXOffset = -(glyphX + glyphWidth + (letterSpacing * fontSize)) + textIndent;\n          }\n        });\n\n        // Calculate width of each line (excluding trailing whitespace) and maximum block width\n        lines.forEach(function (line) {\n          for (var i = line.count; i--;) {\n            var ref = line.glyphAt(i);\n            var glyphObj = ref.glyphObj;\n            var x = ref.x;\n            var width = ref.width;\n            if (!glyphObj.isWhitespace) {\n              line.width = x + width;\n              if (line.width > maxLineWidth) {\n                maxLineWidth = line.width;\n              }\n              return\n            }\n          }\n        });\n\n        if (!metricsOnly) {\n          // Find overall position adjustments for anchoring\n          var anchorXOffset = 0;\n          var anchorYOffset = 0;\n          if (anchorX) {\n            if (typeof anchorX === \'number\') {\n              anchorXOffset = -anchorX;\n            }\n            else if (typeof anchorX === \'string\') {\n              anchorXOffset = -maxLineWidth * (\n                anchorX === \'left\' ? 0 :\n                anchorX === \'center\' ? 0.5 :\n                anchorX === \'right\' ? 1 :\n                parsePercent(anchorX)\n              );\n            }\n          }\n          if (anchorY) {\n            if (typeof anchorY === \'number\') {\n              anchorYOffset = -anchorY;\n            }\n            else if (typeof anchorY === \'string\') {\n              var height = lines.length * lineHeight;\n              anchorYOffset = anchorY === \'top\' ? 0 :\n                anchorY === \'top-baseline\' ? -topBaseline :\n                anchorY === \'middle\' ? height / 2 :\n                anchorY === \'bottom\' ? height :\n                anchorY === \'bottom-baseline\' ? height - halfLeading + descender * fontSizeMult :\n                parsePercent(anchorY) * height;\n            }\n          }\n\n          // Process each line, applying alignment offsets, adding each glyph to the atlas, and\n          // collecting all renderable glyphs into a single collection.\n          glyphBounds = new Float32Array(renderableGlyphCount * 4);\n          glyphAtlasIndices = new Float32Array(renderableGlyphCount);\n          totalBounds = [INF, INF, -INF, -INF];\n          chunkedBounds = [];\n          var lineYOffset = topBaseline;\n          if (includeCaretPositions) {\n            caretPositions = new Float32Array(text.length * 3);\n          }\n          if (colorRanges) {\n            glyphColors = new Uint8Array(renderableGlyphCount * 3);\n          }\n          var renderableGlyphIndex = 0;\n          var prevCharIndex = -1;\n          var colorCharIndex = -1;\n          var chunk;\n          var currentColor;\n          lines.forEach(function (line) {\n            var lineGlyphCount = line.count;\n            var lineWidth = line.width;\n\n            // Ignore empty lines\n            if (lineGlyphCount > 0) {\n              // Find x offset for horizontal alignment\n              var lineXOffset = 0;\n              var justifyAdjust = 0;\n              if (textAlign === \'center\') {\n                lineXOffset = (maxLineWidth - lineWidth) / 2;\n              } else if (textAlign === \'right\') {\n                lineXOffset = maxLineWidth - lineWidth;\n              } else if (textAlign === \'justify\' && line.isSoftWrapped) {\n                // just count the non-trailing whitespace characters, and we\'ll adjust the offsets per\n                // character in the next loop\n                var whitespaceCount = 0;\n                for (var i = lineGlyphCount; i--;) {\n                  if (!line.glyphAt(i).glyphObj.isWhitespace) {\n                    while (i--) {\n                      if (!line.glyphAt(i).glyphObj) {\n                        debugger\n                      }\n                      if (line.glyphAt(i).glyphObj.isWhitespace) {\n                        whitespaceCount++;\n                      }\n                    }\n                    break\n                  }\n                }\n                justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;\n              }\n\n              for (var i$1 = 0; i$1 < lineGlyphCount; i$1++) {\n                var glyphInfo = line.glyphAt(i$1);\n                var glyphObj = glyphInfo.glyphObj;\n\n                // Apply position adjustments\n                if (lineXOffset) { glyphInfo.x += lineXOffset; }\n\n                // Expand whitespaces for justify alignment\n                if (justifyAdjust !== 0 && glyphObj.isWhitespace) {\n                  lineXOffset += justifyAdjust;\n                  glyphInfo.width += justifyAdjust;\n                }\n\n                // Add caret positions\n                if (includeCaretPositions) {\n                  var charIndex = glyphInfo.charIndex;\n                  caretPositions[charIndex * 3] = glyphInfo.x + anchorXOffset; //left edge x\n                  caretPositions[charIndex * 3 + 1] = glyphInfo.x + glyphInfo.width + anchorXOffset; //right edge x\n                  caretPositions[charIndex * 3 + 2] = lineYOffset + caretBottomOffset + anchorYOffset; //common bottom y\n\n                  // If we skipped any chars from the previous glyph (due to ligature subs), copy the\n                  // previous glyph\'s info to those missing char indices. In the future we may try to\n                  // use the font\'s LigatureCaretList table to get interior caret positions.\n                  while (charIndex - prevCharIndex > 1) {\n                    caretPositions[(prevCharIndex + 1) * 3] = caretPositions[prevCharIndex * 3 + 1];\n                    caretPositions[(prevCharIndex + 1) * 3 + 1] = caretPositions[prevCharIndex * 3 + 1];\n                    caretPositions[(prevCharIndex + 1) * 3 + 2] = caretPositions[prevCharIndex * 3 + 2];\n                    prevCharIndex++;\n                  }\n                  prevCharIndex = charIndex;\n                }\n\n                // Track current color range\n                if (colorRanges) {\n                  var charIndex$1 = glyphInfo.charIndex;\n                  while(charIndex$1 > colorCharIndex) {\n                    colorCharIndex++;\n                    if (colorRanges.hasOwnProperty(colorCharIndex)) {\n                      currentColor = colorRanges[colorCharIndex];\n                    }\n                  }\n                }\n\n                // Get atlas data for renderable glyphs\n                if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n                  var idx = renderableGlyphIndex++;\n\n                  // If we haven\'t seen this glyph yet, generate its SDF\n                  var glyphAtlasInfo = atlas.glyphs[glyphObj.index];\n                  if (!glyphAtlasInfo) {\n                    var sdfStart = now();\n                    var glyphSDFData = sdfGenerator(glyphObj, sdfGlyphSize);\n                    timings.sdf[text.charAt(glyphInfo.charIndex)] = now() - sdfStart;\n\n                    // Assign this glyph the next available atlas index\n                    glyphSDFData.atlasIndex = atlas.glyphCount++;\n\n                    // Queue it up in the response\'s newGlyphs list\n                    if (!newGlyphs) { newGlyphs = []; }\n                    newGlyphs.push(glyphSDFData);\n\n                    // Store its metadata (not the texture) in our atlas info\n                    glyphAtlasInfo = atlas.glyphs[glyphObj.index] = {\n                      atlasIndex: glyphSDFData.atlasIndex,\n                      glyphObj: glyphObj,\n                      renderingBounds: glyphSDFData.renderingBounds\n                    };\n                  }\n\n                  // Determine final glyph bounds and add them to the glyphBounds array\n                  var bounds = glyphAtlasInfo.renderingBounds;\n                  var start = idx * 4;\n                  var x0 = glyphBounds[start] = glyphInfo.x + bounds[0] * fontSizeMult + anchorXOffset;\n                  var y0 = glyphBounds[start + 1] = lineYOffset + bounds[1] * fontSizeMult + anchorYOffset;\n                  var x1 = glyphBounds[start + 2] = glyphInfo.x + bounds[2] * fontSizeMult + anchorXOffset;\n                  var y1 = glyphBounds[start + 3] = lineYOffset + bounds[3] * fontSizeMult + anchorYOffset;\n\n                  // Track total bounds\n                  if (x0 < totalBounds[0]) { totalBounds[0] = x0; }\n                  if (y0 < totalBounds[1]) { totalBounds[1] = y0; }\n                  if (x1 > totalBounds[2]) { totalBounds[2] = x1; }\n                  if (y1 > totalBounds[3]) { totalBounds[3] = y1; }\n\n                  // Track bounding rects for each chunk of N glyphs\n                  if (idx % chunkedBoundsSize === 0) {\n                    chunk = {start: idx, end: idx, rect: [INF, INF, -INF, -INF]};\n                    chunkedBounds.push(chunk);\n                  }\n                  chunk.end++;\n                  if (x0 < chunk.rect[0]) { chunk.rect[0] = x0; }\n                  if (y0 < chunk.rect[1]) { chunk.rect[1] = y0; }\n                  if (x1 > chunk.rect[2]) { chunk.rect[2] = x1; }\n                  if (y1 > chunk.rect[3]) { chunk.rect[3] = y1; }\n\n                  // Add to atlas indices array\n                  glyphAtlasIndices[idx] = glyphAtlasInfo.atlasIndex;\n\n                  // Add colors\n                  if (colorRanges) {\n                    var start$1 = idx * 3;\n                    glyphColors[start$1] = currentColor >> 16 & 255;\n                    glyphColors[start$1 + 1] = currentColor >> 8 & 255;\n                    glyphColors[start$1 + 2] = currentColor & 255;\n                  }\n                }\n              }\n            }\n\n            // Increment y offset for next line\n            lineYOffset -= lineHeight;\n          });\n        }\n\n        // Timing stats\n        for (var ch in timings.sdf) {\n          timings.sdfTotal += timings.sdf[ch];\n        }\n        timings.layout = now() - layoutStart - timings.sdfTotal;\n        timings.total = now() - mainStart;\n\n        callback({\n          glyphBounds: glyphBounds, //rendering quad bounds for each glyph [x1, y1, x2, y2]\n          glyphAtlasIndices: glyphAtlasIndices, //atlas indices for each glyph\n          caretPositions: caretPositions, //x,y of bottom of cursor position before each char, plus one after last char\n          caretHeight: caretHeight, //height of cursor from bottom to top\n          glyphColors: glyphColors, //color for each glyph, if color ranges supplied\n          chunkedBounds: chunkedBounds, //total rects per (n=chunkedBoundsSize) consecutive glyphs\n          ascender: ascender * fontSizeMult, //font ascender\n          descender: descender * fontSizeMult, //font descender\n          lineHeight: lineHeight, //computed line height\n          topBaseline: topBaseline, //y coordinate of the top line\'s baseline\n          totalBounds: totalBounds, //total rect including all glyphBounds; will be slightly larger than glyph edges due to SDF padding\n          totalBlockSize: [maxLineWidth, lines.length * lineHeight], //width and height of the text block; accurate for layout measurement\n          newGlyphSDFs: newGlyphs, //if this request included any new SDFs for the atlas, they\'ll be included here\n          timings: timings\n        });\n      });\n    }\n\n\n    /**\n     * For a given text string and font parameters, determine the resulting block dimensions\n     * after wrapping for the given maxWidth.\n     * @param args\n     * @param callback\n     */\n    function measure(args, callback) {\n      process(args, function (result) {\n        callback({\n          width: result.totalBlockSize[0],\n          height: result.totalBlockSize[1]\n        });\n      }, {metricsOnly: true});\n    }\n\n    function parsePercent(str) {\n      var match = str.match(/^([\\d.]+)%$/);\n      var pct = match ? parseFloat(match[1]) : NaN;\n      return isNaN(pct) ? 0 : pct / 100\n    }\n\n    function now() {\n      return (self.performance || Date).now()\n    }\n\n    // Array-backed structure for a single line\'s glyphs data\n    function TextLine() {\n      this.data = [];\n    }\n    TextLine.prototype = {\n      width: 0,\n      isSoftWrapped: false,\n      get count() {\n        return Math.ceil(this.data.length / 4)\n      },\n      glyphAt: function glyphAt(i) {\n        var fly = TextLine.flyweight;\n        fly.data = this.data;\n        fly.index = i;\n        return fly\n      },\n      splitAt: function splitAt(i) {\n        var newLine = new TextLine();\n        newLine.data = this.data.splice(i * 4);\n        return newLine\n      }\n    };\n    TextLine.flyweight = [\'glyphObj\', \'x\', \'width\', \'charIndex\'].reduce(function (obj, prop, i, all) {\n      Object.defineProperty(obj, prop, {\n        get: function get() {\n          return this.data[this.index * 4 + i]\n        },\n        set: function set(val) {\n          this.data[this.index * 4 + i] = val;\n        }\n      });\n      return obj\n    }, {data: null, index: 0});\n\n\n    return {\n      process: process,\n      measure: measure,\n      loadFont: loadFont\n    }\n  }\n\n  /**\n   * Basic quadtree impl for performing fast spatial searches of a glyph\'s line segments.\n   */\n  function createGlyphSegmentsQuadtree(glyphObj) {\n    // Pick a good initial power-of-two bounding box that will hold all possible segments\n    var xMin = glyphObj.xMin;\n    var yMin = glyphObj.yMin;\n    var xMax = glyphObj.xMax;\n    var yMax = glyphObj.yMax;\n    var dx = xMax - xMin;\n    var dy = yMax - yMin;\n    var cx = Math.round(xMin + dx / 2);\n    var cy = Math.round(yMin + dy / 2);\n    var r = Math.pow(2, Math.floor(Math.log(Math.max(dx, dy)) * Math.LOG2E));\n    var INF = Infinity;\n\n    var root = {\n      0: null,\n      1: null,\n      2: null,\n      3: null,\n      data: null,\n      cx: cx,\n      cy: cy,\n      r: r,\n      minX: INF,\n      minY: INF,\n      maxX: -INF,\n      maxY: -INF\n    };\n\n    /**\n     * Add a line segment to the quadtree.\n     * @param x0\n     * @param y0\n     * @param x1\n     * @param y1\n     */\n    function addLineSegment(x0, y0, x1, y1) {\n      var cx = (x0 + x1) / 2;\n      var cy = (y0 + y1) / 2;\n      var segment = {\n        x0: x0, y0: y0, x1: x1, y1: y1, cx: cx, cy: cy,\n        minX: Math.min(x0, x1),\n        minY: Math.min(y0, y1),\n        maxX: Math.max(x0, x1),\n        maxY: Math.max(y0, y1),\n        next: null\n      };\n      insertSegment(segment, root);\n    }\n\n    function insertSegment(segment, node) {\n      // update node min/max stats\n      var minX = segment.minX;\n      var minY = segment.minY;\n      var maxX = segment.maxX;\n      var maxY = segment.maxY;\n      var cx = segment.cx;\n      var cy = segment.cy;\n      if (minX < node.minX) { node.minX = minX; }\n      if (minY < node.minY) { node.minY = minY; }\n      if (maxX > node.maxX) { node.maxX = maxX; }\n      if (maxY > node.maxY) { node.maxY = maxY; }\n\n      // leaf\n      var leafSegment = node.data;\n      if (leafSegment) {\n        // coincident; push as linked list\n        if (leafSegment.cx === cx && leafSegment.cy === cy) {\n          while (leafSegment.next) { leafSegment = leafSegment.next; }\n          leafSegment.next = segment;\n        }\n        // non-coincident; split leaf to branch\n        else {\n          node.data = null;\n          insertSegment(leafSegment, node);\n          insertSegment(segment, node);\n        }\n      }\n      // branch\n      else {\n        // find target sub-index for the segment\'s centerpoint\n        var subIndex = (cy < node.cy ? 0 : 2) + (cx < node.cx ? 0 : 1);\n\n        // subnode already at index: recurse\n        if (node[subIndex]) {\n          insertSegment(segment, node[subIndex]);\n        }\n        // create new leaf\n        else {\n          node[subIndex] = {\n            0: null,\n            1: null,\n            2: null,\n            3: null,\n            data: segment,\n            cx: node.cx + node.r / 2 * (subIndex % 2 ? 1 : -1),\n            cy: node.cy + node.r / 2 * (subIndex < 2 ? -1 : 1),\n            r: node.r / 2,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY\n          };\n        }\n      }\n    }\n\n    function walkTree(callback) {\n      walkBranch(root, callback);\n    }\n\n    function walkBranch(root, callback) {\n      if (callback(root) !== false && !root.data) {\n        for (var i = 0; i < 4; i++) {\n          if (root[i] !== null) {\n            walkBranch(root[i], callback);\n          }\n        }\n      }\n    }\n\n    /**\n     * For a given x/y, search the quadtree for the closest line segment and return\n     * its signed distance.\n     * @param x\n     * @param y\n     * @param maxSearchRadius\n     * @returns {number}\n     */\n    function findNearestSignedDistance(x, y, maxSearchRadius) {\n      var closestDist = maxSearchRadius;\n      var closestDistSq = closestDist * closestDist;\n\n      walkTree(function visit(node) {\n        // Ignore nodes that can\'t possibly have segments closer than what we\'ve already found. We base\n        // this on a simple rect bounds check; radial would be more accurate but much slower.\n        if (\n          x - closestDist > node.maxX || x + closestDist < node.minX ||\n          y - closestDist > node.maxY || y + closestDist < node.minY\n        ) {\n          return false\n        }\n\n        // Leaf - check each segment\'s actual distance\n        for (var segment = node.data; segment; segment = segment.next) {\n          var distSq = absSquareDistanceToLineSegment(x, y, segment.x0, segment.y0, segment.x1, segment.y1);\n          if (distSq < closestDistSq) {\n            closestDistSq = distSq;\n            closestDist = Math.sqrt(distSq);\n          }\n        }\n      });\n\n      // Flip to negative distance if outside the poly\n      if (!isPointInPoly(x, y)) {\n        closestDist = -closestDist;\n      }\n      return closestDist\n    }\n\n    // Determine whether the given point lies inside or outside the glyph. Uses a simple\n    // ray casting algorithm using a ray pointing east from the point, optimized by using\n    // the quadtree search to test as few lines as possible.\n    function isPointInPoly(x, y) {\n      var inside = false;\n      walkTree(function (node) {\n        // Ignore nodes whose bounds can\'t possibly cross our east-pointing ray\n        if (node.maxX < x || node.minY > y || node.maxY < y) {\n          return false\n        }\n\n        // Leaf - test each segment for whether it crosses our east-pointing ray\n        for (var segment = node.data; segment; segment = segment.next) {\n          var x0 = segment.x0;\n          var y0 = segment.y0;\n          var x1 = segment.x1;\n          var y1 = segment.y1;\n          var intersects = ((y0 > y) !== (y1 > y)) && (x < (x1 - x0) * (y - y0) / (y1 - y0) + x0);\n          if (intersects) {\n            inside = !inside;\n          }\n        }\n      });\n      return inside\n    }\n\n    // Find the absolute distance from a point to a line segment at closest approach\n    function absSquareDistanceToLineSegment(x, y, lineX0, lineY0, lineX1, lineY1) {\n      var ldx = lineX1 - lineX0;\n      var ldy = lineY1 - lineY0;\n      var lengthSq = ldx * ldx + ldy * ldy;\n      var t = lengthSq ? Math.max(0, Math.min(1, ((x - lineX0) * ldx + (y - lineY0) * ldy) / lengthSq)) : 0;\n      var dx = x - (lineX0 + t * ldx);\n      var dy = y - (lineY0 + t * ldy);\n      return dx * dx + dy * dy\n    }\n\n    return {\n      addLineSegment: addLineSegment,\n      findNearestSignedDistance: findNearestSignedDistance\n    }\n  }\n\n  // Custom bundle of Typr.js (https://github.com/photopea/Typr.js) for use in troika-3d-text. \n  // Original MIT license applies: https://github.com/photopea/Typr.js/blob/gh-pages/LICENSE\n\n  function typrFactory() {\n\n  var window = self;\n\n  // Begin Typr.js\n\n\n  var Typr = {};\n\n  Typr.parse = function(buff)\n  {\n  \tvar bin = Typr._bin;\n  \tvar data = new Uint8Array(buff);\n  \t\n  \tvar tag = bin.readASCII(data, 0, 4);  \n  \tif(tag=="ttcf") {\n  \t\tvar offset = 4;\n  \t\tvar majV = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar minV = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar numF = bin.readUint  (data, offset);  offset+=4;\n  \t\tvar fnts = [];\n  \t\tfor(var i=0; i<numF; i++) {\n  \t\t\tvar foff = bin.readUint  (data, offset);  offset+=4;\n  \t\t\tfnts.push(Typr._readFont(data, foff));\n  \t\t}\n  \t\treturn fnts;\n  \t}\n  \telse { return [Typr._readFont(data, 0)]; }\n  };\n\n  Typr._readFont = function(data, offset) {\n  \tvar bin = Typr._bin;\n  \tvar ooff = offset;\n  \t\n  \tvar sfnt_version = bin.readFixed(data, offset);\n  \toffset += 4;\n  \tvar numTables = bin.readUshort(data, offset);\n  \toffset += 2;\n  \tvar searchRange = bin.readUshort(data, offset);\n  \toffset += 2;\n  \tvar entrySelector = bin.readUshort(data, offset);\n  \toffset += 2;\n  \tvar rangeShift = bin.readUshort(data, offset);\n  \toffset += 2;\n  \t\n  \tvar tags = [\n  \t\t"cmap",\n  \t\t"head",\n  \t\t"hhea",\n  \t\t"maxp",\n  \t\t"hmtx",\n  \t\t"name",\n  \t\t"OS/2",\n  \t\t"post",\n  \t\t\n  \t\t//"cvt",\n  \t\t//"fpgm",\n  \t\t"loca",\n  \t\t"glyf",\n  \t\t"kern",\n  \t\t\n  \t\t//"prep"\n  \t\t//"gasp"\n  \t\t\n  \t\t"CFF ",\n  \t\t\n  \t\t\n  \t\t"GPOS",\n  \t\t"GSUB",\n  \t\t\n  \t\t"SVG " ];\n  \t\n  \tvar obj = {_data:data, _offset:ooff};\n  \t//console.log(sfnt_version, numTables, searchRange, entrySelector, rangeShift);\n  \t\n  \tvar tabs = {};\n  \t\n  \tfor(var i=0; i<numTables; i++)\n  \t{\n  \t\tvar tag = bin.readASCII(data, offset, 4);   offset += 4;\n  \t\tvar checkSum = bin.readUint(data, offset);  offset += 4;\n  \t\tvar toffset = bin.readUint(data, offset);   offset += 4;\n  \t\tvar length = bin.readUint(data, offset);    offset += 4;\n  \t\ttabs[tag] = {offset:toffset, length:length};\n  \t\t\n  \t\t//if(tags.indexOf(tag)==-1) console.log("unknown tag", tag, length);\n  \t}\n  \t\n  \tfor(var i=0; i< tags.length; i++)\n  \t{\n  \t\tvar t = tags[i];\n  \t\t//console.log(t);\n  \t\t//if(tabs[t]) console.log(t, tabs[t].offset, tabs[t].length);\n  \t\tif(tabs[t]) { obj[t.trim()] = Typr[t.trim()].parse(data, tabs[t].offset, tabs[t].length, obj); }\n  \t}\n  \t\n  \treturn obj;\n  };\n\n  Typr._tabOffset = function(data, tab, foff)\n  {\n  \tvar bin = Typr._bin;\n  \tvar numTables = bin.readUshort(data, foff+4);\n  \tvar offset = foff+12;\n  \tfor(var i=0; i<numTables; i++)\n  \t{\n  \t\tvar tag = bin.readASCII(data, offset, 4);   offset += 4;\n  \t\tvar checkSum = bin.readUint(data, offset);  offset += 4;\n  \t\tvar toffset = bin.readUint(data, offset);   offset += 4;\n  \t\tvar length = bin.readUint(data, offset);    offset += 4;\n  \t\tif(tag==tab) { return toffset; }\n  \t}\n  \treturn 0;\n  };\n\n\n\n\n\n  Typr._bin = {\n  \treadFixed : function(data, o)\n  \t{\n  \t\treturn ((data[o]<<8) | data[o+1]) +  (((data[o+2]<<8)|data[o+3])/(256*256+4));\n  \t},\n  \treadF2dot14 : function(data, o)\n  \t{\n  \t\tvar num = Typr._bin.readShort(data, o);\n  \t\treturn num / 16384;\n  \t},\n  \treadInt : function(buff, p)\n  \t{\n  \t\t//if(p>=buff.length) throw "error";\n  \t\tvar a = Typr._bin.t.uint8;\n  \t\ta[0] = buff[p+3];\n  \t\ta[1] = buff[p+2];\n  \t\ta[2] = buff[p+1];\n  \t\ta[3] = buff[p];\n  \t\treturn Typr._bin.t.int32[0];\n  \t},\n  \t\n  \treadInt8 : function(buff, p)\n  \t{\n  \t\t//if(p>=buff.length) throw "error";\n  \t\tvar a = Typr._bin.t.uint8;\n  \t\ta[0] = buff[p];\n  \t\treturn Typr._bin.t.int8[0];\n  \t},\n  \treadShort : function(buff, p)\n  \t{\n  \t\t//if(p>=buff.length) throw "error";\n  \t\tvar a = Typr._bin.t.uint8;\n  \t\ta[1] = buff[p]; a[0] = buff[p+1];\n  \t\treturn Typr._bin.t.int16[0];\n  \t},\n  \treadUshort : function(buff, p)\n  \t{\n  \t\t//if(p>=buff.length) throw "error";\n  \t\treturn (buff[p]<<8) | buff[p+1];\n  \t},\n  \treadUshorts : function(buff, p, len)\n  \t{\n  \t\tvar arr = [];\n  \t\tfor(var i=0; i<len; i++) { arr.push(Typr._bin.readUshort(buff, p+i*2)); }\n  \t\treturn arr;\n  \t},\n  \treadUint : function(buff, p)\n  \t{\n  \t\t//if(p>=buff.length) throw "error";\n  \t\tvar a = Typr._bin.t.uint8;\n  \t\ta[3] = buff[p];  a[2] = buff[p+1];  a[1] = buff[p+2];  a[0] = buff[p+3];\n  \t\treturn Typr._bin.t.uint32[0];\n  \t},\n  \treadUint64 : function(buff, p)\n  \t{\n  \t\t//if(p>=buff.length) throw "error";\n  \t\treturn (Typr._bin.readUint(buff, p)*(0xffffffff+1)) + Typr._bin.readUint(buff, p+4);\n  \t},\n  \treadASCII : function(buff, p, l)\t// l : length in Characters (not Bytes)\n  \t{\n  \t\t//if(p>=buff.length) throw "error";\n  \t\tvar s = "";\n  \t\tfor(var i = 0; i < l; i++) { s += String.fromCharCode(buff[p+i]); }\n  \t\treturn s;\n  \t},\n  \treadUnicode : function(buff, p, l)\n  \t{\n  \t\t//if(p>=buff.length) throw "error";\n  \t\tvar s = "";\n  \t\tfor(var i = 0; i < l; i++)\t\n  \t\t{\n  \t\t\tvar c = (buff[p++]<<8) | buff[p++];\n  \t\t\ts += String.fromCharCode(c);\n  \t\t}\n  \t\treturn s;\n  \t},\n  \t_tdec : window["TextDecoder"] ? new window["TextDecoder"]() : null,\n  \treadUTF8 : function(buff, p, l) {\n  \t\tvar tdec = Typr._bin._tdec;\n  \t\tif(tdec && p==0 && l==buff.length) { return tdec["decode"](buff); }\n  \t\treturn Typr._bin.readASCII(buff,p,l);\n  \t},\n  \treadBytes : function(buff, p, l)\n  \t{\n  \t\t//if(p>=buff.length) throw "error";\n  \t\tvar arr = [];\n  \t\tfor(var i=0; i<l; i++) { arr.push(buff[p+i]); }\n  \t\treturn arr;\n  \t},\n  \treadASCIIArray : function(buff, p, l)\t// l : length in Characters (not Bytes)\n  \t{\n  \t\t//if(p>=buff.length) throw "error";\n  \t\tvar s = [];\n  \t\tfor(var i = 0; i < l; i++)\t\n  \t\t\t{ s.push(String.fromCharCode(buff[p+i])); }\n  \t\treturn s;\n  \t}\n  };\n\n  Typr._bin.t = {\n  \tbuff: new ArrayBuffer(8),\n  };\n  Typr._bin.t.int8   = new Int8Array  (Typr._bin.t.buff);\n  Typr._bin.t.uint8  = new Uint8Array (Typr._bin.t.buff);\n  Typr._bin.t.int16  = new Int16Array (Typr._bin.t.buff);\n  Typr._bin.t.uint16 = new Uint16Array(Typr._bin.t.buff);\n  Typr._bin.t.int32  = new Int32Array (Typr._bin.t.buff);\n  Typr._bin.t.uint32 = new Uint32Array(Typr._bin.t.buff);\n\n\n\n\n\n  // OpenType Layout Common Table Formats\n\n  Typr._lctf = {};\n\n  Typr._lctf.parse = function(data, offset, length, font, subt)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \tvar offset0 = offset;\n  \tvar tableVersion = bin.readFixed(data, offset);  offset += 4;\n  \t\n  \tvar offScriptList  = bin.readUshort(data, offset);  offset += 2;\n  \tvar offFeatureList = bin.readUshort(data, offset);  offset += 2;\n  \tvar offLookupList  = bin.readUshort(data, offset);  offset += 2;\n  \t\n  \t\n  \tobj.scriptList  = Typr._lctf.readScriptList (data, offset0 + offScriptList);\n  \tobj.featureList = Typr._lctf.readFeatureList(data, offset0 + offFeatureList);\n  \tobj.lookupList  = Typr._lctf.readLookupList (data, offset0 + offLookupList, subt);\n  \t\n  \treturn obj;\n  };\n\n  Typr._lctf.readLookupList = function(data, offset, subt)\n  {\n  \tvar bin = Typr._bin;\n  \tvar offset0 = offset;\n  \tvar obj = [];\n  \tvar count = bin.readUshort(data, offset);  offset+=2;\n  \tfor(var i=0; i<count; i++) \n  \t{\n  \t\tvar noff = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar lut = Typr._lctf.readLookupTable(data, offset0 + noff, subt);\n  \t\tobj.push(lut);\n  \t}\n  \treturn obj;\n  };\n\n  Typr._lctf.readLookupTable = function(data, offset, subt)\n  {\n  \t//console.log("Parsing lookup table", offset);\n  \tvar bin = Typr._bin;\n  \tvar offset0 = offset;\n  \tvar obj = {tabs:[]};\n  \t\n  \tobj.ltype = bin.readUshort(data, offset);  offset+=2;\n  \tobj.flag  = bin.readUshort(data, offset);  offset+=2;\n  \tvar cnt   = bin.readUshort(data, offset);  offset+=2;\n  \t\n  \tfor(var i=0; i<cnt; i++)\n  \t{\n  \t\tvar noff = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar tab = subt(data, obj.ltype, offset0 + noff);\n  \t\t//console.log(obj.type, tab);\n  \t\tobj.tabs.push(tab);\n  \t}\n  \treturn obj;\n  };\n\n  Typr._lctf.numOfOnes = function(n)\n  {\n  \tvar num = 0;\n  \tfor(var i=0; i<32; i++) { if(((n>>>i)&1) != 0) { num++; } }\n  \treturn num;\n  };\n\n  Typr._lctf.readClassDef = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = [];\n  \tvar format = bin.readUshort(data, offset);  offset+=2;\n  \tif(format==1) \n  \t{\n  \t\tvar startGlyph  = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar glyphCount  = bin.readUshort(data, offset);  offset+=2;\n  \t\tfor(var i=0; i<glyphCount; i++)\n  \t\t{\n  \t\t\tobj.push(startGlyph+i);\n  \t\t\tobj.push(startGlyph+i);\n  \t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\n  \t\t}\n  \t}\n  \tif(format==2)\n  \t{\n  \t\tvar count = bin.readUshort(data, offset);  offset+=2;\n  \t\tfor(var i=0; i<count; i++)\n  \t\t{\n  \t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\n  \t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\n  \t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\n  \t\t}\n  \t}\n  \treturn obj;\n  };\n  Typr._lctf.getInterval = function(tab, val)\n  {\n  \tfor(var i=0; i<tab.length; i+=3)\n  \t{\n  \t\tvar start = tab[i], end = tab[i+1], index = tab[i+2];\n  \t\tif(start<=val && val<=end) { return i; }\n  \t}\n  \treturn -1;\n  };\n\n\n  Typr._lctf.readCoverage = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \tvar cvg = {};\n  \tcvg.fmt   = bin.readUshort(data, offset);  offset+=2;\n  \tvar count = bin.readUshort(data, offset);  offset+=2;\n  \t//console.log("parsing coverage", offset-4, format, count);\n  \tif(cvg.fmt==1) { cvg.tab = bin.readUshorts(data, offset, count); } \n  \tif(cvg.fmt==2) { cvg.tab = bin.readUshorts(data, offset, count*3); }\n  \treturn cvg;\n  };\n\n  Typr._lctf.coverageIndex = function(cvg, val)\n  {\n  \tvar tab = cvg.tab;\n  \tif(cvg.fmt==1) { return tab.indexOf(val); }\n  \tif(cvg.fmt==2) {\n  \t\tvar ind = Typr._lctf.getInterval(tab, val);\n  \t\tif(ind!=-1) { return tab[ind+2] + (val - tab[ind]); }\n  \t}\n  \treturn -1;\n  };\n\n  Typr._lctf.readFeatureList = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \tvar offset0 = offset;\n  \tvar obj = [];\n  \t\n  \tvar count = bin.readUshort(data, offset);  offset+=2;\n  \t\n  \tfor(var i=0; i<count; i++)\n  \t{\n  \t\tvar tag = bin.readASCII(data, offset, 4);  offset+=4;\n  \t\tvar noff = bin.readUshort(data, offset);  offset+=2;\n  \t\tobj.push({tag: tag.trim(), tab:Typr._lctf.readFeatureTable(data, offset0 + noff)});\n  \t}\n  \treturn obj;\n  };\n\n  Typr._lctf.readFeatureTable = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \t\n  \tvar featureParams = bin.readUshort(data, offset);  offset+=2;\t// = 0\n  \tvar lookupCount = bin.readUshort(data, offset);  offset+=2;\n  \t\n  \tvar indices = [];\n  \tfor(var i=0; i<lookupCount; i++) { indices.push(bin.readUshort(data, offset+2*i)); }\n  \treturn indices;\n  };\n\n\n  Typr._lctf.readScriptList = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \tvar offset0 = offset;\n  \tvar obj = {};\n  \t\n  \tvar count = bin.readUshort(data, offset);  offset+=2;\n  \t\n  \tfor(var i=0; i<count; i++)\n  \t{\n  \t\tvar tag = bin.readASCII(data, offset, 4);  offset+=4;\n  \t\tvar noff = bin.readUshort(data, offset);  offset+=2;\n  \t\tobj[tag.trim()] = Typr._lctf.readScriptTable(data, offset0 + noff);\n  \t}\n  \treturn obj;\n  };\n\n  Typr._lctf.readScriptTable = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \tvar offset0 = offset;\n  \tvar obj = {};\n  \t\n  \tvar defLangSysOff = bin.readUshort(data, offset);  offset+=2;\n  \tobj.default = Typr._lctf.readLangSysTable(data, offset0 + defLangSysOff);\n  \t\n  \tvar langSysCount = bin.readUshort(data, offset);  offset+=2;\n  \t\n  \tfor(var i=0; i<langSysCount; i++)\n  \t{\n  \t\tvar tag = bin.readASCII(data, offset, 4);  offset+=4;\n  \t\tvar langSysOff = bin.readUshort(data, offset);  offset+=2;\n  \t\tobj[tag.trim()] = Typr._lctf.readLangSysTable(data, offset0 + langSysOff);\n  \t}\n  \treturn obj;\n  };\n\n  Typr._lctf.readLangSysTable = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \t\n  \tvar lookupOrder = bin.readUshort(data, offset);  offset+=2;\n  \t//if(lookupOrder!=0)  throw "lookupOrder not 0";\n  \tobj.reqFeature = bin.readUshort(data, offset);  offset+=2;\n  \t//if(obj.reqFeature != 0xffff) throw "reqFeatureIndex != 0xffff";\n  \t\n  \t//console.log(lookupOrder, obj.reqFeature);\n  \t\n  \tvar featureCount = bin.readUshort(data, offset);  offset+=2;\n  \tobj.features = bin.readUshorts(data, offset, featureCount);\n  \treturn obj;\n  };\n\n  \tTypr.CFF = {};\n  \tTypr.CFF.parse = function(data, offset, length)\n  \t{\n  \t\tvar bin = Typr._bin;\n  \t\t\n  \t\tdata = new Uint8Array(data.buffer, offset, length);\n  \t\toffset = 0;\n  \t\t\n  \t\t// Header\n  \t\tvar major = data[offset];  offset++;\n  \t\tvar minor = data[offset];  offset++;\n  \t\tvar hdrSize = data[offset];  offset++;\n  \t\tvar offsize = data[offset];  offset++;\n  \t\t//console.log(major, minor, hdrSize, offsize);\n  \t\t\n  \t\t// Name INDEX\n  \t\tvar ninds = [];\n  \t\toffset = Typr.CFF.readIndex(data, offset, ninds);\n  \t\tvar names = [];\n  \t\t\n  \t\tfor(var i=0; i<ninds.length-1; i++) { names.push(bin.readASCII(data, offset+ninds[i], ninds[i+1]-ninds[i])); }\n  \t\toffset += ninds[ninds.length-1];\n  \t\t\n  \t\t\n  \t\t// Top DICT INDEX\n  \t\tvar tdinds = [];\n  \t\toffset = Typr.CFF.readIndex(data, offset, tdinds);  //console.log(tdinds);\n  \t\t// Top DICT Data\n  \t\tvar topDicts = [];\n  \t\tfor(var i=0; i<tdinds.length-1; i++) { topDicts.push( Typr.CFF.readDict(data, offset+tdinds[i], offset+tdinds[i+1]) ); }\n  \t\toffset += tdinds[tdinds.length-1];\n  \t\tvar topdict = topDicts[0];\n  \t\t//console.log(topdict);\n  \t\t\n  \t\t// String INDEX\n  \t\tvar sinds = [];\n  \t\toffset = Typr.CFF.readIndex(data, offset, sinds);\n  \t\t// String Data\n  \t\tvar strings = [];\n  \t\tfor(var i=0; i<sinds.length-1; i++) { strings.push(bin.readASCII(data, offset+sinds[i], sinds[i+1]-sinds[i])); }\n  \t\toffset += sinds[sinds.length-1];\n  \t\t\n  \t\t// Global Subr INDEX  (subroutines)\t\t\n  \t\tTypr.CFF.readSubrs(data, offset, topdict);\n  \t\t\n  \t\t// charstrings\n  \t\tif(topdict.CharStrings)\n  \t\t{\n  \t\t\toffset = topdict.CharStrings;\n  \t\t\tvar sinds = [];\n  \t\t\toffset = Typr.CFF.readIndex(data, offset, sinds);\n  \t\t\t\n  \t\t\tvar cstr = [];\n  \t\t\tfor(var i=0; i<sinds.length-1; i++) { cstr.push(bin.readBytes(data, offset+sinds[i], sinds[i+1]-sinds[i])); }\n  \t\t\t//offset += sinds[sinds.length-1];\n  \t\t\ttopdict.CharStrings = cstr;\n  \t\t\t//console.log(topdict.CharStrings);\n  \t\t}\n  \t\t\n  \t\t// CID font\n  \t\tif(topdict.ROS) {\n  \t\t\toffset = topdict.FDArray;\n  \t\t\tvar fdind = [];\n  \t\t\toffset = Typr.CFF.readIndex(data, offset, fdind);\n  \t\t\t\n  \t\t\ttopdict.FDArray = [];\n  \t\t\tfor(var i=0; i<fdind.length-1; i++) {\n  \t\t\t\tvar dict = Typr.CFF.readDict(data, offset+fdind[i], offset+fdind[i+1]);\n  \t\t\t\tTypr.CFF._readFDict(data, dict, strings);\n  \t\t\t\ttopdict.FDArray.push( dict );\n  \t\t\t}\n  \t\t\toffset += fdind[fdind.length-1];\n  \t\t\t\n  \t\t\toffset = topdict.FDSelect;\n  \t\t\ttopdict.FDSelect = [];\n  \t\t\tvar fmt = data[offset];  offset++;\n  \t\t\tif(fmt==3) {\n  \t\t\t\tvar rns = bin.readUshort(data, offset);  offset+=2;\n  \t\t\t\tfor(var i=0; i<rns+1; i++) {\n  \t\t\t\t\ttopdict.FDSelect.push(bin.readUshort(data, offset), data[offset+2]);  offset+=3;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\telse { throw fmt; }\n  \t\t}\n  \t\t\n  \t\t// Encoding\n  \t\tif(topdict.Encoding) { topdict.Encoding = Typr.CFF.readEncoding(data, topdict.Encoding, topdict.CharStrings.length); }\n  \t\t\n  \t\t// charset\n  \t\tif(topdict.charset ) { topdict.charset  = Typr.CFF.readCharset (data, topdict.charset , topdict.CharStrings.length); }\n  \t\t\n  \t\tTypr.CFF._readFDict(data, topdict, strings);\n  \t\treturn topdict;\n  \t};\n  \tTypr.CFF._readFDict = function(data, dict, ss) {\n  \t\tvar offset;\n  \t\tif(dict.Private) {\n  \t\t\toffset = dict.Private[1];\n  \t\t\tdict.Private = Typr.CFF.readDict(data, offset, offset+dict.Private[0]);\n  \t\t\tif(dict.Private.Subrs)  { Typr.CFF.readSubrs(data, offset+dict.Private.Subrs, dict.Private); }\n  \t\t}\n  \t\tfor(var p in dict) { if(["FamilyName","FontName","FullName","Notice","version","Copyright"].indexOf(p)!=-1)  { dict[p]=ss[dict[p] -426 + 35]; } }\n  \t};\n  \t\n  \tTypr.CFF.readSubrs = function(data, offset, obj)\n  \t{\n  \t\tvar bin = Typr._bin;\n  \t\tvar gsubinds = [];\n  \t\toffset = Typr.CFF.readIndex(data, offset, gsubinds);\n  \t\t\n  \t\tvar bias, nSubrs = gsubinds.length;\n  \t\tif (nSubrs <  1240) { bias = 107; }\n  \t\telse if (nSubrs < 33900) { bias = 1131; }\n  \t\telse { bias = 32768; }\n  \t\tobj.Bias = bias;\n  \t\t\n  \t\tobj.Subrs = [];\n  \t\tfor(var i=0; i<gsubinds.length-1; i++) { obj.Subrs.push(bin.readBytes(data, offset+gsubinds[i], gsubinds[i+1]-gsubinds[i])); }\n  \t\t//offset += gsubinds[gsubinds.length-1];\n  \t};\n  \t\n  \tTypr.CFF.tableSE = [\n        0,   0,   0,   0,   0,   0,   0,   0,\n        0,   0,   0,   0,   0,   0,   0,   0,\n        0,   0,   0,   0,   0,   0,   0,   0,\n        0,   0,   0,   0,   0,   0,   0,   0,\n        1,   2,   3,   4,   5,   6,   7,   8,\n        9,  10,  11,  12,  13,  14,  15,  16,\n       17,  18,  19,  20,  21,  22,  23,  24,\n       25,  26,  27,  28,  29,  30,  31,  32,\n       33,  34,  35,  36,  37,  38,  39,  40,\n       41,  42,  43,  44,  45,  46,  47,  48,\n       49,  50,  51,  52,  53,  54,  55,  56,\n       57,  58,  59,  60,  61,  62,  63,  64,\n       65,  66,  67,  68,  69,  70,  71,  72,\n       73,  74,  75,  76,  77,  78,  79,  80,\n       81,  82,  83,  84,  85,  86,  87,  88,\n       89,  90,  91,  92,  93,  94,  95,   0,\n        0,   0,   0,   0,   0,   0,   0,   0,\n        0,   0,   0,   0,   0,   0,   0,   0,\n        0,   0,   0,   0,   0,   0,   0,   0,\n        0,   0,   0,   0,   0,   0,   0,   0,\n        0,  96,  97,  98,  99, 100, 101, 102,\n      103, 104, 105, 106, 107, 108, 109, 110,\n        0, 111, 112, 113, 114,   0, 115, 116,\n      117, 118, 119, 120, 121, 122,   0, 123,\n        0, 124, 125, 126, 127, 128, 129, 130,\n      131,   0, 132, 133,   0, 134, 135, 136,\n      137,   0,   0,   0,   0,   0,   0,   0,\n        0,   0,   0,   0,   0,   0,   0,   0,\n        0, 138,   0, 139,   0,   0,   0,   0,\n      140, 141, 142, 143,   0,   0,   0,   0,\n        0, 144,   0,   0,   0, 145,   0,   0,\n      146, 147, 148, 149,   0,   0,   0,   0\n    ];\n    \n  \tTypr.CFF.glyphByUnicode = function(cff, code)\n  \t{\n  \t\tfor(var i=0; i<cff.charset.length; i++) { if(cff.charset[i]==code) { return i; } }\n  \t\treturn -1;\n  \t};\n  \t\n  \tTypr.CFF.glyphBySE = function(cff, charcode)\t// glyph by standard encoding\n  \t{\n  \t\tif ( charcode < 0 || charcode > 255 ) { return -1; }\n  \t\treturn Typr.CFF.glyphByUnicode(cff, Typr.CFF.tableSE[charcode]);\t\t\n  \t};\n  \t\n  \tTypr.CFF.readEncoding = function(data, offset, num)\n  \t{\n  \t\tvar bin = Typr._bin;\n  \t\t\n  \t\tvar array = [\'.notdef\'];\n  \t\tvar format = data[offset];  offset++;\n  \t\t//console.log("Encoding");\n  \t\t//console.log(format);\n  \t\t\n  \t\tif(format==0)\n  \t\t{\n  \t\t\tvar nCodes = data[offset];  offset++;\n  \t\t\tfor(var i=0; i<nCodes; i++)  { array.push(data[offset+i]); }\n  \t\t}\n  \t\t/*\n  \t\telse if(format==1 || format==2)\n  \t\t{\n  \t\t\twhile(charset.length<num)\n  \t\t\t{\n  \t\t\t\tvar first = bin.readUshort(data, offset);  offset+=2;\n  \t\t\t\tvar nLeft=0;\n  \t\t\t\tif(format==1) {  nLeft = data[offset];  offset++;  }\n  \t\t\t\telse          {  nLeft = bin.readUshort(data, offset);  offset+=2;  }\n  \t\t\t\tfor(var i=0; i<=nLeft; i++)  {  charset.push(first);  first++;  }\n  \t\t\t}\n  \t\t}\n  \t\t*/\n  \t\telse { throw "error: unknown encoding format: " + format; }\n  \t\t\n  \t\treturn array;\n  \t};\n\n  \tTypr.CFF.readCharset = function(data, offset, num)\n  \t{\n  \t\tvar bin = Typr._bin;\n  \t\t\n  \t\tvar charset = [\'.notdef\'];\n  \t\tvar format = data[offset];  offset++;\n  \t\t\n  \t\tif(format==0)\n  \t\t{\n  \t\t\tfor(var i=0; i<num; i++) \n  \t\t\t{\n  \t\t\t\tvar first = bin.readUshort(data, offset);  offset+=2;\n  \t\t\t\tcharset.push(first);\n  \t\t\t}\n  \t\t}\n  \t\telse if(format==1 || format==2)\n  \t\t{\n  \t\t\twhile(charset.length<num)\n  \t\t\t{\n  \t\t\t\tvar first = bin.readUshort(data, offset);  offset+=2;\n  \t\t\t\tvar nLeft=0;\n  \t\t\t\tif(format==1) {  nLeft = data[offset];  offset++;  }\n  \t\t\t\telse          {  nLeft = bin.readUshort(data, offset);  offset+=2;  }\n  \t\t\t\tfor(var i=0; i<=nLeft; i++)  {  charset.push(first);  first++;  }\n  \t\t\t}\n  \t\t}\n  \t\telse { throw "error: format: " + format; }\n  \t\t\n  \t\treturn charset;\n  \t};\n\n  \tTypr.CFF.readIndex = function(data, offset, inds)\n  \t{\n  \t\tvar bin = Typr._bin;\n  \t\t\n  \t\tvar count = bin.readUshort(data, offset)+1;  offset+=2;\n  \t\tvar offsize = data[offset];  offset++;\n  \t\t\n  \t\tif     (offsize==1) { for(var i=0; i<count; i++) { inds.push( data[offset+i] ); } }\n  \t\telse if(offsize==2) { for(var i=0; i<count; i++) { inds.push( bin.readUshort(data, offset+i*2) ); } }\n  \t\telse if(offsize==3) { for(var i=0; i<count; i++) { inds.push( bin.readUint  (data, offset+i*3 - 1) & 0x00ffffff ); } }\n  \t\telse if(count!=1) { throw "unsupported offset size: " + offsize + ", count: " + count; }\n  \t\t\n  \t\toffset += count*offsize;\n  \t\treturn offset-1;\n  \t};\n  \t\n  \tTypr.CFF.getCharString = function(data, offset, o)\n  \t{\n  \t\tvar bin = Typr._bin;\n  \t\t\n  \t\tvar b0 = data[offset], b1 = data[offset+1], b2 = data[offset+2], b3 = data[offset+3], b4=data[offset+4];\n  \t\tvar vs = 1;\n  \t\tvar op=null, val=null;\n  \t\t// operand\n  \t\tif(b0<=20) { op = b0;  vs=1;  }\n  \t\tif(b0==12) { op = b0*100+b1;  vs=2;  }\n  \t\t//if(b0==19 || b0==20) { op = b0/*+" "+b1*/;  vs=2; }\n  \t\tif(21 <=b0 && b0<= 27) { op = b0;  vs=1; }\n  \t\tif(b0==28) { val = bin.readShort(data,offset+1);  vs=3; }\n  \t\tif(29 <=b0 && b0<= 31) { op = b0;  vs=1; }\n  \t\tif(32 <=b0 && b0<=246) { val = b0-139;  vs=1; }\n  \t\tif(247<=b0 && b0<=250) { val = (b0-247)*256+b1+108;  vs=2; }\n  \t\tif(251<=b0 && b0<=254) { val =-(b0-251)*256-b1-108;  vs=2; }\n  \t\tif(b0==255) {  val = bin.readInt(data, offset+1)/0xffff;  vs=5;   }\n  \t\t\n  \t\to.val = val!=null ? val : "o"+op;\n  \t\to.size = vs;\n  \t};\n  \t\n  \tTypr.CFF.readCharString = function(data, offset, length)\n  \t{\n  \t\tvar end = offset + length;\n  \t\tvar bin = Typr._bin;\n  \t\tvar arr = [];\n  \t\t\n  \t\twhile(offset<end)\n  \t\t{\n  \t\t\tvar b0 = data[offset], b1 = data[offset+1], b2 = data[offset+2], b3 = data[offset+3], b4=data[offset+4];\n  \t\t\tvar vs = 1;\n  \t\t\tvar op=null, val=null;\n  \t\t\t// operand\n  \t\t\tif(b0<=20) { op = b0;  vs=1;  }\n  \t\t\tif(b0==12) { op = b0*100+b1;  vs=2;  }\n  \t\t\tif(b0==19 || b0==20) { op = b0/*+" "+b1*/;  vs=2; }\n  \t\t\tif(21 <=b0 && b0<= 27) { op = b0;  vs=1; }\n  \t\t\tif(b0==28) { val = bin.readShort(data,offset+1);  vs=3; }\n  \t\t\tif(29 <=b0 && b0<= 31) { op = b0;  vs=1; }\n  \t\t\tif(32 <=b0 && b0<=246) { val = b0-139;  vs=1; }\n  \t\t\tif(247<=b0 && b0<=250) { val = (b0-247)*256+b1+108;  vs=2; }\n  \t\t\tif(251<=b0 && b0<=254) { val =-(b0-251)*256-b1-108;  vs=2; }\n  \t\t\tif(b0==255) {  val = bin.readInt(data, offset+1)/0xffff;  vs=5;   }\n  \t\t\t\n  \t\t\tarr.push(val!=null ? val : "o"+op);\n  \t\t\toffset += vs;\t\n\n  \t\t\t//var cv = arr[arr.length-1];\n  \t\t\t//if(cv==undefined) throw "error";\n  \t\t\t//console.log()\n  \t\t}\t\n  \t\treturn arr;\n  \t};\n\n  \tTypr.CFF.readDict = function(data, offset, end)\n  \t{\n  \t\tvar bin = Typr._bin;\n  \t\t//var dict = [];\n  \t\tvar dict = {};\n  \t\tvar carr = [];\n  \t\t\n  \t\twhile(offset<end)\n  \t\t{\n  \t\t\tvar b0 = data[offset], b1 = data[offset+1], b2 = data[offset+2], b3 = data[offset+3], b4=data[offset+4];\n  \t\t\tvar vs = 1;\n  \t\t\tvar key=null, val=null;\n  \t\t\t// operand\n  \t\t\tif(b0==28) { val = bin.readShort(data,offset+1);  vs=3; }\n  \t\t\tif(b0==29) { val = bin.readInt  (data,offset+1);  vs=5; }\n  \t\t\tif(32 <=b0 && b0<=246) { val = b0-139;  vs=1; }\n  \t\t\tif(247<=b0 && b0<=250) { val = (b0-247)*256+b1+108;  vs=2; }\n  \t\t\tif(251<=b0 && b0<=254) { val =-(b0-251)*256-b1-108;  vs=2; }\n  \t\t\tif(b0==255) {  val = bin.readInt(data, offset+1)/0xffff;  vs=5;  throw "unknown number";  }\n  \t\t\t\n  \t\t\tif(b0==30) \n  \t\t\t{  \n  \t\t\t\tvar nibs = [];\n  \t\t\t\tvs = 1;\n  \t\t\t\twhile(true)\n  \t\t\t\t{\n  \t\t\t\t\tvar b = data[offset+vs];  vs++;\n  \t\t\t\t\tvar nib0 = b>>4, nib1 = b&0xf;\n  \t\t\t\t\tif(nib0 != 0xf) { nibs.push(nib0); }  if(nib1!=0xf) { nibs.push(nib1); }\n  \t\t\t\t\tif(nib1==0xf) { break; }\n  \t\t\t\t}\n  \t\t\t\tvar s = "";\n  \t\t\t\tvar chars = [0,1,2,3,4,5,6,7,8,9,".","e","e-","reserved","-","endOfNumber"];\n  \t\t\t\tfor(var i=0; i<nibs.length; i++) { s += chars[nibs[i]]; }\n  \t\t\t\t//console.log(nibs);\n  \t\t\t\tval = parseFloat(s);\n  \t\t\t}\n  \t\t\t\n  \t\t\tif(b0<=21)\t// operator\n  \t\t\t{\n  \t\t\t\tvar keys = ["version", "Notice", "FullName", "FamilyName", "Weight", "FontBBox", "BlueValues", "OtherBlues", "FamilyBlues","FamilyOtherBlues",\n  \t\t\t\t\t"StdHW", "StdVW", "escape", "UniqueID", "XUID", "charset", "Encoding", "CharStrings", "Private", "Subrs", \n  \t\t\t\t\t"defaultWidthX", "nominalWidthX"];\n  \t\t\t\t\t\n  \t\t\t\tkey = keys[b0];  vs=1;\n  \t\t\t\tif(b0==12) { \n  \t\t\t\t\tvar keys = [ "Copyright", "isFixedPitch", "ItalicAngle", "UnderlinePosition", "UnderlineThickness", "PaintType", "CharstringType", "FontMatrix", "StrokeWidth", "BlueScale",\n  \t\t\t\t\t"BlueShift", "BlueFuzz", "StemSnapH", "StemSnapV", "ForceBold", 0,0, "LanguageGroup", "ExpansionFactor", "initialRandomSeed",\n  \t\t\t\t\t"SyntheticBase", "PostScript", "BaseFontName", "BaseFontBlend", 0,0,0,0,0,0, \n  \t\t\t\t\t"ROS", "CIDFontVersion", "CIDFontRevision", "CIDFontType", "CIDCount", "UIDBase", "FDArray", "FDSelect", "FontName"];\n  \t\t\t\t\tkey = keys[b1];  vs=2; \n  \t\t\t\t}\n  \t\t\t}\n  \t\t\t\n  \t\t\tif(key!=null) {  dict[key] = carr.length==1 ? carr[0] : carr;  carr=[]; }\n  \t\t\telse  { carr.push(val); }  \n  \t\t\t\n  \t\t\toffset += vs;\t\t\n  \t\t}\t\n  \t\treturn dict;\n  \t};\n\n\n  Typr.cmap = {};\n  Typr.cmap.parse = function(data, offset, length)\n  {\n  \tdata = new Uint8Array(data.buffer, offset, length);\n  \toffset = 0;\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \tvar version   = bin.readUshort(data, offset);  offset += 2;\n  \tvar numTables = bin.readUshort(data, offset);  offset += 2;\n  \t\n  \t//console.log(version, numTables);\n  \t\n  \tvar offs = [];\n  \tobj.tables = [];\n  \t\n  \t\n  \tfor(var i=0; i<numTables; i++)\n  \t{\n  \t\tvar platformID = bin.readUshort(data, offset);  offset += 2;\n  \t\tvar encodingID = bin.readUshort(data, offset);  offset += 2;\n  \t\tvar noffset = bin.readUint(data, offset);       offset += 4;\n  \t\t\n  \t\tvar id = "p"+platformID+"e"+encodingID;\n  \t\t\n  \t\t//console.log("cmap subtable", platformID, encodingID, noffset);\n  \t\t\n  \t\t\n  \t\tvar tind = offs.indexOf(noffset);\n  \t\t\n  \t\tif(tind==-1)\n  \t\t{\n  \t\t\ttind = obj.tables.length;\n  \t\t\tvar subt;\n  \t\t\toffs.push(noffset);\n  \t\t\tvar format = bin.readUshort(data, noffset);\n  \t\t\tif     (format== 0) { subt = Typr.cmap.parse0(data, noffset); }\n  \t\t\telse if(format== 4) { subt = Typr.cmap.parse4(data, noffset); }\n  \t\t\telse if(format== 6) { subt = Typr.cmap.parse6(data, noffset); }\n  \t\t\telse if(format==12) { subt = Typr.cmap.parse12(data,noffset); }\n  \t\t\telse { console.log("unknown format: "+format, platformID, encodingID, noffset); }\n  \t\t\tobj.tables.push(subt);\n  \t\t}\n  \t\t\n  \t\tif(obj[id]!=null) { throw "multiple tables for one platform+encoding"; }\n  \t\tobj[id] = tind;\n  \t}\n  \treturn obj;\n  };\n\n  Typr.cmap.parse0 = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \tobj.format = bin.readUshort(data, offset);  offset += 2;\n  \tvar len    = bin.readUshort(data, offset);  offset += 2;\n  \tvar lang   = bin.readUshort(data, offset);  offset += 2;\n  \tobj.map = [];\n  \tfor(var i=0; i<len-6; i++) { obj.map.push(data[offset+i]); }\n  \treturn obj;\n  };\n\n  Typr.cmap.parse4 = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \tvar offset0 = offset;\n  \tvar obj = {};\n  \t\n  \tobj.format = bin.readUshort(data, offset);  offset+=2;\n  \tvar length = bin.readUshort(data, offset);  offset+=2;\n  \tvar language = bin.readUshort(data, offset);  offset+=2;\n  \tvar segCountX2 = bin.readUshort(data, offset);  offset+=2;\n  \tvar segCount = segCountX2/2;\n  \tobj.searchRange = bin.readUshort(data, offset);  offset+=2;\n  \tobj.entrySelector = bin.readUshort(data, offset);  offset+=2;\n  \tobj.rangeShift = bin.readUshort(data, offset);  offset+=2;\n  \tobj.endCount   = bin.readUshorts(data, offset, segCount);  offset += segCount*2;\n  \toffset+=2;\n  \tobj.startCount = bin.readUshorts(data, offset, segCount);  offset += segCount*2;\n  \tobj.idDelta = [];\n  \tfor(var i=0; i<segCount; i++) {obj.idDelta.push(bin.readShort(data, offset));  offset+=2;}\n  \tobj.idRangeOffset = bin.readUshorts(data, offset, segCount);  offset += segCount*2;\n  \tobj.glyphIdArray = [];\n  \twhile(offset< offset0+length) {obj.glyphIdArray.push(bin.readUshort(data, offset));  offset+=2;}\n  \treturn obj;\n  };\n\n  Typr.cmap.parse6 = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \t\n  \tobj.format = bin.readUshort(data, offset);  offset+=2;\n  \tvar length = bin.readUshort(data, offset);  offset+=2;\n  \tvar language = bin.readUshort(data, offset);  offset+=2;\n  \tobj.firstCode = bin.readUshort(data, offset);  offset+=2;\n  \tvar entryCount = bin.readUshort(data, offset);  offset+=2;\n  \tobj.glyphIdArray = [];\n  \tfor(var i=0; i<entryCount; i++) {obj.glyphIdArray.push(bin.readUshort(data, offset));  offset+=2;}\n  \t\n  \treturn obj;\n  };\n\n  Typr.cmap.parse12 = function(data, offset)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \t\n  \tobj.format = bin.readUshort(data, offset);  offset+=2;\n  \toffset += 2;\n  \tvar length = bin.readUint(data, offset);  offset+=4;\n  \tvar lang   = bin.readUint(data, offset);  offset+=4;\n  \tvar nGroups= bin.readUint(data, offset);  offset+=4;\n  \tobj.groups = [];\n  \t\n  \tfor(var i=0; i<nGroups; i++)  \n  \t{\n  \t\tvar off = offset + i * 12;\n  \t\tvar startCharCode = bin.readUint(data, off+0);\n  \t\tvar endCharCode   = bin.readUint(data, off+4);\n  \t\tvar startGlyphID  = bin.readUint(data, off+8);\n  \t\tobj.groups.push([  startCharCode, endCharCode, startGlyphID  ]);\n  \t}\n  \treturn obj;\n  };\n\n  Typr.glyf = {};\n  Typr.glyf.parse = function(data, offset, length, font)\n  {\n  \tvar obj = [];\n  \tfor(var g=0; g<font.maxp.numGlyphs; g++) { obj.push(null); }\n  \treturn obj;\n  };\n\n  Typr.glyf._parseGlyf = function(font, g)\n  {\n  \tvar bin = Typr._bin;\n  \tvar data = font._data;\n  \t\n  \tvar offset = Typr._tabOffset(data, "glyf", font._offset) + font.loca[g];\n  \t\t\n  \tif(font.loca[g]==font.loca[g+1]) { return null; }\n  \t\t\n  \tvar gl = {};\n  \t\t\n  \tgl.noc  = bin.readShort(data, offset);  offset+=2;\t\t// number of contours\n  \tgl.xMin = bin.readShort(data, offset);  offset+=2;\n  \tgl.yMin = bin.readShort(data, offset);  offset+=2;\n  \tgl.xMax = bin.readShort(data, offset);  offset+=2;\n  \tgl.yMax = bin.readShort(data, offset);  offset+=2;\n  \t\n  \tif(gl.xMin>=gl.xMax || gl.yMin>=gl.yMax) { return null; }\n  \t\t\n  \tif(gl.noc>0)\n  \t{\n  \t\tgl.endPts = [];\n  \t\tfor(var i=0; i<gl.noc; i++) { gl.endPts.push(bin.readUshort(data,offset)); offset+=2; }\n  \t\t\n  \t\tvar instructionLength = bin.readUshort(data,offset); offset+=2;\n  \t\tif((data.length-offset)<instructionLength) { return null; }\n  \t\tgl.instructions = bin.readBytes(data, offset, instructionLength);   offset+=instructionLength;\n  \t\t\n  \t\tvar crdnum = gl.endPts[gl.noc-1]+1;\n  \t\tgl.flags = [];\n  \t\tfor(var i=0; i<crdnum; i++ ) \n  \t\t{ \n  \t\t\tvar flag = data[offset];  offset++; \n  \t\t\tgl.flags.push(flag); \n  \t\t\tif((flag&8)!=0)\n  \t\t\t{\n  \t\t\t\tvar rep = data[offset];  offset++;\n  \t\t\t\tfor(var j=0; j<rep; j++) { gl.flags.push(flag); i++; }\n  \t\t\t}\n  \t\t}\n  \t\tgl.xs = [];\n  \t\tfor(var i=0; i<crdnum; i++) {\n  \t\t\tvar i8=((gl.flags[i]&2)!=0), same=((gl.flags[i]&16)!=0);  \n  \t\t\tif(i8) { gl.xs.push(same ? data[offset] : -data[offset]);  offset++; }\n  \t\t\telse\n  \t\t\t{\n  \t\t\t\tif(same) { gl.xs.push(0); }\n  \t\t\t\telse { gl.xs.push(bin.readShort(data, offset));  offset+=2; }\n  \t\t\t}\n  \t\t}\n  \t\tgl.ys = [];\n  \t\tfor(var i=0; i<crdnum; i++) {\n  \t\t\tvar i8=((gl.flags[i]&4)!=0), same=((gl.flags[i]&32)!=0);  \n  \t\t\tif(i8) { gl.ys.push(same ? data[offset] : -data[offset]);  offset++; }\n  \t\t\telse\n  \t\t\t{\n  \t\t\t\tif(same) { gl.ys.push(0); }\n  \t\t\t\telse { gl.ys.push(bin.readShort(data, offset));  offset+=2; }\n  \t\t\t}\n  \t\t}\n  \t\tvar x = 0, y = 0;\n  \t\tfor(var i=0; i<crdnum; i++) { x += gl.xs[i]; y += gl.ys[i];  gl.xs[i]=x;  gl.ys[i]=y; }\n  \t\t//console.log(endPtsOfContours, instructionLength, instructions, flags, xCoordinates, yCoordinates);\n  \t}\n  \telse\n  \t{\n  \t\tvar ARG_1_AND_2_ARE_WORDS\t= 1<<0;\n  \t\tvar ARGS_ARE_XY_VALUES\t\t= 1<<1;\n  \t\tvar WE_HAVE_A_SCALE\t\t\t= 1<<3;\n  \t\tvar MORE_COMPONENTS\t\t\t= 1<<5;\n  \t\tvar WE_HAVE_AN_X_AND_Y_SCALE= 1<<6;\n  \t\tvar WE_HAVE_A_TWO_BY_TWO\t= 1<<7;\n  \t\tvar WE_HAVE_INSTRUCTIONS\t= 1<<8;\n  \t\t\n  \t\tgl.parts = [];\n  \t\tvar flags;\n  \t\tdo {\n  \t\t\tflags = bin.readUshort(data, offset);  offset += 2;\n  \t\t\tvar part = { m:{a:1,b:0,c:0,d:1,tx:0,ty:0}, p1:-1, p2:-1 };  gl.parts.push(part);\n  \t\t\tpart.glyphIndex = bin.readUshort(data, offset);  offset += 2;\n  \t\t\tif ( flags & ARG_1_AND_2_ARE_WORDS) {\n  \t\t\t\tvar arg1 = bin.readShort(data, offset);  offset += 2;\n  \t\t\t\tvar arg2 = bin.readShort(data, offset);  offset += 2;\n  \t\t\t} else {\n  \t\t\t\tvar arg1 = bin.readInt8(data, offset);  offset ++;\n  \t\t\t\tvar arg2 = bin.readInt8(data, offset);  offset ++;\n  \t\t\t}\n  \t\t\t\n  \t\t\tif(flags & ARGS_ARE_XY_VALUES) { part.m.tx = arg1;  part.m.ty = arg2; }\n  \t\t\telse  {  part.p1=arg1;  part.p2=arg2;  }\n  \t\t\t//part.m.tx = arg1;  part.m.ty = arg2;\n  \t\t\t//else { throw "params are not XY values"; }\n  \t\t\t\n  \t\t\tif ( flags & WE_HAVE_A_SCALE ) {\n  \t\t\t\tpart.m.a = part.m.d = bin.readF2dot14(data, offset);  offset += 2;    \n  \t\t\t} else if ( flags & WE_HAVE_AN_X_AND_Y_SCALE ) {\n  \t\t\t\tpart.m.a = bin.readF2dot14(data, offset);  offset += 2; \n  \t\t\t\tpart.m.d = bin.readF2dot14(data, offset);  offset += 2; \n  \t\t\t} else if ( flags & WE_HAVE_A_TWO_BY_TWO ) {\n  \t\t\t\tpart.m.a = bin.readF2dot14(data, offset);  offset += 2; \n  \t\t\t\tpart.m.b = bin.readF2dot14(data, offset);  offset += 2; \n  \t\t\t\tpart.m.c = bin.readF2dot14(data, offset);  offset += 2; \n  \t\t\t\tpart.m.d = bin.readF2dot14(data, offset);  offset += 2; \n  \t\t\t}\n  \t\t} while ( flags & MORE_COMPONENTS ) \n  \t\tif (flags & WE_HAVE_INSTRUCTIONS){\n  \t\t\tvar numInstr = bin.readUshort(data, offset);  offset += 2;\n  \t\t\tgl.instr = [];\n  \t\t\tfor(var i=0; i<numInstr; i++) { gl.instr.push(data[offset]);  offset++; }\n  \t\t}\n  \t}\n  \treturn gl;\n  };\n\n\n  Typr.GPOS = {};\n  Typr.GPOS.parse = function(data, offset, length, font) {  return Typr._lctf.parse(data, offset, length, font, Typr.GPOS.subt);  };\n\n\n  Typr.GPOS.subt = function(data, ltype, offset)\t// lookup type\n  {\n  \tvar bin = Typr._bin, offset0 = offset, tab = {};\n  \t\n  \ttab.fmt  = bin.readUshort(data, offset);  offset+=2;\n  \t\n  \t//console.log(ltype, tab.fmt);\n  \t\n  \tif(ltype==1 || ltype==2 || ltype==3 || ltype==7 || (ltype==8 && tab.fmt<=2)) {\n  \t\tvar covOff  = bin.readUshort(data, offset);  offset+=2;\n  \t\ttab.coverage = Typr._lctf.readCoverage(data, covOff+offset0);\n  \t}\n  \tif(ltype==1 && tab.fmt==1) {\n  \t\tvar valFmt1 = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar ones1 = Typr._lctf.numOfOnes(valFmt1);\n  \t\tif(valFmt1!=0)  { tab.pos = Typr.GPOS.readValueRecord(data, offset, valFmt1); }\n  \t}\n  \telse if(ltype==2) {\n  \t\tvar valFmt1 = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar valFmt2 = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar ones1 = Typr._lctf.numOfOnes(valFmt1);\n  \t\tvar ones2 = Typr._lctf.numOfOnes(valFmt2);\n  \t\tif(tab.fmt==1)\n  \t\t{\n  \t\t\ttab.pairsets = [];\n  \t\t\tvar psc = bin.readUshort(data, offset);  offset+=2;  // PairSetCount\n  \t\t\t\n  \t\t\tfor(var i=0; i<psc; i++)\n  \t\t\t{\n  \t\t\t\tvar psoff = offset0 + bin.readUshort(data, offset);  offset+=2;\n  \t\t\t\t\n  \t\t\t\tvar pvc = bin.readUshort(data, psoff);  psoff+=2;\n  \t\t\t\tvar arr = [];\n  \t\t\t\tfor(var j=0; j<pvc; j++)\n  \t\t\t\t{\n  \t\t\t\t\tvar gid2 = bin.readUshort(data, psoff);  psoff+=2;\n  \t\t\t\t\tvar value1, value2;\n  \t\t\t\t\tif(valFmt1!=0) {  value1 = Typr.GPOS.readValueRecord(data, psoff, valFmt1);  psoff+=ones1*2;  }\n  \t\t\t\t\tif(valFmt2!=0) {  value2 = Typr.GPOS.readValueRecord(data, psoff, valFmt2);  psoff+=ones2*2;  }\n  \t\t\t\t\t//if(value1!=null) throw "e";\n  \t\t\t\t\tarr.push({gid2:gid2, val1:value1, val2:value2});\n  \t\t\t\t}\n  \t\t\t\ttab.pairsets.push(arr);\n  \t\t\t}\n  \t\t}\n  \t\tif(tab.fmt==2)\n  \t\t{\n  \t\t\tvar classDef1 = bin.readUshort(data, offset);  offset+=2;\n  \t\t\tvar classDef2 = bin.readUshort(data, offset);  offset+=2;\n  \t\t\tvar class1Count = bin.readUshort(data, offset);  offset+=2;\n  \t\t\tvar class2Count = bin.readUshort(data, offset);  offset+=2;\n  \t\t\t\n  \t\t\ttab.classDef1 = Typr._lctf.readClassDef(data, offset0 + classDef1);\n  \t\t\ttab.classDef2 = Typr._lctf.readClassDef(data, offset0 + classDef2);\n  \t\t\t\n  \t\t\ttab.matrix = [];\n  \t\t\tfor(var i=0; i<class1Count; i++)\n  \t\t\t{\n  \t\t\t\tvar row = [];\n  \t\t\t\tfor(var j=0; j<class2Count; j++)\n  \t\t\t\t{\n  \t\t\t\t\tvar value1 = null, value2 = null;\n  \t\t\t\t\tif(tab.valFmt1!=0) { value1 = Typr.GPOS.readValueRecord(data, offset, tab.valFmt1);  offset+=ones1*2; }\n  \t\t\t\t\tif(tab.valFmt2!=0) { value2 = Typr.GPOS.readValueRecord(data, offset, tab.valFmt2);  offset+=ones2*2; }\n  \t\t\t\t\trow.push({val1:value1, val2:value2});\n  \t\t\t\t}\n  \t\t\t\ttab.matrix.push(row);\n  \t\t\t}\n  \t\t}\n  \t}\n  \treturn tab;\n  };\n\n\n  Typr.GPOS.readValueRecord = function(data, offset, valFmt)\n  {\n  \tvar bin = Typr._bin;\n  \tvar arr = [];\n  \tarr.push( (valFmt&1) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&1) ? 2 : 0;  // X_PLACEMENT\n  \tarr.push( (valFmt&2) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&2) ? 2 : 0;  // Y_PLACEMENT\n  \tarr.push( (valFmt&4) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&4) ? 2 : 0;  // X_ADVANCE\n  \tarr.push( (valFmt&8) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&8) ? 2 : 0;  // Y_ADVANCE\n  \treturn arr;\n  };\n\n  Typr.GSUB = {};\n  Typr.GSUB.parse = function(data, offset, length, font) {  return Typr._lctf.parse(data, offset, length, font, Typr.GSUB.subt);  };\n\n\n  Typr.GSUB.subt = function(data, ltype, offset)\t// lookup type\n  {\n  \tvar bin = Typr._bin, offset0 = offset, tab = {};\n  \t\n  \ttab.fmt  = bin.readUshort(data, offset);  offset+=2;\n  \t\n  \tif(ltype!=1 && ltype!=4 && ltype!=5 && ltype!=6) { return null; }\n  \t\n  \tif(ltype==1 || ltype==4 || (ltype==5 && tab.fmt<=2) || (ltype==6 && tab.fmt<=2)) {\n  \t\tvar covOff  = bin.readUshort(data, offset);  offset+=2;\n  \t\ttab.coverage = Typr._lctf.readCoverage(data, offset0+covOff);\t// not always is coverage here\n  \t}\n  \t\n  \tif(ltype==1) {\t\n  \t\tif(tab.fmt==1) {\n  \t\t\ttab.delta = bin.readShort(data, offset);  offset+=2;\n  \t\t}\n  \t\telse if(tab.fmt==2) {\n  \t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n  \t\t\ttab.newg = bin.readUshorts(data, offset, cnt);  offset+=tab.newg.length*2;\n  \t\t}\n  \t}\n  \t//  Ligature Substitution Subtable\n  \telse if(ltype==4) {\n  \t\ttab.vals = [];\n  \t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n  \t\tfor(var i=0; i<cnt; i++) {\n  \t\t\tvar loff = bin.readUshort(data, offset);  offset+=2;\n  \t\t\ttab.vals.push(Typr.GSUB.readLigatureSet(data, offset0+loff));\n  \t\t}\n  \t\t//console.log(tab.coverage);\n  \t\t//console.log(tab.vals);\n  \t} \n  \t//  Contextual Substitution Subtable\n  \telse if(ltype==5) {\n  \t\tif(tab.fmt==2) {\n  \t\t\tvar cDefOffset = bin.readUshort(data, offset);  offset+=2;\n  \t\t\ttab.cDef = Typr._lctf.readClassDef(data, offset0 + cDefOffset);\n  \t\t\ttab.scset = [];\n  \t\t\tvar subClassSetCount = bin.readUshort(data, offset);  offset+=2;\n  \t\t\tfor(var i=0; i<subClassSetCount; i++)\n  \t\t\t{\n  \t\t\t\tvar scsOff = bin.readUshort(data, offset);  offset+=2;\n  \t\t\t\ttab.scset.push(  scsOff==0 ? null : Typr.GSUB.readSubClassSet(data, offset0 + scsOff)  );\n  \t\t\t}\n  \t\t}\n  \t\t//else console.log("unknown table format", tab.fmt);\n  \t}\n  \t//*\n  \telse if(ltype==6) {\n  \t\t/*\n  \t\tif(tab.fmt==2) {\n  \t\t\tvar btDef = bin.readUshort(data, offset);  offset+=2;\n  \t\t\tvar inDef = bin.readUshort(data, offset);  offset+=2;\n  \t\t\tvar laDef = bin.readUshort(data, offset);  offset+=2;\n  \t\t\t\n  \t\t\ttab.btDef = Typr._lctf.readClassDef(data, offset0 + btDef);\n  \t\t\ttab.inDef = Typr._lctf.readClassDef(data, offset0 + inDef);\n  \t\t\ttab.laDef = Typr._lctf.readClassDef(data, offset0 + laDef);\n  \t\t\t\n  \t\t\ttab.scset = [];\n  \t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n  \t\t\tfor(var i=0; i<cnt; i++) {\n  \t\t\t\tvar loff = bin.readUshort(data, offset);  offset+=2;\n  \t\t\t\ttab.scset.push(Typr.GSUB.readChainSubClassSet(data, offset0+loff));\n  \t\t\t}\n  \t\t}\n  \t\t*/\n  \t\tif(tab.fmt==3) {\n  \t\t\tfor(var i=0; i<3; i++) {\n  \t\t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n  \t\t\t\tvar cvgs = [];\n  \t\t\t\tfor(var j=0; j<cnt; j++) { cvgs.push(  Typr._lctf.readCoverage(data, offset0 + bin.readUshort(data, offset+j*2))   ); }\n  \t\t\t\toffset+=cnt*2;\n  \t\t\t\tif(i==0) { tab.backCvg = cvgs; }\n  \t\t\t\tif(i==1) { tab.inptCvg = cvgs; }\n  \t\t\t\tif(i==2) { tab.ahedCvg = cvgs; }\n  \t\t\t}\n  \t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n  \t\t\ttab.lookupRec = Typr.GSUB.readSubstLookupRecords(data, offset, cnt);\n  \t\t}\n  \t\t//console.log(tab);\n  \t} //*/\n  \t//if(tab.coverage.indexOf(3)!=-1) console.log(ltype, fmt, tab);\n  \t\n  \treturn tab;\n  };\n\n  Typr.GSUB.readSubClassSet = function(data, offset)\n  {\n  \tvar rUs = Typr._bin.readUshort, offset0 = offset, lset = [];\n  \tvar cnt = rUs(data, offset);  offset+=2;\n  \tfor(var i=0; i<cnt; i++) {\n  \t\tvar loff = rUs(data, offset);  offset+=2;\n  \t\tlset.push(Typr.GSUB.readSubClassRule(data, offset0+loff));\n  \t}\n  \treturn lset;\n  };\n  Typr.GSUB.readSubClassRule= function(data, offset)\n  {\n  \tvar rUs = Typr._bin.readUshort, rule = {};\n  \tvar gcount = rUs(data, offset);  offset+=2;\n  \tvar scount = rUs(data, offset);  offset+=2;\n  \trule.input = [];\n  \tfor(var i=0; i<gcount-1; i++) {\n  \t\trule.input.push(rUs(data, offset));  offset+=2;\n  \t}\n  \trule.substLookupRecords = Typr.GSUB.readSubstLookupRecords(data, offset, scount);\n  \treturn rule;\n  };\n  Typr.GSUB.readSubstLookupRecords = function(data, offset, cnt)\n  {\n  \tvar rUs = Typr._bin.readUshort;\n  \tvar out = [];\n  \tfor(var i=0; i<cnt; i++) {  out.push(rUs(data, offset), rUs(data, offset+2));  offset+=4;  }\n  \treturn out;\n  };\n\n  Typr.GSUB.readChainSubClassSet = function(data, offset)\n  {\n  \tvar bin = Typr._bin, offset0 = offset, lset = [];\n  \tvar cnt = bin.readUshort(data, offset);  offset+=2;\n  \tfor(var i=0; i<cnt; i++) {\n  \t\tvar loff = bin.readUshort(data, offset);  offset+=2;\n  \t\tlset.push(Typr.GSUB.readChainSubClassRule(data, offset0+loff));\n  \t}\n  \treturn lset;\n  };\n  Typr.GSUB.readChainSubClassRule= function(data, offset)\n  {\n  \tvar bin = Typr._bin, rule = {};\n  \tvar pps = ["backtrack", "input", "lookahead"];\n  \tfor(var pi=0; pi<pps.length; pi++) {\n  \t\tvar cnt = bin.readUshort(data, offset);  offset+=2;  if(pi==1) { cnt--; }\n  \t\trule[pps[pi]]=bin.readUshorts(data, offset, cnt);  offset+= rule[pps[pi]].length*2;\n  \t}\n  \tvar cnt = bin.readUshort(data, offset);  offset+=2;\n  \trule.subst = bin.readUshorts(data, offset, cnt*2);  offset += rule.subst.length*2;\n  \treturn rule;\n  };\n\n  Typr.GSUB.readLigatureSet = function(data, offset)\n  {\n  \tvar bin = Typr._bin, offset0 = offset, lset = [];\n  \tvar lcnt = bin.readUshort(data, offset);  offset+=2;\n  \tfor(var j=0; j<lcnt; j++) {\n  \t\tvar loff = bin.readUshort(data, offset);  offset+=2;\n  \t\tlset.push(Typr.GSUB.readLigature(data, offset0+loff));\n  \t}\n  \treturn lset;\n  };\n  Typr.GSUB.readLigature = function(data, offset)\n  {\n  \tvar bin = Typr._bin, lig = {chain:[]};\n  \tlig.nglyph = bin.readUshort(data, offset);  offset+=2;\n  \tvar ccnt = bin.readUshort(data, offset);  offset+=2;\n  \tfor(var k=0; k<ccnt-1; k++) {  lig.chain.push(bin.readUshort(data, offset));  offset+=2;  }\n  \treturn lig;\n  };\n\n\n\n  Typr.head = {};\n  Typr.head.parse = function(data, offset, length)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \tvar tableVersion = bin.readFixed(data, offset);  offset += 4;\n  \tobj.fontRevision = bin.readFixed(data, offset);  offset += 4;\n  \tvar checkSumAdjustment = bin.readUint(data, offset);  offset += 4;\n  \tvar magicNumber = bin.readUint(data, offset);  offset += 4;\n  \tobj.flags = bin.readUshort(data, offset);  offset += 2;\n  \tobj.unitsPerEm = bin.readUshort(data, offset);  offset += 2;\n  \tobj.created  = bin.readUint64(data, offset);  offset += 8;\n  \tobj.modified = bin.readUint64(data, offset);  offset += 8;\n  \tobj.xMin = bin.readShort(data, offset);  offset += 2;\n  \tobj.yMin = bin.readShort(data, offset);  offset += 2;\n  \tobj.xMax = bin.readShort(data, offset);  offset += 2;\n  \tobj.yMax = bin.readShort(data, offset);  offset += 2;\n  \tobj.macStyle = bin.readUshort(data, offset);  offset += 2;\n  \tobj.lowestRecPPEM = bin.readUshort(data, offset);  offset += 2;\n  \tobj.fontDirectionHint = bin.readShort(data, offset);  offset += 2;\n  \tobj.indexToLocFormat  = bin.readShort(data, offset);  offset += 2;\n  \tobj.glyphDataFormat   = bin.readShort(data, offset);  offset += 2;\n  \treturn obj;\n  };\n\n\n  Typr.hhea = {};\n  Typr.hhea.parse = function(data, offset, length)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \tvar tableVersion = bin.readFixed(data, offset);  offset += 4;\n  \tobj.ascender  = bin.readShort(data, offset);  offset += 2;\n  \tobj.descender = bin.readShort(data, offset);  offset += 2;\n  \tobj.lineGap = bin.readShort(data, offset);  offset += 2;\n  \t\n  \tobj.advanceWidthMax = bin.readUshort(data, offset);  offset += 2;\n  \tobj.minLeftSideBearing  = bin.readShort(data, offset);  offset += 2;\n  \tobj.minRightSideBearing = bin.readShort(data, offset);  offset += 2;\n  \tobj.xMaxExtent = bin.readShort(data, offset);  offset += 2;\n  \t\n  \tobj.caretSlopeRise = bin.readShort(data, offset);  offset += 2;\n  \tobj.caretSlopeRun  = bin.readShort(data, offset);  offset += 2;\n  \tobj.caretOffset    = bin.readShort(data, offset);  offset += 2;\n  \t\n  \toffset += 4*2;\n  \t\n  \tobj.metricDataFormat = bin.readShort (data, offset);  offset += 2;\n  \tobj.numberOfHMetrics = bin.readUshort(data, offset);  offset += 2;\n  \treturn obj;\n  };\n\n\n  Typr.hmtx = {};\n  Typr.hmtx.parse = function(data, offset, length, font)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \t\n  \tobj.aWidth = [];\n  \tobj.lsBearing = [];\n  \t\n  \t\n  \tvar aw = 0, lsb = 0;\n  \t\n  \tfor(var i=0; i<font.maxp.numGlyphs; i++)\n  \t{\n  \t\tif(i<font.hhea.numberOfHMetrics) {  aw=bin.readUshort(data, offset);  offset += 2;  lsb=bin.readShort(data, offset);  offset+=2;  }\n  \t\tobj.aWidth.push(aw);\n  \t\tobj.lsBearing.push(lsb);\n  \t}\n  \t\n  \treturn obj;\n  };\n\n\n  Typr.kern = {};\n  Typr.kern.parse = function(data, offset, length, font)\n  {\n  \tvar bin = Typr._bin;\n  \t\n  \tvar version = bin.readUshort(data, offset);  offset+=2;\n  \tif(version==1) { return Typr.kern.parseV1(data, offset-2, length, font); }\n  \tvar nTables = bin.readUshort(data, offset);  offset+=2;\n  \t\n  \tvar map = {glyph1: [], rval:[]};\n  \tfor(var i=0; i<nTables; i++)\n  \t{\n  \t\toffset+=2;\t// skip version\n  \t\tvar length  = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar coverage = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar format = coverage>>>8;\n  \t\t/* I have seen format 128 once, that\'s why I do */ format &= 0xf;\n  \t\tif(format==0) { offset = Typr.kern.readFormat0(data, offset, map); }\n  \t\telse { throw "unknown kern table format: "+format; }\n  \t}\n  \treturn map;\n  };\n\n  Typr.kern.parseV1 = function(data, offset, length, font)\n  {\n  \tvar bin = Typr._bin;\n  \t\n  \tvar version = bin.readFixed(data, offset);  offset+=4;\n  \tvar nTables = bin.readUint(data, offset);  offset+=4;\n  \t\n  \tvar map = {glyph1: [], rval:[]};\n  \tfor(var i=0; i<nTables; i++)\n  \t{\n  \t\tvar length = bin.readUint(data, offset);   offset+=4;\n  \t\tvar coverage = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar tupleIndex = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar format = coverage>>>8;\n  \t\t/* I have seen format 128 once, that\'s why I do */ format &= 0xf;\n  \t\tif(format==0) { offset = Typr.kern.readFormat0(data, offset, map); }\n  \t\telse { throw "unknown kern table format: "+format; }\n  \t}\n  \treturn map;\n  };\n\n  Typr.kern.readFormat0 = function(data, offset, map)\n  {\n  \tvar bin = Typr._bin;\n  \tvar pleft = -1;\n  \tvar nPairs        = bin.readUshort(data, offset);  offset+=2;\n  \tvar searchRange   = bin.readUshort(data, offset);  offset+=2;\n  \tvar entrySelector = bin.readUshort(data, offset);  offset+=2;\n  \tvar rangeShift    = bin.readUshort(data, offset);  offset+=2;\n  \tfor(var j=0; j<nPairs; j++)\n  \t{\n  \t\tvar left  = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar right = bin.readUshort(data, offset);  offset+=2;\n  \t\tvar value = bin.readShort (data, offset);  offset+=2;\n  \t\tif(left!=pleft) { map.glyph1.push(left);  map.rval.push({ glyph2:[], vals:[] }); }\n  \t\tvar rval = map.rval[map.rval.length-1];\n  \t\trval.glyph2.push(right);   rval.vals.push(value);\n  \t\tpleft = left;\n  \t}\n  \treturn offset;\n  };\n\n\n\n  Typr.loca = {};\n  Typr.loca.parse = function(data, offset, length, font)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = [];\n  \t\n  \tvar ver = font.head.indexToLocFormat;\n  \t//console.log("loca", ver, length, 4*font.maxp.numGlyphs);\n  \tvar len = font.maxp.numGlyphs+1;\n  \t\n  \tif(ver==0) { for(var i=0; i<len; i++) { obj.push(bin.readUshort(data, offset+(i<<1))<<1); } }\n  \tif(ver==1) { for(var i=0; i<len; i++) { obj.push(bin.readUint  (data, offset+(i<<2))   ); } }\n  \t\n  \treturn obj;\n  };\n\n\n  Typr.maxp = {};\n  Typr.maxp.parse = function(data, offset, length)\n  {\n  \t//console.log(data.length, offset, length);\n  \t\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \t\n  \t// both versions 0.5 and 1.0\n  \tvar ver = bin.readUint(data, offset); offset += 4;\n  \tobj.numGlyphs = bin.readUshort(data, offset);  offset += 2;\n  \t\n  \t// only 1.0\n  \tif(ver == 0x00010000)\n  \t{\n  \t\tobj.maxPoints             = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxContours           = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxCompositePoints    = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxCompositeContours  = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxZones              = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxTwilightPoints     = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxStorage            = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxFunctionDefs       = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxInstructionDefs    = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxStackElements      = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxSizeOfInstructions = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxComponentElements  = bin.readUshort(data, offset);  offset += 2;\n  \t\tobj.maxComponentDepth     = bin.readUshort(data, offset);  offset += 2;\n  \t}\n  \t\n  \treturn obj;\n  };\n\n\n  Typr.name = {};\n  Typr.name.parse = function(data, offset, length)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \tvar format = bin.readUshort(data, offset);  offset += 2;\n  \tvar count  = bin.readUshort(data, offset);  offset += 2;\n  \tvar stringOffset = bin.readUshort(data, offset);  offset += 2;\n  \t\n  \t//console.log(format,count);\n  \t\n  \tvar names = [\n  \t\t"copyright",\n  \t\t"fontFamily",\n  \t\t"fontSubfamily",\n  \t\t"ID",\n  \t\t"fullName",\n  \t\t"version",\n  \t\t"postScriptName",\n  \t\t"trademark",\n  \t\t"manufacturer",\n  \t\t"designer",\n  \t\t"description",\n  \t\t"urlVendor",\n  \t\t"urlDesigner",\n  \t\t"licence",\n  \t\t"licenceURL",\n  \t\t"---",\n  \t\t"typoFamilyName",\n  \t\t"typoSubfamilyName",\n  \t\t"compatibleFull",\n  \t\t"sampleText",\n  \t\t"postScriptCID",\n  \t\t"wwsFamilyName",\n  \t\t"wwsSubfamilyName",\n  \t\t"lightPalette",\n  \t\t"darkPalette"\n  \t];\n  \t\n  \tvar offset0 = offset;\n  \t\n  \tfor(var i=0; i<count; i++)\n  \t{\n  \t\tvar platformID = bin.readUshort(data, offset);  offset += 2;\n  \t\tvar encodingID = bin.readUshort(data, offset);  offset += 2;\n  \t\tvar languageID = bin.readUshort(data, offset);  offset += 2;\n  \t\tvar nameID     = bin.readUshort(data, offset);  offset += 2;\n  \t\tvar slen       = bin.readUshort(data, offset);  offset += 2;\n  \t\tvar noffset    = bin.readUshort(data, offset);  offset += 2;\n  \t\t//console.log(platformID, encodingID, languageID.toString(16), nameID, length, noffset);\n  \t\t\n  \t\tvar cname = names[nameID];\n  \t\tvar soff = offset0 + count*12 + noffset;\n  \t\tvar str;\n  \t\tif(platformID == 0) { str = bin.readUnicode(data, soff, slen/2); }\n  \t\telse if(platformID == 3 && encodingID == 0) { str = bin.readUnicode(data, soff, slen/2); }\n  \t\telse if(encodingID == 0) { str = bin.readASCII  (data, soff, slen); }\n  \t\telse if(encodingID == 1) { str = bin.readUnicode(data, soff, slen/2); }\n  \t\telse if(encodingID == 3) { str = bin.readUnicode(data, soff, slen/2); }\n  \t\t\n  \t\telse if(platformID == 1) { str = bin.readASCII(data, soff, slen);  console.log("reading unknown MAC encoding "+encodingID+" as ASCII"); }\n  \t\telse { throw "unknown encoding "+encodingID + ", platformID: "+platformID; }\n  \t\t\n  \t\tvar tid = "p"+platformID+","+(languageID).toString(16);//Typr._platforms[platformID];\n  \t\tif(obj[tid]==null) { obj[tid] = {}; }\n  \t\tobj[tid][cname] = str;\n  \t\tobj[tid]._lang = languageID;\n  \t\t//console.log(tid, obj[tid]);\n  \t}\n  \t/*\n  \tif(format == 1)\n  \t{\n  \t\tvar langTagCount = bin.readUshort(data, offset);  offset += 2;\n  \t\tfor(var i=0; i<langTagCount; i++)\n  \t\t{\n  \t\t\tvar length  = bin.readUshort(data, offset);  offset += 2;\n  \t\t\tvar noffset = bin.readUshort(data, offset);  offset += 2;\n  \t\t}\n  \t}\n  \t*/\n  \t\n  \t//console.log(obj);\n  \t\n  \tfor(var p in obj) { if(obj[p].postScriptName!=null && obj[p]._lang==0x0409) { return obj[p]; } }\t\t// United States\n  \tfor(var p in obj) { if(obj[p].postScriptName!=null && obj[p]._lang==0x0000) { return obj[p]; } }\t\t// Universal\n  \tfor(var p in obj) { if(obj[p].postScriptName!=null && obj[p]._lang==0x0c0c) { return obj[p]; } }\t\t// Canada\n  \tfor(var p in obj) { if(obj[p].postScriptName!=null) { return obj[p]; } }\n  \t\n  \tvar tname;\n  \tfor(var p in obj) { tname=p; break; }\n  \tconsole.log("returning name table with languageID "+ obj[tname]._lang);\n  \treturn obj[tname];\n  };\n\n\n  Typr["OS/2"] = {};\n  Typr["OS/2"].parse = function(data, offset, length)\n  {\n  \tvar bin = Typr._bin;\n  \tvar ver = bin.readUshort(data, offset); offset += 2;\n  \t\n  \tvar obj = {};\n  \tif     (ver==0) { Typr["OS/2"].version0(data, offset, obj); }\n  \telse if(ver==1) { Typr["OS/2"].version1(data, offset, obj); }\n  \telse if(ver==2 || ver==3 || ver==4) { Typr["OS/2"].version2(data, offset, obj); }\n  \telse if(ver==5) { Typr["OS/2"].version5(data, offset, obj); }\n  \telse { throw "unknown OS/2 table version: "+ver; }\n  \t\n  \treturn obj;\n  };\n\n  Typr["OS/2"].version0 = function(data, offset, obj)\n  {\n  \tvar bin = Typr._bin;\n  \tobj.xAvgCharWidth = bin.readShort(data, offset); offset += 2;\n  \tobj.usWeightClass = bin.readUshort(data, offset); offset += 2;\n  \tobj.usWidthClass  = bin.readUshort(data, offset); offset += 2;\n  \tobj.fsType = bin.readUshort(data, offset); offset += 2;\n  \tobj.ySubscriptXSize = bin.readShort(data, offset); offset += 2;\n  \tobj.ySubscriptYSize = bin.readShort(data, offset); offset += 2;\n  \tobj.ySubscriptXOffset = bin.readShort(data, offset); offset += 2;\n  \tobj.ySubscriptYOffset = bin.readShort(data, offset); offset += 2; \n  \tobj.ySuperscriptXSize = bin.readShort(data, offset); offset += 2; \n  \tobj.ySuperscriptYSize = bin.readShort(data, offset); offset += 2; \n  \tobj.ySuperscriptXOffset = bin.readShort(data, offset); offset += 2;\n  \tobj.ySuperscriptYOffset = bin.readShort(data, offset); offset += 2;\n  \tobj.yStrikeoutSize = bin.readShort(data, offset); offset += 2;\n  \tobj.yStrikeoutPosition = bin.readShort(data, offset); offset += 2;\n  \tobj.sFamilyClass = bin.readShort(data, offset); offset += 2;\n  \tobj.panose = bin.readBytes(data, offset, 10);  offset += 10;\n  \tobj.ulUnicodeRange1\t= bin.readUint(data, offset);  offset += 4;\n  \tobj.ulUnicodeRange2\t= bin.readUint(data, offset);  offset += 4;\n  \tobj.ulUnicodeRange3\t= bin.readUint(data, offset);  offset += 4;\n  \tobj.ulUnicodeRange4\t= bin.readUint(data, offset);  offset += 4;\n  \tobj.achVendID = [bin.readInt8(data, offset), bin.readInt8(data, offset+1),bin.readInt8(data, offset+2),bin.readInt8(data, offset+3)];  offset += 4;\n  \tobj.fsSelection\t = bin.readUshort(data, offset); offset += 2;\n  \tobj.usFirstCharIndex = bin.readUshort(data, offset); offset += 2;\n  \tobj.usLastCharIndex = bin.readUshort(data, offset); offset += 2;\n  \tobj.sTypoAscender = bin.readShort(data, offset); offset += 2;\n  \tobj.sTypoDescender = bin.readShort(data, offset); offset += 2;\n  \tobj.sTypoLineGap = bin.readShort(data, offset); offset += 2;\n  \tobj.usWinAscent = bin.readUshort(data, offset); offset += 2;\n  \tobj.usWinDescent = bin.readUshort(data, offset); offset += 2;\n  \treturn offset;\n  };\n\n  Typr["OS/2"].version1 = function(data, offset, obj)\n  {\n  \tvar bin = Typr._bin;\n  \toffset = Typr["OS/2"].version0(data, offset, obj);\n  \t\n  \tobj.ulCodePageRange1 = bin.readUint(data, offset); offset += 4;\n  \tobj.ulCodePageRange2 = bin.readUint(data, offset); offset += 4;\n  \treturn offset;\n  };\n\n  Typr["OS/2"].version2 = function(data, offset, obj)\n  {\n  \tvar bin = Typr._bin;\n  \toffset = Typr["OS/2"].version1(data, offset, obj);\n  \t\n  \tobj.sxHeight = bin.readShort(data, offset); offset += 2;\n  \tobj.sCapHeight = bin.readShort(data, offset); offset += 2;\n  \tobj.usDefault = bin.readUshort(data, offset); offset += 2;\n  \tobj.usBreak = bin.readUshort(data, offset); offset += 2;\n  \tobj.usMaxContext = bin.readUshort(data, offset); offset += 2;\n  \treturn offset;\n  };\n\n  Typr["OS/2"].version5 = function(data, offset, obj)\n  {\n  \tvar bin = Typr._bin;\n  \toffset = Typr["OS/2"].version2(data, offset, obj);\n\n  \tobj.usLowerOpticalPointSize = bin.readUshort(data, offset); offset += 2;\n  \tobj.usUpperOpticalPointSize = bin.readUshort(data, offset); offset += 2;\n  \treturn offset;\n  };\n\n  Typr.post = {};\n  Typr.post.parse = function(data, offset, length)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = {};\n  \t\n  \tobj.version           = bin.readFixed(data, offset);  offset+=4;\n  \tobj.italicAngle       = bin.readFixed(data, offset);  offset+=4;\n  \tobj.underlinePosition = bin.readShort(data, offset);  offset+=2;\n  \tobj.underlineThickness = bin.readShort(data, offset);  offset+=2;\n\n  \treturn obj;\n  };\n  Typr.SVG = {};\n  Typr.SVG.parse = function(data, offset, length)\n  {\n  \tvar bin = Typr._bin;\n  \tvar obj = { entries: []};\n\n  \tvar offset0 = offset;\n\n  \tvar tableVersion = bin.readUshort(data, offset);\toffset += 2;\n  \tvar svgDocIndexOffset = bin.readUint(data, offset);\toffset += 4;\n  \tvar reserved = bin.readUint(data, offset); offset += 4;\n\n  \toffset = svgDocIndexOffset + offset0;\n\n  \tvar numEntries = bin.readUshort(data, offset);\toffset += 2;\n\n  \tfor(var i=0; i<numEntries; i++)\n  \t{\n  \t\tvar startGlyphID = bin.readUshort(data, offset);  offset += 2;\n  \t\tvar endGlyphID   = bin.readUshort(data, offset);  offset += 2;\n  \t\tvar svgDocOffset = bin.readUint  (data, offset);  offset += 4;\n  \t\tvar svgDocLength = bin.readUint  (data, offset);  offset += 4;\n\n  \t\tvar sbuf = new Uint8Array(data.buffer, offset0 + svgDocOffset + svgDocIndexOffset, svgDocLength);\n  \t\tvar svg = bin.readUTF8(sbuf, 0, sbuf.length);\n  \t\t\n  \t\tfor(var f=startGlyphID; f<=endGlyphID; f++) {\n  \t\t\tobj.entries[f] = svg;\n  \t\t}\n  \t}\n  \treturn obj;\n  };\n\n  Typr.SVG.toPath = function(str)\n  {\n  \tvar pth = {cmds:[], crds:[]};\n  \tif(str==null) { return pth; }\n  \t\n  \tvar prsr = new DOMParser();\n  \tvar doc = prsr["parseFromString"](str,"image/svg+xml");\n  \t\n  \tvar svg = doc.firstChild;  while(svg.tagName!="svg") { svg = svg.nextSibling; }\n  \tvar vb = svg.getAttribute("viewBox");\n  \tif(vb) { vb = vb.trim().split(" ").map(parseFloat); }  else   { vb = [0,0,1000,1000]; }\n  \tTypr.SVG._toPath(svg.children, pth);\n  \tfor(var i=0; i<pth.crds.length; i+=2) {\n  \t\tvar x = pth.crds[i], y = pth.crds[i+1];\n  \t\tx -= vb[0];\n  \t\ty -= vb[1];\n  \t\ty = -y;\n  \t\tpth.crds[i] = x;\n  \t\tpth.crds[i+1] = y;\n  \t}\n  \treturn pth;\n  };\n\n  Typr.SVG._toPath = function(nds, pth, fill) {\n  \tfor(var ni=0; ni<nds.length; ni++) {\n  \t\tvar nd = nds[ni], tn = nd.tagName;\n  \t\tvar cfl = nd.getAttribute("fill");  if(cfl==null) { cfl = fill; }\n  \t\tif(tn=="g") { Typr.SVG._toPath(nd.children, pth, cfl); }\n  \t\telse if(tn=="path") {\n  \t\t\tpth.cmds.push(cfl?cfl:"#000000");\n  \t\t\tvar d = nd.getAttribute("d");  //console.log(d);\n  \t\t\tvar toks = Typr.SVG._tokens(d);  //console.log(toks);\n  \t\t\tTypr.SVG._toksToPath(toks, pth);  pth.cmds.push("X");\n  \t\t}\n  \t\telse if(tn=="defs") ;\n  \t\telse { console.log(tn, nd); }\n  \t}\n  };\n\n  Typr.SVG._tokens = function(d) {\n  \tvar ts = [], off = 0, rn=false, cn="";  // reading number, current number\n  \twhile(off<d.length){\n  \t\tvar cc=d.charCodeAt(off), ch = d.charAt(off);  off++;\n  \t\tvar isNum = (48<=cc && cc<=57) || ch=="." || ch=="-";\n  \t\t\n  \t\tif(rn) {\n  \t\t\tif(ch=="-") {  ts.push(parseFloat(cn));  cn=ch;  }\n  \t\t\telse if(isNum) { cn+=ch; }\n  \t\t\telse {  ts.push(parseFloat(cn));  if(ch!="," && ch!=" ") { ts.push(ch); }  rn=false;  }\n  \t\t}\n  \t\telse {\n  \t\t\tif(isNum) {  cn=ch;  rn=true;  }\n  \t\t\telse if(ch!="," && ch!=" ") { ts.push(ch); }\n  \t\t}\n  \t}\n  \tif(rn) { ts.push(parseFloat(cn)); }\n  \treturn ts;\n  };\n\n  Typr.SVG._toksToPath = function(ts, pth) {\t\n  \tvar i = 0, x = 0, y = 0, ox = 0, oy = 0;\n  \tvar pc = {"M":2,"L":2,"H":1,"V":1,   "S":4,   "C":6};\n  \tvar cmds = pth.cmds, crds = pth.crds;\n  \t\n  \twhile(i<ts.length) {\n  \t\tvar cmd = ts[i];  i++;\n  \t\t\n  \t\tif(cmd=="z") {  cmds.push("Z");  x=ox;  y=oy;  }\n  \t\telse {\n  \t\t\tvar cmu = cmd.toUpperCase();\n  \t\t\tvar ps = pc[cmu], reps = Typr.SVG._reps(ts, i, ps);\n  \t\t\n  \t\t\tfor(var j=0; j<reps; j++) {\n  \t\t\t\tvar xi = 0, yi = 0;   if(cmd!=cmu) {  xi=x;  yi=y;  }\n  \t\t\t\t\n  \t\t\t\tif(cmu=="M") {  x = xi+ts[i++];  y = yi+ts[i++];  cmds.push("M");  crds.push(x,y);  ox=x;  oy=y; }\n  \t\t\t\telse if(cmu=="L") {  x = xi+ts[i++];  y = yi+ts[i++];  cmds.push("L");  crds.push(x,y);  }\n  \t\t\t\telse if(cmu=="H") {  x = xi+ts[i++];                   cmds.push("L");  crds.push(x,y);  }\n  \t\t\t\telse if(cmu=="V") {  y = yi+ts[i++];                   cmds.push("L");  crds.push(x,y);  }\n  \t\t\t\telse if(cmu=="C") {\n  \t\t\t\t\tvar x1=xi+ts[i++], y1=yi+ts[i++], x2=xi+ts[i++], y2=yi+ts[i++], x3=xi+ts[i++], y3=yi+ts[i++];\n  \t\t\t\t\tcmds.push("C");  crds.push(x1,y1,x2,y2,x3,y3);  x=x3;  y=y3;\n  \t\t\t\t}\n  \t\t\t\telse if(cmu=="S") {\n  \t\t\t\t\tvar co = Math.max(crds.length-4, 0);\n  \t\t\t\t\tvar x1 = x+x-crds[co], y1 = y+y-crds[co+1];\n  \t\t\t\t\tvar x2=xi+ts[i++], y2=yi+ts[i++], x3=xi+ts[i++], y3=yi+ts[i++];  \n  \t\t\t\t\tcmds.push("C");  crds.push(x1,y1,x2,y2,x3,y3);  x=x3;  y=y3;\n  \t\t\t\t}\n  \t\t\t\telse { console.log("Unknown SVG command "+cmd); }\n  \t\t\t}\n  \t\t}\n  \t}\n  };\n  Typr.SVG._reps = function(ts, off, ps) {\n  \tvar i = off;\n  \twhile(i<ts.length) {  if((typeof ts[i]) == "string") { break; }  i+=ps;  }\n  \treturn (i-off)/ps;\n  };\n  // End Typr.js\n\n  // Begin Typr.U.js\n\n  if(Typr  ==null) { Typr   = {}; }\n  if(Typr.U==null) { Typr.U = {}; }\n\n\n  Typr.U.codeToGlyph = function(font, code)\n  {\n  \tvar cmap = font.cmap;\n  \t\n  \tvar tind = -1;\n  \tif(cmap.p0e4!=null) { tind = cmap.p0e4; }\n  \telse if(cmap.p3e1!=null) { tind = cmap.p3e1; }\n  \telse if(cmap.p1e0!=null) { tind = cmap.p1e0; }\n  \telse if(cmap.p0e3!=null) { tind = cmap.p0e3; }\n  \t\n  \tif(tind==-1) { throw "no familiar platform and encoding!"; }\n  \t\n  \tvar tab = cmap.tables[tind];\n  \t\n  \tif(tab.format==0)\n  \t{\n  \t\tif(code>=tab.map.length) { return 0; }\n  \t\treturn tab.map[code];\n  \t}\n  \telse if(tab.format==4)\n  \t{\n  \t\tvar sind = -1;\n  \t\tfor(var i=0; i<tab.endCount.length; i++)   { if(code<=tab.endCount[i]){  sind=i;  break;  } } \n  \t\tif(sind==-1) { return 0; }\n  \t\tif(tab.startCount[sind]>code) { return 0; }\n  \t\t\n  \t\tvar gli = 0;\n  \t\tif(tab.idRangeOffset[sind]!=0) { gli = tab.glyphIdArray[(code-tab.startCount[sind]) + (tab.idRangeOffset[sind]>>1) - (tab.idRangeOffset.length-sind)]; }\n  \t\telse                           { gli = code + tab.idDelta[sind]; }\n  \t\treturn gli & 0xFFFF;\n  \t}\n  \telse if(tab.format==12)\n  \t{\n  \t\tif(code>tab.groups[tab.groups.length-1][1]) { return 0; }\n  \t\tfor(var i=0; i<tab.groups.length; i++)\n  \t\t{\n  \t\t\tvar grp = tab.groups[i];\n  \t\t\tif(grp[0]<=code && code<=grp[1]) { return grp[2] + (code-grp[0]); }\n  \t\t}\n  \t\treturn 0;\n  \t}\n  \telse { throw "unknown cmap table format "+tab.format; }\n  };\n\n\n  Typr.U.glyphToPath = function(font, gid)\n  {\n  \tvar path = { cmds:[], crds:[] };\n  \tif(font.SVG && font.SVG.entries[gid]) {\n  \t\tvar p = font.SVG.entries[gid];  if(p==null) { return path; }\n  \t\tif(typeof p == "string") {  p = Typr.SVG.toPath(p);  font.SVG.entries[gid]=p;  }\n  \t\treturn p;\n  \t}\n  \telse if(font.CFF) {\n  \t\tvar state = {x:0,y:0,stack:[],nStems:0,haveWidth:false,width: font.CFF.Private ? font.CFF.Private.defaultWidthX : 0,open:false};\n  \t\tvar cff=font.CFF, pdct = font.CFF.Private;\n  \t\tif(cff.ROS) {\n  \t\t\tvar gi = 0;\n  \t\t\twhile(cff.FDSelect[gi+2]<=gid) { gi+=2; }\n  \t\t\tpdct = cff.FDArray[cff.FDSelect[gi+1]].Private;\n  \t\t}\n  \t\tTypr.U._drawCFF(font.CFF.CharStrings[gid], state, cff, pdct, path);\n  \t}\n  \telse if(font.glyf) {  Typr.U._drawGlyf(gid, font, path);  }\n  \treturn path;\n  };\n\n  Typr.U._drawGlyf = function(gid, font, path)\n  {\n  \tvar gl = font.glyf[gid];\n  \tif(gl==null) { gl = font.glyf[gid] = Typr.glyf._parseGlyf(font, gid); }\n  \tif(gl!=null){\n  \t\tif(gl.noc>-1) { Typr.U._simpleGlyph(gl, path); }\n  \t\telse          { Typr.U._compoGlyph (gl, font, path); }\n  \t}\n  };\n  Typr.U._simpleGlyph = function(gl, p)\n  {\n  \tfor(var c=0; c<gl.noc; c++)\n  \t{\n  \t\tvar i0 = (c==0) ? 0 : (gl.endPts[c-1] + 1);\n  \t\tvar il = gl.endPts[c];\n  \t\t\n  \t\tfor(var i=i0; i<=il; i++)\n  \t\t{\n  \t\t\tvar pr = (i==i0)?il:(i-1);\n  \t\t\tvar nx = (i==il)?i0:(i+1);\n  \t\t\tvar onCurve = gl.flags[i]&1;\n  \t\t\tvar prOnCurve = gl.flags[pr]&1;\n  \t\t\tvar nxOnCurve = gl.flags[nx]&1;\n  \t\t\t\n  \t\t\tvar x = gl.xs[i], y = gl.ys[i];\n  \t\t\t\n  \t\t\tif(i==i0) { \n  \t\t\t\tif(onCurve)  \n  \t\t\t\t{\n  \t\t\t\t\tif(prOnCurve) { Typr.U.P.moveTo(p, gl.xs[pr], gl.ys[pr]); } \n  \t\t\t\t\telse          {  Typr.U.P.moveTo(p,x,y);  continue;  /*  will do curveTo at il  */  }\n  \t\t\t\t}\n  \t\t\t\telse        \n  \t\t\t\t{\n  \t\t\t\t\tif(prOnCurve) { Typr.U.P.moveTo(p,  gl.xs[pr],       gl.ys[pr]        ); }\n  \t\t\t\t\telse          { Typr.U.P.moveTo(p, (gl.xs[pr]+x)/2, (gl.ys[pr]+y)/2   ); } \n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tif(onCurve)\n  \t\t\t{\n  \t\t\t\tif(prOnCurve) { Typr.U.P.lineTo(p,x,y); }\n  \t\t\t}\n  \t\t\telse\n  \t\t\t{\n  \t\t\t\tif(nxOnCurve) { Typr.U.P.qcurveTo(p, x, y, gl.xs[nx], gl.ys[nx]); } \n  \t\t\t\telse          { Typr.U.P.qcurveTo(p, x, y, (x+gl.xs[nx])/2, (y+gl.ys[nx])/2); } \n  \t\t\t}\n  \t\t}\n  \t\tTypr.U.P.closePath(p);\n  \t}\n  };\n  Typr.U._compoGlyph = function(gl, font, p)\n  {\n  \tfor(var j=0; j<gl.parts.length; j++)\n  \t{\n  \t\tvar path = { cmds:[], crds:[] };\n  \t\tvar prt = gl.parts[j];\n  \t\tTypr.U._drawGlyf(prt.glyphIndex, font, path);\n  \t\t\n  \t\tvar m = prt.m;\n  \t\tfor(var i=0; i<path.crds.length; i+=2)\n  \t\t{\n  \t\t\tvar x = path.crds[i  ], y = path.crds[i+1];\n  \t\t\tp.crds.push(x*m.a + y*m.b + m.tx);\n  \t\t\tp.crds.push(x*m.c + y*m.d + m.ty);\n  \t\t}\n  \t\tfor(var i=0; i<path.cmds.length; i++) { p.cmds.push(path.cmds[i]); }\n  \t}\n  };\n\n\n  Typr.U._getGlyphClass = function(g, cd)\n  {\n  \tvar intr = Typr._lctf.getInterval(cd, g);\n  \treturn intr==-1 ? 0 : cd[intr+2];\n  \t//for(var i=0; i<cd.start.length; i++) \n  \t//\tif(cd.start[i]<=g && cd.end[i]>=g) return cd.class[i];\n  \t//return 0;\n  };\n\n  Typr.U.getPairAdjustment = function(font, g1, g2)\n  {\n  \t//return 0;\n  \tif(font.GPOS) {\n  \t\tvar gpos = font["GPOS"];\n  \t\tvar llist = gpos.lookupList, flist = gpos.featureList;\n  \t\tvar tused = [];\n  \t\tfor(var i=0; i<flist.length; i++) \n  \t\t{\n  \t\t\tvar fl = flist[i];  //console.log(fl);\n  \t\t\tif(fl.tag!="kern") { continue; }\n  \t\t\tfor(var ti=0; ti<fl.tab.length; ti++) {\n  \t\t\t\tif(tused[fl.tab[ti]]) { continue; }  tused[fl.tab[ti]] = true;\n  \t\t\t\tvar tab = llist[fl.tab[ti]];\n  \t\t\t\t//console.log(tab);\n  \t\t\t\t\n  \t\t\t\tfor(var j=0; j<tab.tabs.length; j++)\n  \t\t\t\t{\n  \t\t\t\t\tif(tab.tabs[i]==null) { continue; }\n  \t\t\t\t\tvar ltab = tab.tabs[j], ind;\n  \t\t\t\t\tif(ltab.coverage) {  ind = Typr._lctf.coverageIndex(ltab.coverage, g1);  if(ind==-1) { continue; }  }\n  \t\t\t\t\t\n  \t\t\t\t\tif(tab.ltype==1) ;\n  \t\t\t\t\telse if(tab.ltype==2)\n  \t\t\t\t\t{\n  \t\t\t\t\t\tvar adj;\n  \t\t\t\t\t\tif(ltab.fmt==1)\n  \t\t\t\t\t\t{\n  \t\t\t\t\t\t\tvar right = ltab.pairsets[ind];\n  \t\t\t\t\t\t\tfor(var i=0; i<right.length; i++) { if(right[i].gid2==g2) { adj = right[i]; } }\n  \t\t\t\t\t\t}\n  \t\t\t\t\t\telse if(ltab.fmt==2)\n  \t\t\t\t\t\t{\n  \t\t\t\t\t\t\tvar c1 = Typr.U._getGlyphClass(g1, ltab.classDef1);\n  \t\t\t\t\t\t\tvar c2 = Typr.U._getGlyphClass(g2, ltab.classDef2);\n  \t\t\t\t\t\t\tadj = ltab.matrix[c1][c2];\n  \t\t\t\t\t\t}\n  \t\t\t\t\t\t//if(adj) console.log(ltab, adj);\n  \t\t\t\t\t\tif(adj && adj.val2) { return adj.val2[2]; }\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  \tif(font.kern)\n  \t{\n  \t\tvar ind1 = font.kern.glyph1.indexOf(g1);\n  \t\tif(ind1!=-1)\n  \t\t{\n  \t\t\tvar ind2 = font.kern.rval[ind1].glyph2.indexOf(g2);\n  \t\t\tif(ind2!=-1) { return font.kern.rval[ind1].vals[ind2]; }\n  \t\t}\n  \t}\n  \t\n  \treturn 0;\n  };\n\n  Typr.U.stringToGlyphs = function(font, str)\n  {\n  \tvar gls = [];\n  \tfor(var i=0; i<str.length; i++) {\n  \t\tvar cc = str.codePointAt(i);  if(cc>0xffff) { i++; }\n  \t\tgls.push(Typr.U.codeToGlyph(font, cc));\n  \t}\n  \tfor(var i=0; i<str.length; i++) {\n  \t\tvar cc = str.codePointAt(i);  //\n  \t\tif(cc==2367) {  var t=gls[i-1];  gls[i-1]=gls[i];  gls[i]=t;  }\n  \t\t//if(cc==2381) {  var t=gls[i+1];  gls[i+1]=gls[i];  gls[i]=t;  }\n  \t\tif(cc>0xffff) { i++; }\n  \t}\n  \t//console.log(gls.slice(0));\n  \t\n  \t//console.log(gls);  return gls;\n  \t\n  \tvar gsub = font["GSUB"];  if(gsub==null) { return gls; }\n  \tvar llist = gsub.lookupList, flist = gsub.featureList;\n  \t\n  \tvar cligs = ["rlig", "liga", "mset",  "isol","init","fina","medi",   "half", "pres", \n  \t\t\t\t"blws" /* Tibetan fonts like Himalaya.ttf */ ];\n  \t\n  \t//console.log(gls.slice(0));\n  \tvar tused = [];\n  \tfor(var fi=0; fi<flist.length; fi++)\n  \t{\n  \t\tvar fl = flist[fi];  if(cligs.indexOf(fl.tag)==-1) { continue; }\n  \t\t//if(fl.tag=="blwf") continue;\n  \t\t//console.log(fl);\n  \t\t//console.log(fl.tag);\n  \t\tfor(var ti=0; ti<fl.tab.length; ti++) {\n  \t\t\tif(tused[fl.tab[ti]]) { continue; }  tused[fl.tab[ti]] = true;\n  \t\t\tvar tab = llist[fl.tab[ti]];\n  \t\t\t//console.log(fl.tab[ti], tab.ltype);\n  \t\t\t//console.log(fl.tag, tab);\n  \t\t\tfor(var ci=0; ci<gls.length; ci++) {\n  \t\t\t\tvar feat = Typr.U._getWPfeature(str, ci);\n  \t\t\t\tif("isol,init,fina,medi".indexOf(fl.tag)!=-1 && fl.tag!=feat) { continue; }\n  \t\t\t\t\n  \t\t\t\tTypr.U._applySubs(gls, ci, tab, llist);\n  \t\t\t}\n  \t\t}\n  \t}\n  \t\n  \treturn gls;\n  };\n  Typr.U._getWPfeature = function(str, ci) {  // get Word Position feature\n  \tvar wsep = "\\n\\t\\" ,.:;!?()  ،";\n  \tvar R = "آأؤإاةدذرزوٱٲٳٵٶٷڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙۀۃۄۅۆۇۈۉۊۋۍۏےۓەۮۯܐܕܖܗܘܙܞܨܪܬܯݍݙݚݛݫݬݱݳݴݸݹࡀࡆࡇࡉࡔࡧࡩࡪࢪࢫࢬࢮࢱࢲࢹૅેૉ૊૎૏ૐ૑૒૝ૡ૤૯஁ஃ஄அஉ஌எஏ஑னப஫஬";\n  \tvar L = "ꡲ્૗";\n  \t\n  \tvar slft = ci==0            || wsep.indexOf(str[ci-1])!=-1;\n  \tvar srgt = ci==str.length-1 || wsep.indexOf(str[ci+1])!=-1;\n  \t\t\n  \tif(!slft && R.indexOf(str[ci-1])!=-1) { slft=true; }\n  \tif(!srgt && R.indexOf(str[ci  ])!=-1) { srgt=true; }\n  \t\t\n  \tif(!srgt && L.indexOf(str[ci+1])!=-1) { srgt=true; }\n  \tif(!slft && L.indexOf(str[ci  ])!=-1) { slft=true; }\n  \t\t\n  \tvar feat = null;\n  \tif(slft) { feat = srgt ? "isol" : "init"; }\n  \telse     { feat = srgt ? "fina" : "medi"; }\n  \t\n  \treturn feat;\n  };\n  Typr.U._applySubs = function(gls, ci, tab, llist) {\n  \tvar rlim = gls.length-ci-1;\n  \t//if(ci==0) console.log("++++ ", tab.ltype);\n  \tfor(var j=0; j<tab.tabs.length; j++)\n  \t{\n  \t\tif(tab.tabs[j]==null) { continue; }\n  \t\tvar ltab = tab.tabs[j], ind;\n  \t\tif(ltab.coverage) {  ind = Typr._lctf.coverageIndex(ltab.coverage, gls[ci]);  if(ind==-1) { continue; }  }\n  \t\t//if(ci==0) console.log(ind, ltab);\n  \t\t//*\n  \t\tif(tab.ltype==1) {\n  \t\t\tvar gl = gls[ci];\n  \t\t\tif(ltab.fmt==1) { gls[ci] = gls[ci]+ltab.delta; }\n  \t\t\telse            { gls[ci] = ltab.newg[ind]; }\n  \t\t\t//console.log("applying ... 1", ci, gl, gls[ci]);\n  \t\t}//*\n  \t\telse if(tab.ltype==4) {\n  \t\t\tvar vals = ltab.vals[ind];\n  \t\t\t\n  \t\t\tfor(var k=0; k<vals.length; k++) {\n  \t\t\t\tvar lig = vals[k], rl = lig.chain.length;  if(rl>rlim) { continue; }\n  \t\t\t\tvar good = true, em1 = 0;\n  \t\t\t\tfor(var l=0; l<rl; l++) {  while(gls[ci+em1+(1+l)]==-1){ em1++; }  if(lig.chain[l]!=gls[ci+em1+(1+l)]) { good=false; }  }\n  \t\t\t\tif(!good) { continue; }\n  \t\t\t\tgls[ci]=lig.nglyph;\n  \t\t\t\tfor(var l=0; l<rl+em1; l++) { gls[ci+l+1]=-1; }   break;  // first character changed, other ligatures do not apply anymore\n  \t\t\t\t//console.log("lig", ci, lig.chain, lig.nglyph);\n  \t\t\t\t//console.log("applying ...");\n  \t\t\t}\n  \t\t}\n  \t\telse  if(tab.ltype==5 && ltab.fmt==2) {\n  \t\t\tvar cind = Typr._lctf.getInterval(ltab.cDef, gls[ci]);\n  \t\t\tvar cls = ltab.cDef[cind+2], scs = ltab.scset[cls]; \n  \t\t\tfor(var i=0; i<scs.length; i++) {\n  \t\t\t\tvar sc = scs[i], inp = sc.input;\n  \t\t\t\tif(inp.length>rlim) { continue; }\n  \t\t\t\tvar good = true;\n  \t\t\t\tfor(var l=0; l<inp.length; l++) {\n  \t\t\t\t\tvar cind2 = Typr._lctf.getInterval(ltab.cDef, gls[ci+1+l]);\n  \t\t\t\t\tif(cind==-1 && ltab.cDef[cind2+2]!=inp[l]) {  good=false;  break;  }\n  \t\t\t\t}\n  \t\t\t\tif(!good) { continue; }\n  \t\t\t\t//console.log(ci, gl);\n  \t\t\t\tvar lrs = sc.substLookupRecords;\n  \t\t\t\tfor(var k=0; k<lrs.length; k+=2)\n  \t\t\t\t{\n  \t\t\t\t\tvar gi = lrs[k], tabi = lrs[k+1];\n  \t\t\t\t\t//Typr.U._applyType1(gls, ci+gi, llist[tabi]);\n  \t\t\t\t\t//console.log(tabi, gls[ci+gi], llist[tabi]);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t\telse if(tab.ltype==6 && ltab.fmt==3) {\n  \t\t\t//if(ltab.backCvg.length==0) return;\n  \t\t\tif(!Typr.U._glsCovered(gls, ltab.backCvg, ci-ltab.backCvg.length)) { continue; }\n  \t\t\tif(!Typr.U._glsCovered(gls, ltab.inptCvg, ci)) { continue; }\n  \t\t\tif(!Typr.U._glsCovered(gls, ltab.ahedCvg, ci+ltab.inptCvg.length)) { continue; }\n  \t\t\t//console.log(ci, ltab);\n  \t\t\tvar lr = ltab.lookupRec;  //console.log(ci, gl, lr);\n  \t\t\tfor(var i=0; i<lr.length; i+=2) {\n  \t\t\t\tvar cind = lr[i], tab2 = llist[lr[i+1]];\n  \t\t\t\t//console.log("-", lr[i+1], tab2);\n  \t\t\t\tTypr.U._applySubs(gls, ci+cind, tab2, llist);\n  \t\t\t}\n  \t\t}\n  \t\t//else console.log("Unknown table", tab.ltype, ltab.fmt);\n  \t\t//*/\n  \t}\n  };\n\n  Typr.U._glsCovered = function(gls, cvgs, ci) {\n  \tfor(var i=0; i<cvgs.length; i++) {\n  \t\tvar ind = Typr._lctf.coverageIndex(cvgs[i], gls[ci+i]);  if(ind==-1) { return false; }\n  \t}\n  \treturn true;\n  };\n\n  Typr.U.glyphsToPath = function(font, gls, clr)\n  {\t\n  \t//gls = gls.reverse();//gls.slice(0,12).concat(gls.slice(12).reverse());\n  \t\n  \tvar tpath = {cmds:[], crds:[]};\n  \tvar x = 0;\n  \t\n  \tfor(var i=0; i<gls.length; i++)\n  \t{\n  \t\tvar gid = gls[i];  if(gid==-1) { continue; }\n  \t\tvar gid2 = (i<gls.length-1 && gls[i+1]!=-1)  ? gls[i+1] : 0;\n  \t\tvar path = Typr.U.glyphToPath(font, gid);\n  \t\tfor(var j=0; j<path.crds.length; j+=2)\n  \t\t{\n  \t\t\ttpath.crds.push(path.crds[j] + x);\n  \t\t\ttpath.crds.push(path.crds[j+1]);\n  \t\t}\n  \t\tif(clr) { tpath.cmds.push(clr); }\n  \t\tfor(var j=0; j<path.cmds.length; j++) { tpath.cmds.push(path.cmds[j]); }\n  \t\tif(clr) { tpath.cmds.push("X"); }\n  \t\tx += font.hmtx.aWidth[gid];// - font.hmtx.lsBearing[gid];\n  \t\tif(i<gls.length-1) { x += Typr.U.getPairAdjustment(font, gid, gid2); }\n  \t}\n  \treturn tpath;\n  };\n\n  Typr.U.pathToSVG = function(path, prec)\n  {\n  \tif(prec==null) { prec = 5; }\n  \tvar out = [], co = 0, lmap = {"M":2,"L":2,"Q":4,"C":6};\n  \tfor(var i=0; i<path.cmds.length; i++)\n  \t{\n  \t\tvar cmd = path.cmds[i], cn = co+(lmap[cmd]?lmap[cmd]:0);  \n  \t\tout.push(cmd);\n  \t\twhile(co<cn) {  var c = path.crds[co++];  out.push(parseFloat(c.toFixed(prec))+(co==cn?"":" "));  }\n  \t}\n  \treturn out.join("");\n  };\n\n  Typr.U.pathToContext = function(path, ctx)\n  {\n  \tvar c = 0, crds = path.crds;\n  \t\n  \tfor(var j=0; j<path.cmds.length; j++)\n  \t{\n  \t\tvar cmd = path.cmds[j];\n  \t\tif     (cmd=="M") {\n  \t\t\tctx.moveTo(crds[c], crds[c+1]);\n  \t\t\tc+=2;\n  \t\t}\n  \t\telse if(cmd=="L") {\n  \t\t\tctx.lineTo(crds[c], crds[c+1]);\n  \t\t\tc+=2;\n  \t\t}\n  \t\telse if(cmd=="C") {\n  \t\t\tctx.bezierCurveTo(crds[c], crds[c+1], crds[c+2], crds[c+3], crds[c+4], crds[c+5]);\n  \t\t\tc+=6;\n  \t\t}\n  \t\telse if(cmd=="Q") {\n  \t\t\tctx.quadraticCurveTo(crds[c], crds[c+1], crds[c+2], crds[c+3]);\n  \t\t\tc+=4;\n  \t\t}\n  \t\telse if(cmd.charAt(0)=="#") {\n  \t\t\tctx.beginPath();\n  \t\t\tctx.fillStyle = cmd;\n  \t\t}\n  \t\telse if(cmd=="Z") {\n  \t\t\tctx.closePath();\n  \t\t}\n  \t\telse if(cmd=="X") {\n  \t\t\tctx.fill();\n  \t\t}\n  \t}\n  };\n\n\n  Typr.U.P = {};\n  Typr.U.P.moveTo = function(p, x, y)\n  {\n  \tp.cmds.push("M");  p.crds.push(x,y);\n  };\n  Typr.U.P.lineTo = function(p, x, y)\n  {\n  \tp.cmds.push("L");  p.crds.push(x,y);\n  };\n  Typr.U.P.curveTo = function(p, a,b,c,d,e,f)\n  {\n  \tp.cmds.push("C");  p.crds.push(a,b,c,d,e,f);\n  };\n  Typr.U.P.qcurveTo = function(p, a,b,c,d)\n  {\n  \tp.cmds.push("Q");  p.crds.push(a,b,c,d);\n  };\n  Typr.U.P.closePath = function(p) {  p.cmds.push("Z");  };\n\n\n\n\n  Typr.U._drawCFF = function(cmds, state, font, pdct, p)\n  {\n  \tvar stack = state.stack;\n  \tvar nStems = state.nStems, haveWidth=state.haveWidth, width=state.width, open=state.open;\n  \tvar i=0;\n  \tvar x=state.x, y=state.y, c1x=0, c1y=0, c2x=0, c2y=0, c3x=0, c3y=0, c4x=0, c4y=0, jpx=0, jpy=0;\n  \t\n  \tvar o = {val:0,size:0};\n  \t//console.log(cmds);\n  \twhile(i<cmds.length)\n  \t{\n  \t\tTypr.CFF.getCharString(cmds, i, o);\n  \t\tvar v = o.val;\n  \t\ti += o.size;\n  \t\t\t\n  \t\tif(v=="o1" || v=="o18")  //  hstem || hstemhm\n  \t\t{\n  \t\t\tvar hasWidthArg;\n\n  \t\t\t// The number of stem operators on the stack is always even.\n  \t\t\t// If the value is uneven, that means a width is specified.\n  \t\t\thasWidthArg = stack.length % 2 !== 0;\n  \t\t\tif (hasWidthArg && !haveWidth) {\n  \t\t\t\twidth = stack.shift() + pdct.nominalWidthX;\n  \t\t\t}\n\n  \t\t\tnStems += stack.length >> 1;\n  \t\t\tstack.length = 0;\n  \t\t\thaveWidth = true;\n  \t\t}\n  \t\telse if(v=="o3" || v=="o23")  // vstem || vstemhm\n  \t\t{\n  \t\t\tvar hasWidthArg;\n\n  \t\t\t// The number of stem operators on the stack is always even.\n  \t\t\t// If the value is uneven, that means a width is specified.\n  \t\t\thasWidthArg = stack.length % 2 !== 0;\n  \t\t\tif (hasWidthArg && !haveWidth) {\n  \t\t\t\twidth = stack.shift() + pdct.nominalWidthX;\n  \t\t\t}\n\n  \t\t\tnStems += stack.length >> 1;\n  \t\t\tstack.length = 0;\n  \t\t\thaveWidth = true;\n  \t\t}\n  \t\telse if(v=="o4")\n  \t\t{\n  \t\t\tif (stack.length > 1 && !haveWidth) {\n                          width = stack.shift() + pdct.nominalWidthX;\n                          haveWidth = true;\n                      }\n  \t\t\tif(open) { Typr.U.P.closePath(p); }\n\n                      y += stack.pop();\n  \t\t\t\t\tTypr.U.P.moveTo(p,x,y);   open=true;\n  \t\t}\n  \t\telse if(v=="o5")\n  \t\t{\n  \t\t\twhile (stack.length > 0) {\n                          x += stack.shift();\n                          y += stack.shift();\n                          Typr.U.P.lineTo(p, x, y);\n                      }\n  \t\t}\n  \t\telse if(v=="o6" || v=="o7")  // hlineto || vlineto\n  \t\t{\n  \t\t\tvar count = stack.length;\n  \t\t\tvar isX = (v == "o6");\n  \t\t\t\n  \t\t\tfor(var j=0; j<count; j++) {\n  \t\t\t\tvar sval = stack.shift();\n  \t\t\t\t\n  \t\t\t\tif(isX) { x += sval; }  else  { y += sval; }\n  \t\t\t\tisX = !isX;\n  \t\t\t\tTypr.U.P.lineTo(p, x, y);\n  \t\t\t}\n  \t\t}\n  \t\telse if(v=="o8" || v=="o24")\t// rrcurveto || rcurveline\n  \t\t{\n  \t\t\tvar count = stack.length;\n  \t\t\tvar index = 0;\n  \t\t\twhile(index+6 <= count) {\n  \t\t\t\tc1x = x + stack.shift();\n  \t\t\t\tc1y = y + stack.shift();\n  \t\t\t\tc2x = c1x + stack.shift();\n  \t\t\t\tc2y = c1y + stack.shift();\n  \t\t\t\tx = c2x + stack.shift();\n  \t\t\t\ty = c2y + stack.shift();\n  \t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n  \t\t\t\tindex+=6;\n  \t\t\t}\n  \t\t\tif(v=="o24")\n  \t\t\t{\n  \t\t\t\tx += stack.shift();\n  \t\t\t\ty += stack.shift();\n  \t\t\t\tTypr.U.P.lineTo(p, x, y);\n  \t\t\t}\n  \t\t}\n  \t\telse if(v=="o11")  { break; }\n  \t\telse if(v=="o1234" || v=="o1235" || v=="o1236" || v=="o1237")//if((v+"").slice(0,3)=="o12")\n  \t\t{\n  \t\t\tif(v=="o1234")\n  \t\t\t{\n  \t\t\t\tc1x = x   + stack.shift();    // dx1\n                  c1y = y;                      // dy1\n  \t\t\t\tc2x = c1x + stack.shift();    // dx2\n  \t\t\t\tc2y = c1y + stack.shift();    // dy2\n  \t\t\t\tjpx = c2x + stack.shift();    // dx3\n  \t\t\t\tjpy = c2y;                    // dy3\n  \t\t\t\tc3x = jpx + stack.shift();    // dx4\n  \t\t\t\tc3y = c2y;                    // dy4\n  \t\t\t\tc4x = c3x + stack.shift();    // dx5\n  \t\t\t\tc4y = y;                      // dy5\n  \t\t\t\tx = c4x + stack.shift();      // dx6\n  \t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n  \t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n  \t\t\t\t\n  \t\t\t}\n  \t\t\tif(v=="o1235")\n  \t\t\t{\n  \t\t\t\tc1x = x   + stack.shift();    // dx1\n  \t\t\t\tc1y = y   + stack.shift();    // dy1\n  \t\t\t\tc2x = c1x + stack.shift();    // dx2\n  \t\t\t\tc2y = c1y + stack.shift();    // dy2\n  \t\t\t\tjpx = c2x + stack.shift();    // dx3\n  \t\t\t\tjpy = c2y + stack.shift();    // dy3\n  \t\t\t\tc3x = jpx + stack.shift();    // dx4\n  \t\t\t\tc3y = jpy + stack.shift();    // dy4\n  \t\t\t\tc4x = c3x + stack.shift();    // dx5\n  \t\t\t\tc4y = c3y + stack.shift();    // dy5\n  \t\t\t\tx = c4x + stack.shift();      // dx6\n  \t\t\t\ty = c4y + stack.shift();      // dy6\n  \t\t\t\tstack.shift();                // flex depth\n  \t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n  \t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n  \t\t\t}\n  \t\t\tif(v=="o1236")\n  \t\t\t{\n  \t\t\t\tc1x = x   + stack.shift();    // dx1\n  \t\t\t\tc1y = y   + stack.shift();    // dy1\n  \t\t\t\tc2x = c1x + stack.shift();    // dx2\n  \t\t\t\tc2y = c1y + stack.shift();    // dy2\n  \t\t\t\tjpx = c2x + stack.shift();    // dx3\n  \t\t\t\tjpy = c2y;                    // dy3\n  \t\t\t\tc3x = jpx + stack.shift();    // dx4\n  \t\t\t\tc3y = c2y;                    // dy4\n  \t\t\t\tc4x = c3x + stack.shift();    // dx5\n  \t\t\t\tc4y = c3y + stack.shift();    // dy5\n  \t\t\t\tx = c4x + stack.shift();      // dx6\n  \t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n  \t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n  \t\t\t}\n  \t\t\tif(v=="o1237")\n  \t\t\t{\n  \t\t\t\tc1x = x   + stack.shift();    // dx1\n  \t\t\t\tc1y = y   + stack.shift();    // dy1\n  \t\t\t\tc2x = c1x + stack.shift();    // dx2\n  \t\t\t\tc2y = c1y + stack.shift();    // dy2\n  \t\t\t\tjpx = c2x + stack.shift();    // dx3\n  \t\t\t\tjpy = c2y + stack.shift();    // dy3\n  \t\t\t\tc3x = jpx + stack.shift();    // dx4\n  \t\t\t\tc3y = jpy + stack.shift();    // dy4\n  \t\t\t\tc4x = c3x + stack.shift();    // dx5\n  \t\t\t\tc4y = c3y + stack.shift();    // dy5\n  \t\t\t\tif (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n  \t\t\t\t    x = c4x + stack.shift();\n  \t\t\t\t} else {\n  \t\t\t\t    y = c4y + stack.shift();\n  \t\t\t\t}\n  \t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n  \t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n  \t\t\t}\n  \t\t}\n  \t\telse if(v=="o14")\n  \t\t{\n  \t\t\tif (stack.length > 0 && !haveWidth) {\n                          width = stack.shift() + font.nominalWidthX;\n                          haveWidth = true;\n                      }\n  \t\t\tif(stack.length==4) // seac = standard encoding accented character\n  \t\t\t{\n  \t\t\t\tvar adx = stack.shift();\n  \t\t\t\tvar ady = stack.shift();\n  \t\t\t\tvar bchar = stack.shift();\n  \t\t\t\tvar achar = stack.shift();\n  \t\t\t\n  \t\t\t\t\n  \t\t\t\tvar bind = Typr.CFF.glyphBySE(font, bchar);\n  \t\t\t\tvar aind = Typr.CFF.glyphBySE(font, achar);\n  \t\t\t\t\n  \t\t\t\t//console.log(bchar, bind);\n  \t\t\t\t//console.log(achar, aind);\n  \t\t\t\t//state.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width;  state.open=open;\n  \t\t\t\t\n  \t\t\t\tTypr.U._drawCFF(font.CharStrings[bind], state,font,pdct,p);\n  \t\t\t\tstate.x = adx; state.y = ady;\n  \t\t\t\tTypr.U._drawCFF(font.CharStrings[aind], state,font,pdct,p);\n  \t\t\t\t\n  \t\t\t\t//x=state.x; y=state.y; nStems=state.nStems; haveWidth=state.haveWidth; width=state.width;  open=state.open;\n  \t\t\t}\n  \t\t\tif(open) {  Typr.U.P.closePath(p);  open=false;  }\n  \t\t}\t\t\n  \t\telse if(v=="o19" || v=="o20") \n  \t\t{ \n  \t\t\tvar hasWidthArg;\n\n  \t\t\t// The number of stem operators on the stack is always even.\n  \t\t\t// If the value is uneven, that means a width is specified.\n  \t\t\thasWidthArg = stack.length % 2 !== 0;\n  \t\t\tif (hasWidthArg && !haveWidth) {\n  \t\t\t\twidth = stack.shift() + pdct.nominalWidthX;\n  \t\t\t}\n\n  \t\t\tnStems += stack.length >> 1;\n  \t\t\tstack.length = 0;\n  \t\t\thaveWidth = true;\n  \t\t\t\n  \t\t\ti += (nStems + 7) >> 3;\n  \t\t}\n  \t\t\n  \t\telse if(v=="o21") {\n  \t\t\tif (stack.length > 2 && !haveWidth) {\n                          width = stack.shift() + pdct.nominalWidthX;\n                          haveWidth = true;\n                      }\n\n                      y += stack.pop();\n                      x += stack.pop();\n  \t\t\t\t\t\n  \t\t\t\t\tif(open) { Typr.U.P.closePath(p); }\n                      Typr.U.P.moveTo(p,x,y);   open=true;\n  \t\t}\n  \t\telse if(v=="o22")\n  \t\t{\n  \t\t\t if (stack.length > 1 && !haveWidth) {\n                          width = stack.shift() + pdct.nominalWidthX;\n                          haveWidth = true;\n                      }\n  \t\t\t\t\t\n                      x += stack.pop();\n  \t\t\t\t\t\n  \t\t\t\t\tif(open) { Typr.U.P.closePath(p); }\n  \t\t\t\t\tTypr.U.P.moveTo(p,x,y);   open=true;                    \n  \t\t}\n  \t\telse if(v=="o25")\n  \t\t{\n  \t\t\twhile (stack.length > 6) {\n                          x += stack.shift();\n                          y += stack.shift();\n                          Typr.U.P.lineTo(p, x, y);\n                      }\n\n                      c1x = x + stack.shift();\n                      c1y = y + stack.shift();\n                      c2x = c1x + stack.shift();\n                      c2y = c1y + stack.shift();\n                      x = c2x + stack.shift();\n                      y = c2y + stack.shift();\n                      Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n  \t\t}\n  \t\telse if(v=="o26") \n  \t\t{\n  \t\t\tif (stack.length % 2) {\n                          x += stack.shift();\n                      }\n\n                      while (stack.length > 0) {\n                          c1x = x;\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x;\n                          y = c2y + stack.shift();\n                          Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n                      }\n\n  \t\t}\n  \t\telse if(v=="o27")\n  \t\t{\n  \t\t\tif (stack.length % 2) {\n                          y += stack.shift();\n                      }\n\n                      while (stack.length > 0) {\n                          c1x = x + stack.shift();\n                          c1y = y;\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y;\n                          Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n                      }\n  \t\t}\n  \t\telse if(v=="o10" || v=="o29")\t// callsubr || callgsubr\n  \t\t{\n  \t\t\tvar obj = (v=="o10" ? pdct : font);\n  \t\t\tif(stack.length==0) { console.log("error: empty stack");  }\n  \t\t\telse {\n  \t\t\t\tvar ind = stack.pop();\n  \t\t\t\tvar subr = obj.Subrs[ ind + obj.Bias ];\n  \t\t\t\tstate.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width;  state.open=open;\n  \t\t\t\tTypr.U._drawCFF(subr, state,font,pdct,p);\n  \t\t\t\tx=state.x; y=state.y; nStems=state.nStems; haveWidth=state.haveWidth; width=state.width;  open=state.open;\n  \t\t\t}\n  \t\t}\n  \t\telse if(v=="o30" || v=="o31")   // vhcurveto || hvcurveto\n  \t\t{\n  \t\t\tvar count, count1 = stack.length;\n  \t\t\tvar index = 0;\n  \t\t\tvar alternate = v == "o31";\n  \t\t\t\n  \t\t\tcount  = count1 & ~2;\n  \t\t\tindex += count1 - count;\n  \t\t\t\n  \t\t\twhile ( index < count ) \n  \t\t\t{\n  \t\t\t\tif(alternate)\n  \t\t\t\t{\n  \t\t\t\t\tc1x = x + stack.shift();\n  \t\t\t\t\tc1y = y;\n  \t\t\t\t\tc2x = c1x + stack.shift();\n  \t\t\t\t\tc2y = c1y + stack.shift();\n  \t\t\t\t\ty = c2y + stack.shift();\n  \t\t\t\t\tif(count-index == 5) {  x = c2x + stack.shift();  index++;  }\n  \t\t\t\t\telse { x = c2x; }\n  \t\t\t\t\talternate = false;\n  \t\t\t\t}\n  \t\t\t\telse\n  \t\t\t\t{\n  \t\t\t\t\tc1x = x;\n  \t\t\t\t\tc1y = y + stack.shift();\n  \t\t\t\t\tc2x = c1x + stack.shift();\n  \t\t\t\t\tc2y = c1y + stack.shift();\n  \t\t\t\t\tx = c2x + stack.shift();\n  \t\t\t\t\tif(count-index == 5) {  y = c2y + stack.shift();  index++;  }\n  \t\t\t\t\telse { y = c2y; }\n  \t\t\t\t\talternate = true;\n  \t\t\t\t}\n                  Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n  \t\t\t\tindex += 4;\n  \t\t\t}\n  \t\t}\n  \t\t\n  \t\telse if((v+"").charAt(0)=="o") {   console.log("Unknown operation: "+v, cmds); throw v;  }\n  \t\telse { stack.push(v); }\n  \t}\n  \t//console.log(cmds);\n  \tstate.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width; state.open=open;\n  };\n\n  // End Typr.U.js\n\n  return Typr\n\n  }\n\n  // Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with tiny-inflate \n  // (https://github.com/foliojs/tiny-inflate) for use in troika-3d-text. \n  // Original licenses apply: \n  // - tiny-inflate: https://github.com/foliojs/tiny-inflate/blob/master/LICENSE (MIT)\n  // - woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)\n\n  function woff2otfFactory() {\n\n  // Begin tinyInflate\n  var tinyInflate = (function() {\n    var module = {};\n    var TINF_OK = 0;\n  var TINF_DATA_ERROR = -3;\n\n  function Tree() {\n    this.table = new Uint16Array(16);   /* table of code length counts */\n    this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n  }\n\n  function Data(source, dest) {\n    this.source = source;\n    this.sourceIndex = 0;\n    this.tag = 0;\n    this.bitcount = 0;\n    \n    this.dest = dest;\n    this.destLen = 0;\n    \n    this.ltree = new Tree();  /* dynamic length/symbol tree */\n    this.dtree = new Tree();  /* dynamic distance tree */\n  }\n\n  /* --------------------------------------------------- *\n   * -- uninitialized global data (static structures) -- *\n   * --------------------------------------------------- */\n\n  var sltree = new Tree();\n  var sdtree = new Tree();\n\n  /* extra bits and base tables for length codes */\n  var length_bits = new Uint8Array(30);\n  var length_base = new Uint16Array(30);\n\n  /* extra bits and base tables for distance codes */\n  var dist_bits = new Uint8Array(30);\n  var dist_base = new Uint16Array(30);\n\n  /* special ordering of code length codes */\n  var clcidx = new Uint8Array([\n    16, 17, 18, 0, 8, 7, 9, 6,\n    10, 5, 11, 4, 12, 3, 13, 2,\n    14, 1, 15\n  ]);\n\n  /* used by tinf_decode_trees, avoids allocations every call */\n  var code_tree = new Tree();\n  var lengths = new Uint8Array(288 + 32);\n\n  /* ----------------------- *\n   * -- utility functions -- *\n   * ----------------------- */\n\n  /* build extra bits and base tables */\n  function tinf_build_bits_base(bits, base, delta, first) {\n    var i, sum;\n\n    /* build bits table */\n    for (i = 0; i < delta; ++i) { bits[i] = 0; }\n    for (i = 0; i < 30 - delta; ++i) { bits[i + delta] = i / delta | 0; }\n\n    /* build base table */\n    for (sum = first, i = 0; i < 30; ++i) {\n      base[i] = sum;\n      sum += 1 << bits[i];\n    }\n  }\n\n  /* build the fixed huffman trees */\n  function tinf_build_fixed_trees(lt, dt) {\n    var i;\n\n    /* build fixed length tree */\n    for (i = 0; i < 7; ++i) { lt.table[i] = 0; }\n\n    lt.table[7] = 24;\n    lt.table[8] = 152;\n    lt.table[9] = 112;\n\n    for (i = 0; i < 24; ++i) { lt.trans[i] = 256 + i; }\n    for (i = 0; i < 144; ++i) { lt.trans[24 + i] = i; }\n    for (i = 0; i < 8; ++i) { lt.trans[24 + 144 + i] = 280 + i; }\n    for (i = 0; i < 112; ++i) { lt.trans[24 + 144 + 8 + i] = 144 + i; }\n\n    /* build fixed distance tree */\n    for (i = 0; i < 5; ++i) { dt.table[i] = 0; }\n\n    dt.table[5] = 32;\n\n    for (i = 0; i < 32; ++i) { dt.trans[i] = i; }\n  }\n\n  /* given an array of code lengths, build a tree */\n  var offs = new Uint16Array(16);\n\n  function tinf_build_tree(t, lengths, off, num) {\n    var i, sum;\n\n    /* clear code length count table */\n    for (i = 0; i < 16; ++i) { t.table[i] = 0; }\n\n    /* scan symbol lengths, and sum code length counts */\n    for (i = 0; i < num; ++i) { t.table[lengths[off + i]]++; }\n\n    t.table[0] = 0;\n\n    /* compute offset table for distribution sort */\n    for (sum = 0, i = 0; i < 16; ++i) {\n      offs[i] = sum;\n      sum += t.table[i];\n    }\n\n    /* create code->symbol translation table (symbols sorted by code) */\n    for (i = 0; i < num; ++i) {\n      if (lengths[off + i]) { t.trans[offs[lengths[off + i]]++] = i; }\n    }\n  }\n\n  /* ---------------------- *\n   * -- decode functions -- *\n   * ---------------------- */\n\n  /* get one bit from source stream */\n  function tinf_getbit(d) {\n    /* check if tag is empty */\n    if (!d.bitcount--) {\n      /* load next tag */\n      d.tag = d.source[d.sourceIndex++];\n      d.bitcount = 7;\n    }\n\n    /* shift bit out of tag */\n    var bit = d.tag & 1;\n    d.tag >>>= 1;\n\n    return bit;\n  }\n\n  /* read a num bit value from a stream and add base */\n  function tinf_read_bits(d, num, base) {\n    if (!num)\n      { return base; }\n\n    while (d.bitcount < 24) {\n      d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n      d.bitcount += 8;\n    }\n\n    var val = d.tag & (0xffff >>> (16 - num));\n    d.tag >>>= num;\n    d.bitcount -= num;\n    return val + base;\n  }\n\n  /* given a data stream and a tree, decode a symbol */\n  function tinf_decode_symbol(d, t) {\n    while (d.bitcount < 24) {\n      d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n      d.bitcount += 8;\n    }\n    \n    var sum = 0, cur = 0, len = 0;\n    var tag = d.tag;\n\n    /* get more bits while code value is above sum */\n    do {\n      cur = 2 * cur + (tag & 1);\n      tag >>>= 1;\n      ++len;\n\n      sum += t.table[len];\n      cur -= t.table[len];\n    } while (cur >= 0);\n    \n    d.tag = tag;\n    d.bitcount -= len;\n\n    return t.trans[sum + cur];\n  }\n\n  /* given a data stream, decode dynamic trees from it */\n  function tinf_decode_trees(d, lt, dt) {\n    var hlit, hdist, hclen;\n    var i, num, length;\n\n    /* get 5 bits HLIT (257-286) */\n    hlit = tinf_read_bits(d, 5, 257);\n\n    /* get 5 bits HDIST (1-32) */\n    hdist = tinf_read_bits(d, 5, 1);\n\n    /* get 4 bits HCLEN (4-19) */\n    hclen = tinf_read_bits(d, 4, 4);\n\n    for (i = 0; i < 19; ++i) { lengths[i] = 0; }\n\n    /* read code lengths for code length alphabet */\n    for (i = 0; i < hclen; ++i) {\n      /* get 3 bits code length (0-7) */\n      var clen = tinf_read_bits(d, 3, 0);\n      lengths[clcidx[i]] = clen;\n    }\n\n    /* build code length tree */\n    tinf_build_tree(code_tree, lengths, 0, 19);\n\n    /* decode code lengths for the dynamic trees */\n    for (num = 0; num < hlit + hdist;) {\n      var sym = tinf_decode_symbol(d, code_tree);\n\n      switch (sym) {\n        case 16:\n          /* copy previous code length 3-6 times (read 2 bits) */\n          var prev = lengths[num - 1];\n          for (length = tinf_read_bits(d, 2, 3); length; --length) {\n            lengths[num++] = prev;\n          }\n          break;\n        case 17:\n          /* repeat code length 0 for 3-10 times (read 3 bits) */\n          for (length = tinf_read_bits(d, 3, 3); length; --length) {\n            lengths[num++] = 0;\n          }\n          break;\n        case 18:\n          /* repeat code length 0 for 11-138 times (read 7 bits) */\n          for (length = tinf_read_bits(d, 7, 11); length; --length) {\n            lengths[num++] = 0;\n          }\n          break;\n        default:\n          /* values 0-15 represent the actual code lengths */\n          lengths[num++] = sym;\n          break;\n      }\n    }\n\n    /* build dynamic trees */\n    tinf_build_tree(lt, lengths, 0, hlit);\n    tinf_build_tree(dt, lengths, hlit, hdist);\n  }\n\n  /* ----------------------------- *\n   * -- block inflate functions -- *\n   * ----------------------------- */\n\n  /* given a stream and two trees, inflate a block of data */\n  function tinf_inflate_block_data(d, lt, dt) {\n    while (1) {\n      var sym = tinf_decode_symbol(d, lt);\n\n      /* check for end of block */\n      if (sym === 256) {\n        return TINF_OK;\n      }\n\n      if (sym < 256) {\n        d.dest[d.destLen++] = sym;\n      } else {\n        var length, dist, offs;\n        var i;\n\n        sym -= 257;\n\n        /* possibly get more bits from length code */\n        length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n        dist = tinf_decode_symbol(d, dt);\n\n        /* possibly get more bits from distance code */\n        offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n        /* copy match */\n        for (i = offs; i < offs + length; ++i) {\n          d.dest[d.destLen++] = d.dest[i];\n        }\n      }\n    }\n  }\n\n  /* inflate an uncompressed block of data */\n  function tinf_inflate_uncompressed_block(d) {\n    var length, invlength;\n    var i;\n    \n    /* unread from bitbuffer */\n    while (d.bitcount > 8) {\n      d.sourceIndex--;\n      d.bitcount -= 8;\n    }\n\n    /* get length */\n    length = d.source[d.sourceIndex + 1];\n    length = 256 * length + d.source[d.sourceIndex];\n\n    /* get one\'s complement of length */\n    invlength = d.source[d.sourceIndex + 3];\n    invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n    /* check length */\n    if (length !== (~invlength & 0x0000ffff))\n      { return TINF_DATA_ERROR; }\n\n    d.sourceIndex += 4;\n\n    /* copy block */\n    for (i = length; i; --i)\n      { d.dest[d.destLen++] = d.source[d.sourceIndex++]; }\n\n    /* make sure we start next block on a byte boundary */\n    d.bitcount = 0;\n\n    return TINF_OK;\n  }\n\n  /* inflate stream from source to dest */\n  function tinf_uncompress(source, dest) {\n    var d = new Data(source, dest);\n    var bfinal, btype, res;\n\n    do {\n      /* read final block flag */\n      bfinal = tinf_getbit(d);\n\n      /* read block type (2 bits) */\n      btype = tinf_read_bits(d, 2, 0);\n\n      /* decompress block */\n      switch (btype) {\n        case 0:\n          /* decompress uncompressed block */\n          res = tinf_inflate_uncompressed_block(d);\n          break;\n        case 1:\n          /* decompress block with fixed huffman trees */\n          res = tinf_inflate_block_data(d, sltree, sdtree);\n          break;\n        case 2:\n          /* decompress block with dynamic huffman trees */\n          tinf_decode_trees(d, d.ltree, d.dtree);\n          res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n          break;\n        default:\n          res = TINF_DATA_ERROR;\n      }\n\n      if (res !== TINF_OK)\n        { throw new Error(\'Data error\'); }\n\n    } while (!bfinal);\n\n    if (d.destLen < d.dest.length) {\n      if (typeof d.dest.slice === \'function\')\n        { return d.dest.slice(0, d.destLen); }\n      else\n        { return d.dest.subarray(0, d.destLen); }\n    }\n    \n    return d.dest;\n  }\n\n  /* -------------------- *\n   * -- initialization -- *\n   * -------------------- */\n\n  /* build fixed huffman trees */\n  tinf_build_fixed_trees(sltree, sdtree);\n\n  /* build extra bits and base tables */\n  tinf_build_bits_base(length_bits, length_base, 4, 3);\n  tinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n  /* fix a special case */\n  length_bits[28] = 0;\n  length_base[28] = 258;\n\n  module.exports = tinf_uncompress;\n\n    return module.exports\n  })();\n  // End tinyInflate\n\n  // Begin woff2otf.js\n  /*\n   Copyright 2012, Steffen Hanikel (https://github.com/hanikesn)\n   Modified by Artemy Tregubenko, 2014 (https://github.com/arty-name/woff2otf)\n   Modified by Jason Johnston, 2019 (pako --> tiny-inflate)\n   \n     Licensed under the Apache License, Version 2.0 (the "License");\n     you may not use this file except in compliance with the License.\n     You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n     Unless required by applicable law or agreed to in writing, software\n     distributed under the License is distributed on an "AS IS" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     See the License for the specific language governing permissions and\n     limitations under the License.\n\n   A tool to convert a WOFF back to a TTF/OTF font file, in pure Javascript\n  */\n\n  function convert_streams(bufferIn, tinyInflate) {\n      var dataViewIn = new DataView(bufferIn);\n      var offsetIn = 0;\n\n      function read2() {\n          var uint16 = dataViewIn.getUint16(offsetIn);\n          offsetIn += 2;\n          return uint16;\n      }\n\n      function read4() {\n          var uint32 = dataViewIn.getUint32(offsetIn);\n          offsetIn += 4;\n          return uint32;\n      }\n\n      function write2(uint16) {\n          dataViewOut.setUint16(offsetOut, uint16);\n          offsetOut += 2;\n      }\n\n      function write4(uint32) {\n          dataViewOut.setUint32(offsetOut, uint32);\n          offsetOut += 4;\n      }\n\n      var WOFFHeader = {\n          signature: read4(),\n          flavor: read4(),\n          length: read4(),\n          numTables: read2(),\n          reserved: read2(),\n          totalSfntSize: read4(),\n          majorVersion: read2(),\n          minorVersion: read2(),\n          metaOffset: read4(),\n          metaLength: read4(),\n          metaOrigLength: read4(),\n          privOffset: read4(),\n          privLength: read4()\n      };\n\n      var entrySelector = 0;\n      while (Math.pow(2, entrySelector) <= WOFFHeader.numTables) {\n          entrySelector++;\n      }\n      entrySelector--;\n\n      var searchRange = Math.pow(2, entrySelector) * 16;\n      var rangeShift = WOFFHeader.numTables * 16 - searchRange;\n\n      var offset = 4 + 2 + 2 + 2 + 2;\n      var TableDirectoryEntries = [];\n      for (var i = 0; i < WOFFHeader.numTables; i++) {\n          TableDirectoryEntries.push({\n              tag: read4(),\n              offset: read4(),\n              compLength: read4(),\n              origLength: read4(),\n              origChecksum: read4()\n          });\n          offset += 4 * 4;\n      }\n\n      var arrayOut = new Uint8Array(\n          4 + 2 + 2 + 2 + 2 +\n          TableDirectoryEntries.length * (4 + 4 + 4 + 4) +\n          TableDirectoryEntries.reduce(function(acc, entry) { return acc + entry.origLength + 4; }, 0)\n      );\n      var bufferOut = arrayOut.buffer;\n      var dataViewOut = new DataView(bufferOut);\n      var offsetOut = 0;\n\n      write4(WOFFHeader.flavor);\n      write2(WOFFHeader.numTables);\n      write2(searchRange);\n      write2(entrySelector);\n      write2(rangeShift);\n\n      TableDirectoryEntries.forEach(function(TableDirectoryEntry) {\n          write4(TableDirectoryEntry.tag);\n          write4(TableDirectoryEntry.origChecksum);\n          write4(offset);\n          write4(TableDirectoryEntry.origLength);\n\n          TableDirectoryEntry.outOffset = offset;\n          offset += TableDirectoryEntry.origLength;\n          if ((offset % 4) != 0) {\n              offset += 4 - (offset % 4);\n          }\n      });\n\n      var size;\n\n      TableDirectoryEntries.forEach(function(TableDirectoryEntry) {\n          var compressedData = bufferIn.slice(\n              TableDirectoryEntry.offset,\n              TableDirectoryEntry.offset + TableDirectoryEntry.compLength\n          );\n\n          if (TableDirectoryEntry.compLength != TableDirectoryEntry.origLength) {\n              var uncompressedData = new Uint8Array(TableDirectoryEntry.origLength);\n              tinyInflate(\n                new Uint8Array(compressedData, 2), //skip deflate header\n                uncompressedData\n              );\n          } else {\n              uncompressedData = new Uint8Array(compressedData);\n          }\n\n          arrayOut.set(uncompressedData, TableDirectoryEntry.outOffset);\n          offset = TableDirectoryEntry.outOffset + TableDirectoryEntry.origLength;\n\n          var padding = 0;\n          if ((offset % 4) != 0) {\n              padding = 4 - (offset % 4);\n          }\n          arrayOut.set(\n              new Uint8Array(padding).buffer,\n              TableDirectoryEntry.outOffset + TableDirectoryEntry.origLength\n          );\n\n          size = offset + padding;\n      });\n\n      return bufferOut.slice(0, size);\n  }\n\n  // End woff2otf.js\n\n  return function(buffer) {\n    return convert_streams(buffer, tinyInflate)\n  }\n\n  }\n\n  /**\n   * An adapter that allows Typr.js to be used as if it were (a subset of) the OpenType.js API.\n   * Also adds support for WOFF files (not WOFF2).\n   */\n\n  function parserFactory(Typr, woff2otf) {\n    var cmdArgLengths = {\n      M: 2,\n      L: 2,\n      Q: 4,\n      C: 6,\n      Z: 0\n    };\n\n    function wrapFontObj(typrFont) {\n      var glyphMap = Object.create(null);\n\n      var fontObj = {\n        unitsPerEm: typrFont.head.unitsPerEm,\n        ascender: typrFont.hhea.ascender,\n        descender: typrFont.hhea.descender,\n        forEachGlyph: function forEachGlyph(text, fontSize, letterSpacing, callback) {\n          var glyphX = 0;\n          var fontScale = 1 / fontObj.unitsPerEm * fontSize;\n\n          var glyphIndices = Typr.U.stringToGlyphs(typrFont, text);\n          var charIndex = 0;\n          glyphIndices.forEach(function (glyphIndex) {\n            // Typr returns a glyph index per string codepoint, with -1s in place of those that\n            // were omitted due to ligature substitution. So we can track original index in the\n            // string via simple increment, and skip everything else when seeing a -1.\n            if (glyphIndex !== -1) {\n              var glyphObj = glyphMap[glyphIndex];\n              if (!glyphObj) {\n                var ref = Typr.U.glyphToPath(typrFont, glyphIndex);\n                var cmds = ref.cmds;\n                var crds = ref.crds;\n\n                // Find extents - Glyf gives this in metadata but not CFF, and Typr doesn\'t\n                // normalize the two, so it\'s simplest just to iterate ourselves.\n                var xMin, yMin, xMax, yMax;\n                if (crds.length) {\n                  xMin = yMin = Infinity;\n                  xMax = yMax = -Infinity;\n                  for (var i = 0, len = crds.length; i < len; i += 2) {\n                    var x = crds[i];\n                    var y = crds[i + 1];\n                    if (x < xMin) { xMin = x; }\n                    if (y < yMin) { yMin = y; }\n                    if (x > xMax) { xMax = x; }\n                    if (y > yMax) { yMax = y; }\n                  }\n                } else {\n                  xMin = xMax = yMin = yMax = 0;\n                }\n\n                glyphObj = glyphMap[glyphIndex] = {\n                  index: glyphIndex,\n                  advanceWidth: typrFont.hmtx.aWidth[glyphIndex],\n                  xMin: xMin,\n                  yMin: yMin,\n                  xMax: xMax,\n                  yMax: yMax,\n                  pathCommandCount: cmds.length,\n                  forEachPathCommand: function forEachPathCommand(callback) {\n                    var argsIndex = 0;\n                    var argsArray = [];\n                    for (var i = 0, len = cmds.length; i < len; i++) {\n                      var numArgs = cmdArgLengths[cmds[i]];\n                      argsArray.length = 1 + numArgs;\n                      argsArray[0] = cmds[i];\n                      for (var j = 1; j <= numArgs; j++) {\n                        argsArray[j] = crds[argsIndex++];\n                      }\n                      callback.apply(null, argsArray);\n                    }\n                  }\n                };\n              }\n\n              callback.call(null, glyphObj, glyphX, charIndex);\n\n              if (glyphObj.advanceWidth) {\n                glyphX += glyphObj.advanceWidth * fontScale;\n              }\n              if (letterSpacing) {\n                glyphX += letterSpacing * fontSize;\n              }\n            }\n            charIndex += (text.codePointAt(charIndex) > 0xffff ? 2 : 1);\n          });\n          return glyphX\n        }\n      };\n\n      return fontObj\n    }\n\n    return function parse(buffer) {\n      // Look to see if we have a WOFF file and convert it if so:\n      var peek = new Uint8Array(buffer, 0, 4);\n      var tag = Typr._bin.readASCII(peek, 0, 4);\n      if (tag === \'wOFF\') {\n        buffer = woff2otf(buffer);\n      } else if (tag === \'wOF2\') {\n        throw new Error(\'woff2 fonts not supported\')\n      }\n      return wrapFontObj(Typr.parse(buffer)[0])\n    }\n  }\n\n\n  var workerModule = troikaWorkerUtils.defineWorkerModule({\n    name: \'Typr Font Parser\',\n    dependencies: [typrFactory, woff2otfFactory, parserFactory],\n    init: function init(typrFactory, woff2otfFactory, parserFactory) {\n      var Typr = typrFactory();\n      var woff2otf = woff2otfFactory();\n      return parserFactory(Typr, woff2otf)\n    }\n  });\n\n  //import fontParser from \'./FontParser_OpenType.js\'\n\n\n  var CONFIG = {\n    defaultFontURL: \'https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff\', //Roboto Regular\n    sdfGlyphSize: 64,\n    textureWidth: 2048\n  };\n  var tempColor = new three.Color();\n\n  /**\n   * Customizes the text builder configuration. This must be called prior to the first font processing\n   * request, and applies to all fonts.\n   *\n   * @param {String} config.defaultFontURL - The URL of the default font to use for text processing\n   *                 requests, in case none is specified or the specifiede font fails to load or parse.\n   *                 Defaults to "Roboto Regular" from Google Fonts.\n   * @param {Number} config.sdfGlyphSize - The default size of each glyph\'s SDF (signed distance field)\n   *                 texture used for rendering. Must be a power-of-two number, and applies to all fonts,\n   *                 but note that this can also be overridden per call to `getTextRenderInfo()`.\n   *                 Larger sizes can improve the quality of glyph rendering by increasing the sharpness\n   *                 of corners and preventing loss of very thin lines, at the expense of memory. Defaults\n   *                 to 64 which is generally a good balance of size and quality.\n   * @param {Number} config.textureWidth - The width of the SDF texture; must be a power of 2. Defaults to\n   *                 2048 which is a safe maximum texture dimension according to the stats at\n   *                 https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE and should allow for a\n   *                 reasonably large number of glyphs (default glyph size of 64 and safe texture size of\n   *                 2048^2 allows for 1024 glyphs.) This can be increased if you need to increase the\n   *                 glyph size and/or have an extraordinary number of glyphs.\n   */\n  function configureTextBuilder(config) {\n    {\n      assign(CONFIG, config);\n    }\n  }\n\n\n  /**\n   * The radial distance from glyph edges over which the SDF alpha will be calculated; if the alpha\n   * at distance:0 is 0.5, then the alpha at this distance will be zero. This is defined as a percentage\n   * of each glyph\'s maximum dimension in font space units so that it maps to the same minimum number of\n   * SDF texels regardless of the glyph\'s size. A larger value provides greater alpha gradient resolution\n   * and improves readability/antialiasing quality at small display sizes, but also decreases the number\n   * of texels available for encoding path details.\n   */\n  var SDF_DISTANCE_PERCENT = 1 / 8;\n\n\n  /**\n   * Repository for all font SDF atlas textures\n   *\n   *   {\n   *     [font]: {\n   *       sdfTexture: DataTexture\n   *     }\n   *   }\n   */\n  var atlases = Object.create(null);\n\n  /**\n   * @typedef {object} TroikaTextRenderInfo - Format of the result from `getTextRenderInfo`.\n   * @property {object} parameters - The normalized input arguments to the render call.\n   * @property {DataTexture} sdfTexture - The SDF atlas texture.\n   * @property {number} sdfGlyphSize - The size of each glyph\'s SDF.\n   * @property {number} sdfMinDistancePercent - See `SDF_DISTANCE_PERCENT`\n   * @property {Float32Array} glyphBounds - List of [minX, minY, maxX, maxY] quad bounds for each glyph.\n   * @property {Float32Array} glyphAtlasIndices - List holding each glyph\'s index in the SDF atlas.\n   * @property {Uint8Array} [glyphColors] - List holding each glyph\'s [r, g, b] color, if `colorRanges` was supplied.\n   * @property {Float32Array} [caretPositions] - A list of caret positions for all glyphs; this is\n   *           the bottom [x,y] of the cursor position before each char, plus one after the last char.\n   * @property {number} [caretHeight] - An appropriate height for all selection carets.\n   * @property {number} ascender - The font\'s ascender metric.\n   * @property {number} descender - The font\'s descender metric.\n   * @property {number} lineHeight - The final computed lineHeight measurement.\n   * @property {number} topBaseline - The y position of the top line\'s baseline.\n   * @property {Array<number>} totalBounds - The total [minX, minY, maxX, maxY] rect including all glyph\n   *           quad bounds; this will be slightly larger than the actual glyph path edges due to SDF padding.\n   * @property {Array<number>} totalBlockSize - The [width, height] of the text block; this does not include\n   *           extra SDF padding so it is accurate to use for measurement.\n   * @property {Array<number>} chunkedBounds - List of bounding rects for each consecutive set of N glyphs,\n   *           in the format `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`.\n   * @property {object} timings - Timing info for various parts of the rendering logic including SDF\n   *           generation, layout, etc.\n   * @frozen\n   */\n\n  /**\n   * @callback getTextRenderInfo~callback\n   * @param {TroikaTextRenderInfo} textRenderInfo\n   */\n\n  /**\n   * Main entry point for requesting the data needed to render a text string with given font parameters.\n   * This is an asynchronous call, performing most of the logic in a web worker thread.\n   * @param {object} args\n   * @param {getTextRenderInfo~callback} callback\n   */\n  function getTextRenderInfo(args, callback) {\n    args = assign({}, args);\n\n    // Apply default font here to avoid a \'null\' atlas, and convert relative\n    // URLs to absolute so they can be resolved in the worker\n    args.font = toAbsoluteURL(args.font || CONFIG.defaultFontURL);\n\n    // Normalize text to a string\n    args.text = \'\' + args.text;\n\n    args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize;\n\n    // Normalize colors\n    if (args.colorRanges != null) {\n      var colors = {};\n      for (var key in args.colorRanges) {\n        if (args.colorRanges.hasOwnProperty(key)) {\n          var val = args.colorRanges[key];\n          if (typeof val !== \'number\') {\n            val = tempColor.set(val).getHex();\n          }\n          colors[key] = val;\n        }\n      }\n      args.colorRanges = colors;\n    }\n\n    Object.freeze(args);\n\n    // Init the atlas for this font if needed\n    var textureWidth = CONFIG.textureWidth;\n    var sdfGlyphSize = args.sdfGlyphSize;\n    var atlasKey = (args.font) + "@" + sdfGlyphSize;\n    var atlas = atlases[atlasKey];\n    if (!atlas) {\n      atlas = atlases[atlasKey] = {\n        sdfTexture: new three.DataTexture(\n          new Uint8Array(sdfGlyphSize * textureWidth),\n          textureWidth,\n          sdfGlyphSize,\n          three.LuminanceFormat,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          three.LinearFilter,\n          three.LinearFilter\n        )\n      };\n      atlas.sdfTexture.font = args.font;\n    }\n\n    // Issue request to the FontProcessor in the worker\n    processInWorker(args).then(function (result) {\n      // If the response has newGlyphs, copy them into the atlas texture at the specified indices\n      if (result.newGlyphSDFs) {\n        result.newGlyphSDFs.forEach(function (ref) {\n          var textureData = ref.textureData;\n          var atlasIndex = ref.atlasIndex;\n\n          var texImg = atlas.sdfTexture.image;\n\n          // Grow the texture by power of 2 if needed\n          while (texImg.data.length < (atlasIndex + 1) * sdfGlyphSize * sdfGlyphSize) {\n            var biggerArray = new Uint8Array(texImg.data.length * 2);\n            biggerArray.set(texImg.data);\n            texImg.data = biggerArray;\n            texImg.height *= 2;\n          }\n\n          // Insert the new glyph\'s data into the full texture image at the correct offsets\n          var cols = texImg.width / sdfGlyphSize;\n          for (var y = 0; y < sdfGlyphSize; y++) {\n            var srcStartIndex = y * sdfGlyphSize;\n            var tgtStartIndex = texImg.width * sdfGlyphSize * Math.floor(atlasIndex / cols) //full rows\n              + (atlasIndex % cols) * sdfGlyphSize //partial row\n              + (y * texImg.width); //row within glyph\n            for (var x = 0; x < sdfGlyphSize; x++) {\n              texImg.data[tgtStartIndex + x] = textureData[srcStartIndex + x];\n            }\n          }\n        });\n        atlas.sdfTexture.needsUpdate = true;\n      }\n\n      // Invoke callback with the text layout arrays and updated texture\n      callback(Object.freeze({\n        parameters: args,\n        sdfTexture: atlas.sdfTexture,\n        sdfGlyphSize: sdfGlyphSize,\n        sdfMinDistancePercent: SDF_DISTANCE_PERCENT,\n        glyphBounds: result.glyphBounds,\n        glyphAtlasIndices: result.glyphAtlasIndices,\n        glyphColors: result.glyphColors,\n        caretPositions: result.caretPositions,\n        caretHeight: result.caretHeight,\n        chunkedBounds: result.chunkedBounds,\n        ascender: result.ascender,\n        descender: result.descender,\n        lineHeight: result.lineHeight,\n        topBaseline: result.topBaseline,\n        totalBounds: result.totalBounds,\n        totalBlockSize: result.totalBlockSize,\n        timings: result.timings\n      }));\n    });\n  }\n\n\n  /**\n   * Preload a given font and optionally pre-generate glyph SDFs for one or more character sequences.\n   * This can be useful to avoid long pauses when first showing text in a scene, by preloading the\n   * needed fonts and glyphs up front along with other assets.\n   *\n   * @param {object} options\n   * @param {string} options.font - URL of the font file to preload. If not given, the default font will\n   *        be loaded.\n   * @param {string|string[]} options.characters - One or more character sequences for which to pre-\n   *        generate glyph SDFs. Note that this will honor ligature substitution, so you may need\n   *        to specify ligature sequences in addition to their individual characters to get all\n   *        possible glyphs, e.g. `["t", "h", "th"]` to get the "t" and "h" glyphs plus the "th" ligature.\n   * @param {number} options.sdfGlyphSize - The size at which to prerender the SDF textures for the\n   *        specified `characters`.\n   * @param {function} callback - A function that will be called when the preloading is complete.\n   */\n  function preloadFont(ref, callback) {\n    var font = ref.font;\n    var characters = ref.characters;\n    var sdfGlyphSize = ref.sdfGlyphSize;\n\n    var text = Array.isArray(characters) ? characters.join(\'\\n\') : \'\' + characters;\n    getTextRenderInfo({ font: font, sdfGlyphSize: sdfGlyphSize, text: text }, callback);\n  }\n\n\n  // Local assign impl so we don\'t have to import troika-core\n  function assign(toObj, fromObj) {\n    for (var key in fromObj) {\n      if (fromObj.hasOwnProperty(key)) {\n        toObj[key] = fromObj[key];\n      }\n    }\n    return toObj\n  }\n\n  // Utility for making URLs absolute\n  var linkEl;\n  function toAbsoluteURL(path) {\n    if (!linkEl) {\n      linkEl = typeof document === \'undefined\' ? {} : document.createElement(\'a\');\n    }\n    linkEl.href = path;\n    return linkEl.href\n  }\n\n\n  var fontProcessorWorkerModule = troikaWorkerUtils.defineWorkerModule({\n    name: \'FontProcessor\',\n    dependencies: [\n      CONFIG,\n      SDF_DISTANCE_PERCENT,\n      workerModule,\n      createGlyphSegmentsQuadtree,\n      createSDFGenerator,\n      createFontProcessor\n    ],\n    init: function init(config, sdfDistancePercent, fontParser, createGlyphSegmentsQuadtree, createSDFGenerator, createFontProcessor) {\n      var sdfGenerator = createSDFGenerator(\n        createGlyphSegmentsQuadtree,\n        {\n          sdfDistancePercent: sdfDistancePercent\n        }\n      );\n      return createFontProcessor(fontParser, sdfGenerator, {\n        defaultFontUrl: config.defaultFontURL\n      })\n    }\n  });\n\n  var processInWorker = troikaWorkerUtils.defineWorkerModule({\n    name: \'TextBuilder\',\n    dependencies: [fontProcessorWorkerModule, troikaWorkerUtils.ThenableWorkerModule],\n    init: function init(fontProcessor, Thenable) {\n      return function(args) {\n        var thenable = new Thenable();\n        fontProcessor.process(args, thenable.resolve);\n        return thenable\n      }\n    },\n    getTransferables: function getTransferables(result) {\n      // Mark array buffers as transferable to avoid cloning during postMessage\n      var transferables = [\n        result.glyphBounds.buffer,\n        result.glyphAtlasIndices.buffer\n      ];\n      if (result.caretPositions) {\n        transferables.push(result.caretPositions.buffer);\n      }\n      if (result.newGlyphSDFs) {\n        result.newGlyphSDFs.forEach(function (d) {\n          transferables.push(d.textureData.buffer);\n        });\n      }\n      return transferables\n    }\n  });\n\n  var templateGeometries = {};\n  function getTemplateGeometry(detail) {\n    var geom = templateGeometries[detail];\n    if (!geom) {\n      geom = templateGeometries[detail] = new three.PlaneBufferGeometry(1, 1, detail, detail).translate(0.5, 0.5, 0);\n    }\n    return geom\n  }\n  var tempVec3 = new three.Vector3();\n\n  var glyphBoundsAttrName = \'aTroikaGlyphBounds\';\n  var glyphIndexAttrName = \'aTroikaGlyphIndex\';\n  var glyphColorAttrName = \'aTroikaGlyphColor\';\n\n\n\n  /**\n  @class GlyphsGeometry\n\n  A specialized Geometry for rendering a set of text glyphs. Uses InstancedBufferGeometry to\n  render the glyphs using GPU instancing of a single quad, rather than constructing a whole\n  geometry with vertices, for much smaller attribute arraybuffers according to this math:\n\n    Where N = number of glyphs...\n\n    Instanced:\n    - position: 4 * 3\n    - index: 2 * 3\n    - normal: 4 * 3\n    - uv: 4 * 2\n    - glyph x/y bounds: N * 4\n    - glyph indices: N * 1\n    = 5N + 38\n\n    Non-instanced:\n    - position: N * 4 * 3\n    - index: N * 2 * 3\n    - normal: N * 4 * 3\n    - uv: N * 4 * 2\n    - glyph indices: N * 1\n    = 39N\n\n  A downside of this is the rare-but-possible lack of the instanced arrays extension,\n  which we could potentially work around with a fallback non-instanced implementation.\n\n  */\n  var GlyphsGeometry = /*@__PURE__*/(function (InstancedBufferGeometry) {\n    function GlyphsGeometry() {\n      InstancedBufferGeometry.call(this);\n\n      this.detail = 1;\n\n      // Preallocate zero-radius bounding sphere\n      this.boundingSphere = new three.Sphere();\n    }\n\n    if ( InstancedBufferGeometry ) GlyphsGeometry.__proto__ = InstancedBufferGeometry;\n    GlyphsGeometry.prototype = Object.create( InstancedBufferGeometry && InstancedBufferGeometry.prototype );\n    GlyphsGeometry.prototype.constructor = GlyphsGeometry;\n\n    var prototypeAccessors = { detail: { configurable: true } };\n\n    GlyphsGeometry.prototype.computeBoundingSphere = function computeBoundingSphere () {\n      // No-op; we\'ll sync the boundingSphere proactively in `updateGlyphs`.\n    };\n\n    prototypeAccessors.detail.set = function (detail) {\n      var this$1 = this;\n\n      if (detail !== this._detail) {\n        this._detail = detail;\n        if (typeof detail !== \'number\' || detail < 1) {\n          detail = 1;\n        }\n        var tpl = getTemplateGeometry(detail)\n        ;[\'position\', \'normal\', \'uv\'].forEach(function (attr) {\n          this$1.attributes[attr] = tpl.attributes[attr].clone();\n        });\n        this.setIndex(tpl.getIndex().clone());\n      }\n    };\n    prototypeAccessors.detail.get = function () {\n      return this._detail\n    };\n\n    /**\n     * Update the geometry for a new set of glyphs.\n     * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs\n     *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1\n     * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within\n     *        the SDF atlas texture.\n     * @param {Array} totalBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs\n     * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N\n     *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be\n     *        used with `applyClipRect` to choose an optimized `instanceCount`.\n     * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.\n     */\n    GlyphsGeometry.prototype.updateGlyphs = function updateGlyphs (glyphBounds, glyphAtlasIndices, totalBounds, chunkedBounds, glyphColors) {\n      // Update the instance attributes\n      updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);\n      updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);\n      updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);\n      this._chunkedBounds = chunkedBounds;\n      setInstanceCount(this, glyphAtlasIndices.length);\n\n      // Update the boundingSphere based on the total bounds\n      var sphere = this.boundingSphere;\n      sphere.center.set(\n        (totalBounds[0] + totalBounds[2]) / 2,\n        (totalBounds[1] + totalBounds[3]) / 2,\n        0\n      );\n      sphere.radius = sphere.center.distanceTo(tempVec3.set(totalBounds[0], totalBounds[1], 0));\n    };\n\n    /**\n     * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest\n     * `instanceCount` that will show all glyphs within the clipped view. This is an optimization\n     * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would\n     * be clipped anyway.\n     *\n     * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting\n     * offset, this optimization becomes less effective as the clipRect moves closer to the end of the\n     * text block. We could fix that by switching from instancing to a full geometry with a drawRange,\n     * but at the expense of much larger attribute buffers (see classdoc above.)\n     *\n     * @param {Vector4} clipRect\n     */\n    GlyphsGeometry.prototype.applyClipRect = function applyClipRect (clipRect) {\n      var count = this.getAttribute(glyphIndexAttrName).count;\n      var chunks = this._chunkedBounds;\n      if (chunks) {\n        for (var i = chunks.length; i--;) {\n          count = chunks[i].end;\n          var rect = chunks[i].rect;\n          // note: both rects are l-b-r-t\n          if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {\n            break\n          }\n        }\n      }\n      setInstanceCount(this, count);\n    };\n\n    Object.defineProperties( GlyphsGeometry.prototype, prototypeAccessors );\n\n    return GlyphsGeometry;\n  }(three.InstancedBufferGeometry));\n\n  // Compat for pre r109:\n  if (!GlyphsGeometry.prototype.setAttribute) {\n    GlyphsGeometry.prototype.setAttribute = function(name, attribute) {\n      this.attributes[ name ] = attribute;\n      return this\n    };\n  }\n\n\n  function updateBufferAttr(geom, attrName, newArray, itemSize) {\n    var attr = geom.getAttribute(attrName);\n    if (newArray) {\n      // If length isn\'t changing, just update the attribute\'s array data\n      if (attr && attr.array.length === newArray.length) {\n        attr.array.set(newArray);\n        attr.needsUpdate = true;\n      } else {\n        geom.setAttribute(attrName, new three.InstancedBufferAttribute(newArray, itemSize));\n        // If the new attribute has a different size, we also have to (as of r117) manually clear the\n        // internal cached max instance count. See https://github.com/mrdoob/three.js/issues/19706\n        // It\'s unclear if this is a threejs bug or a truly unsupported scenario; discussion in\n        // that ticket is ambiguous as to whether replacing a BufferAttribute with one of a\n        // different size is supported, but https://github.com/mrdoob/three.js/pull/17418 strongly\n        // implies it should be supported. It\'s possible we need to\n        delete geom._maxInstanceCount; //for r117+, could be fragile\n        geom.dispose(); //for r118+, more robust feeling, but more heavy-handed than I\'d like\n      }\n    } else if (attr) {\n      geom.deleteAttribute(attrName);\n    }\n  }\n\n  // Handle maxInstancedCount -> instanceCount rename that happened in three r117\n  function setInstanceCount(geom, count) {\n    geom[geom.hasOwnProperty(\'instanceCount\') ? \'instanceCount\' : \'maxInstancedCount\'] = count;\n  }\n\n  // language=GLSL\n  var VERTEX_DEFS = "\\nuniform vec2 uTroikaSDFTextureSize;\\nuniform float uTroikaSDFGlyphSize;\\nuniform vec4 uTroikaTotalBounds;\\nuniform vec4 uTroikaClipRect;\\nuniform mat3 uTroikaOrient;\\nuniform bool uTroikaUseGlyphColors;\\nattribute vec4 aTroikaGlyphBounds;\\nattribute float aTroikaGlyphIndex;\\nattribute vec3 aTroikaGlyphColor;\\nvarying vec2 vTroikaSDFTextureUV;\\nvarying vec2 vTroikaGlyphUV;\\nvarying vec3 vTroikaGlyphColor;\\n";\n\n  // language=GLSL prefix="void main() {" suffix="}"\n  var VERTEX_TRANSFORM = "\\nvec4 bounds = aTroikaGlyphBounds;\\nvec4 clippedBounds = vec4(\\n  clamp(bounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),\\n  clamp(bounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)\\n);\\nvec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);\\nvTroikaGlyphUV = clippedXY.xy;\\n\\nfloat cols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;\\nvTroikaSDFTextureUV = vec2(\\n  mod(aTroikaGlyphIndex, cols) + clippedXY.x,\\n  floor(aTroikaGlyphIndex / cols) + clippedXY.y\\n) * uTroikaSDFGlyphSize / uTroikaSDFTextureSize;\\n\\nposition.xy = mix(bounds.xy, bounds.zw, clippedXY);\\n\\nuv = vec2(\\n  (position.x - uTroikaTotalBounds.x) / (uTroikaTotalBounds.z - uTroikaTotalBounds.x),\\n  (position.y - uTroikaTotalBounds.y) / (uTroikaTotalBounds.w - uTroikaTotalBounds.y)\\n);\\n\\nposition = uTroikaOrient * position;\\nnormal = uTroikaOrient * normal;\\n";\n\n  // language=GLSL\n  var FRAGMENT_DEFS = "\\nuniform sampler2D uTroikaSDFTexture;\\nuniform float uTroikaSDFMinDistancePct;\\nuniform bool uTroikaSDFDebug;\\nvarying vec2 vTroikaSDFTextureUV;\\nvarying vec2 vTroikaGlyphUV;\\n\\nfloat troikaGetTextAlpha() {\\n  float troikaSDFValue = texture2D(uTroikaSDFTexture, vTroikaSDFTextureUV).r;\\n  \\n  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)\\n  float alpha = step(0.5, troikaSDFValue);\\n  #else\\n  " + (\'\') + "\\n  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300\\n  float aaDist = min(\\n    0.5,\\n    0.5 * min(\\n      fwidth(vTroikaGlyphUV.x),\\n      fwidth(vTroikaGlyphUV.y)\\n    )\\n  ) / uTroikaSDFMinDistancePct;\\n  #else\\n  float aaDist = 0.01;\\n  #endif\\n  \\n  float alpha = uTroikaSDFDebug ? troikaSDFValue : smoothstep(\\n    0.5 - aaDist,\\n    0.5 + aaDist,\\n    troikaSDFValue\\n  );\\n  #endif\\n  \\n  return alpha;\\n}\\n";\n\n  // language=GLSL prefix="void main() {" suffix="}"\n  var FRAGMENT_TRANSFORM = "\\nfloat troikaAlphaMult = troikaGetTextAlpha();\\nif (troikaAlphaMult == 0.0) {\\n  discard;\\n} else {\\n  gl_FragColor.a *= troikaAlphaMult;\\n}\\n";\n\n\n  /**\n   * Create a material for rendering text, derived from a baseMaterial\n   */\n  function createTextDerivedMaterial(baseMaterial) {\n    var textMaterial = troikaThreeUtils.createDerivedMaterial(baseMaterial, {\n      extensions: {derivatives: true},\n      uniforms: {\n        uTroikaSDFTexture: {value: null},\n        uTroikaSDFTextureSize: {value: new three.Vector2()},\n        uTroikaSDFGlyphSize: {value: 0},\n        uTroikaSDFMinDistancePct: {value: 0},\n        uTroikaTotalBounds: {value: new three.Vector4(0,0,0,0)},\n        uTroikaClipRect: {value: new three.Vector4(0,0,0,0)},\n        uTroikaOrient: {value: new three.Matrix3()},\n        uTroikaUseGlyphColors: {value: true},\n        uTroikaSDFDebug: {value: false}\n      },\n      vertexDefs: VERTEX_DEFS,\n      vertexTransform: VERTEX_TRANSFORM,\n      fragmentDefs: FRAGMENT_DEFS,\n      fragmentColorTransform: FRAGMENT_TRANSFORM,\n      customRewriter: function customRewriter(ref) {\n        var vertexShader = ref.vertexShader;\n        var fragmentShader = ref.fragmentShader;\n\n        var uDiffuseRE = /\\buniform\\s+vec3\\s+diffuse\\b/;\n        if (uDiffuseRE.test(fragmentShader)) {\n          // Replace all instances of `diffuse` with our varying\n          fragmentShader = fragmentShader\n            .replace(uDiffuseRE, \'varying vec3 vTroikaGlyphColor\')\n            .replace(/\\bdiffuse\\b/g, \'vTroikaGlyphColor\');\n          // Make sure the vertex shader declares the uniform so we can grab it as a fallback\n          if (!uDiffuseRE.test(vertexShader)) {\n            vertexShader = vertexShader.replace(\n              troikaThreeUtils.voidMainRegExp,\n              \'uniform vec3 diffuse;\\n$&\\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\\n\'\n            );\n          }\n        }\n        return { vertexShader: vertexShader, fragmentShader: fragmentShader }\n      }\n    });\n\n    // Force transparency - TODO is this reasonable?\n    textMaterial.transparent = true;\n\n    Object.defineProperties(textMaterial, {\n      isTroikaTextMaterial: {value: true},\n\n      // WebGLShadowMap reverses the side of the shadow material by default, which fails\n      // for planes, so here we force the `shadowSide` to always match the main side.\n      shadowSide: {\n        get: function get() {\n          return this.side\n        },\n        set: function set() {\n          //no-op\n        }\n      }\n    });\n\n    return textMaterial\n  }\n\n  var defaultMaterial = new three.MeshBasicMaterial({\n    color: 0xffffff,\n    side: three.DoubleSide,\n    transparent: true\n  });\n\n  var tempMat4 = new three.Matrix4();\n  var tempVec3a = new three.Vector3();\n  var tempVec3b = new three.Vector3();\n  var tempArray = [];\n  var origin = new three.Vector3();\n  var defaultOrient = \'+x+y\';\n\n  var raycastMesh = new three.Mesh(\n    new three.PlaneBufferGeometry(1, 1).translate(0.5, 0.5, 0),\n    defaultMaterial\n  );\n\n  var syncStartEvent = {type: \'syncstart\'};\n  var syncCompleteEvent = {type: \'synccomplete\'};\n\n  var SYNCABLE_PROPS = [\n    \'font\',\n    \'fontSize\',\n    \'letterSpacing\',\n    \'lineHeight\',\n    \'maxWidth\',\n    \'overflowWrap\',\n    \'text\',\n    \'textAlign\',\n    \'textIndent\',\n    \'whiteSpace\',\n    \'anchorX\',\n    \'anchorY\',\n    \'colorRanges\',\n    \'sdfGlyphSize\'\n  ];\n\n  var COPYABLE_PROPS = SYNCABLE_PROPS.concat(\n    \'material\',\n    \'color\',\n    \'depthOffset\',\n    \'clipRect\',\n    \'orientation\',\n    \'glyphGeometryDetail\'\n  );\n\n\n\n  /**\n   * @class Text\n   *\n   * A ThreeJS Mesh that renders a string of text on a plane in 3D space using signed distance\n   * fields (SDF).\n   */\n  var Text = /*@__PURE__*/(function (Mesh) {\n    function Text() {\n      var geometry = new GlyphsGeometry();\n      Mesh.call(this, geometry, null);\n\n      // === Text layout properties: === //\n\n      /**\n       * @member {string} text\n       * The string of text to be rendered.\n       */\n      this.text = \'\';\n\n      /**\n       * @deprecated Use `anchorX` and `anchorY` instead\n       * @member {Array<number>} anchor\n       * Defines where in the text block should correspond to the mesh\'s local position, as a set\n       * of horizontal and vertical percentages from 0 to 1. A value of `[0, 0]` (the default)\n       * anchors at the top-left, `[1, 1]` at the bottom-right, and `[0.5, 0.5]` centers the\n       * block at the mesh\'s position.\n       */\n      //this.anchor = null\n\n      /**\n       * @member {number|string} anchorX\n       * Defines the horizontal position in the text block that should line up with the local origin.\n       * Can be specified as a numeric x position in local units, a string percentage of the total\n       * text block width e.g. `\'25%\'`, or one of the following keyword strings: \'left\', \'center\',\n       * or \'right\'.\n       */\n      this.anchorX = 0;\n\n      /**\n       * @member {number|string} anchorX\n       * Defines the vertical position in the text block that should line up with the local origin.\n       * Can be specified as a numeric y position in local units (note: down is negative y), a string\n       * percentage of the total text block height e.g. `\'25%\'`, or one of the following keyword strings:\n       * \'top\', \'top-baseline\', \'middle\', \'bottom-baseline\', or \'bottom\'.\n       */\n      this.anchorY = 0;\n\n      /**\n       * @member {string} font\n       * URL of a custom font to be used. Font files can be any of the formats supported by\n       * OpenType (see https://github.com/opentypejs/opentype.js).\n       * Defaults to the Roboto font loaded from Google Fonts.\n       */\n      this.font = null; //will use default from TextBuilder\n\n      /**\n       * @member {number} fontSize\n       * The size at which to render the font in local units; corresponds to the em-box height\n       * of the chosen `font`.\n       */\n      this.fontSize = 0.1;\n\n      /**\n       * @member {number} letterSpacing\n       * Sets a uniform adjustment to spacing between letters after kerning is applied. Positive\n       * numbers increase spacing and negative numbers decrease it.\n       */\n      this.letterSpacing = 0;\n\n      /**\n       * @member {number|string} lineHeight\n       * Sets the height of each line of text, as a multiple of the `fontSize`. Defaults to \'normal\'\n       * which chooses a reasonable height based on the chosen font\'s ascender/descender metrics.\n       */\n      this.lineHeight = \'normal\';\n\n      /**\n       * @member {number} maxWidth\n       * The maximum width of the text block, above which text may start wrapping according to the\n       * `whiteSpace` and `overflowWrap` properties.\n       */\n      this.maxWidth = Infinity;\n\n      /**\n       * @member {string} overflowWrap\n       * Defines how text wraps if the `whiteSpace` property is `normal`. Can be either `\'normal\'`\n       * to break at whitespace characters, or `\'break-word\'` to allow breaking within words.\n       * Defaults to `\'normal\'`.\n       */\n      this.overflowWrap = \'normal\';\n\n      /**\n       * @member {string} textAlign\n       * The horizontal alignment of each line of text within the overall text bounding box.\n       */\n      this.textAlign = \'left\';\n\n      /**\n       * @member {number} textIndent\n       * Indentation for the first character of a line; see CSS `text-indent`.\n       */\n      this.textIndent = 0;\n\n      /**\n       * @member {string} whiteSpace\n       * Defines whether text should wrap when a line reaches the `maxWidth`. Can\n       * be either `\'normal\'` (the default), to allow wrapping according to the `overflowWrap` property,\n       * or `\'nowrap\'` to prevent wrapping. Note that `\'normal\'` here honors newline characters to\n       * manually break lines, making it behave more like `\'pre-wrap\'` does in CSS.\n       */\n      this.whiteSpace = \'normal\';\n\n\n      // === Presentation properties: === //\n\n      /**\n       * @member {THREE.Material} material\n       * Defines a _base_ material to be used when rendering the text. This material will be\n       * automatically replaced with a material derived from it, that adds shader code to\n       * decrease the alpha for each fragment (pixel) outside the text glyphs, with antialiasing.\n       * By default it will derive from a simple white MeshBasicMaterial, but you can use any\n       * of the other mesh materials to gain other features like lighting, texture maps, etc.\n       *\n       * Also see the `color` shortcut property.\n       */\n      this.material = null;\n\n      /**\n       * @member {string|number|THREE.Color} color\n       * This is a shortcut for setting the `color` of the text\'s material. You can use this\n       * if you don\'t want to specify a whole custom `material`.\n       */\n      this.color = null;\n\n      /**\n       * @member {object|null} colorRanges\n       * WARNING: This API is experimental and may change.\n       * This allows more fine-grained control of colors for individual or ranges of characters,\n       * taking precedence over the material\'s `color`. Its format is an Object whose keys each\n       * define a starting character index for a range, and whose values are the color for each\n       * range. The color value can be a numeric hex color value, a `THREE.Color` object, or\n       * any of the strings accepted by `THREE.Color`.\n       */\n      this.colorRanges = null;\n\n      /**\n       * @member {number} depthOffset\n       * This is a shortcut for setting the material\'s `polygonOffset` and related properties,\n       * which can be useful in preventing z-fighting when this text is laid on top of another\n       * plane in the scene. Positive numbers are further from the camera, negatives closer.\n       */\n      this.depthOffset = 0;\n\n      /**\n       * @member {Array<number>} clipRect\n       * If specified, defines a `[minX, minY, maxX, maxY]` of a rectangle outside of which all\n       * pixels will be discarded. This can be used for example to clip overflowing text when\n       * `whiteSpace=\'nowrap\'`.\n       */\n      this.clipRect = null;\n\n      /**\n       * @member {string} orientation\n       * Defines the axis plane on which the text should be laid out when the mesh has no extra\n       * rotation transform. It is specified as a string with two axes: the horizontal axis with\n       * positive pointing right, and the vertical axis with positive pointing up. By default this\n       * is \'+x+y\', meaning the text sits on the xy plane with the text\'s top toward positive y\n       * and facing positive z. A value of \'+x-z\' would place it on the xz plane with the text\'s\n       * top toward negative z and facing positive y.\n       */\n      this.orientation = defaultOrient;\n\n      /**\n       * @member {number} glyphGeometryDetail\n       * Controls number of vertical/horizontal segments that make up each glyph\'s rectangular\n       * plane. Defaults to 1. This can be increased to provide more geometrical detail for custom\n       * vertex shader effects, for example.\n       */\n      this.glyphGeometryDetail = 1;\n\n      /**\n       * @member {number|null} sdfGlyphSize\n       * The size of each glyph\'s SDF (signed distance field) used for rendering. This must be a\n       * power-of-two number. Defaults to 64 which is generally a good balance of size and quality\n       * for most fonts. Larger sizes can improve the quality of glyph rendering by increasing\n       * the sharpness of corners and preventing loss of very thin lines, at the expense of\n       * increased memory footprint and longer SDF generation time.\n       */\n      this.sdfGlyphSize = null;\n\n      this.debugSDF = false;\n    }\n\n    if ( Mesh ) Text.__proto__ = Mesh;\n    Text.prototype = Object.create( Mesh && Mesh.prototype );\n    Text.prototype.constructor = Text;\n\n    var prototypeAccessors = { textRenderInfo: { configurable: true },material: { configurable: true },glyphGeometryDetail: { configurable: true },customDepthMaterial: { configurable: true },customDistanceMaterial: { configurable: true } };\n\n    /**\n     * Updates the text rendering according to the current text-related configuration properties.\n     * This is an async process, so you can pass in a callback function to be executed when it\n     * finishes.\n     * @param {function} [callback]\n     */\n    Text.prototype.sync = function sync (callback) {\n      var this$1 = this;\n\n      if (this._needsSync) {\n        this._needsSync = false;\n\n        // If there\'s another sync still in progress, queue\n        if (this._isSyncing) {\n          (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);\n        } else {\n          this._isSyncing = true;\n          this.dispatchEvent(syncStartEvent);\n\n          getTextRenderInfo({\n            text: this.text,\n            font: this.font,\n            fontSize: this.fontSize || 0.1,\n            letterSpacing: this.letterSpacing || 0,\n            lineHeight: this.lineHeight || \'normal\',\n            maxWidth: this.maxWidth,\n            textAlign: this.textAlign,\n            textIndent: this.textIndent,\n            whiteSpace: this.whiteSpace,\n            overflowWrap: this.overflowWrap,\n            anchorX: this.anchorX,\n            anchorY: this.anchorY,\n            colorRanges: this.colorRanges,\n            includeCaretPositions: true, //TODO parameterize\n            sdfGlyphSize: this.sdfGlyphSize\n          }, function (textRenderInfo) {\n            this$1._isSyncing = false;\n\n            // Save result for later use in onBeforeRender\n            this$1._textRenderInfo = textRenderInfo;\n\n            // Update the geometry attributes\n            this$1.geometry.updateGlyphs(\n              textRenderInfo.glyphBounds,\n              textRenderInfo.glyphAtlasIndices,\n              textRenderInfo.totalBounds,\n              textRenderInfo.chunkedBounds,\n              textRenderInfo.glyphColors\n            );\n\n            // If we had extra sync requests queued up, kick it off\n            var queued = this$1._queuedSyncs;\n            if (queued) {\n              this$1._queuedSyncs = null;\n              this$1._needsSync = true;\n              this$1.sync(function () {\n                queued.forEach(function (fn) { return fn && fn(); });\n              });\n            }\n\n            this$1.dispatchEvent(syncCompleteEvent);\n            if (callback) {\n              callback();\n            }\n          });\n        }\n      }\n    };\n\n    /**\n     * Initiate a sync if needed - note it won\'t complete until next frame at the\n     * earliest so if possible it\'s a good idea to call sync() manually as soon as\n     * all the properties have been set.\n     * @override\n     */\n    Text.prototype.onBeforeRender = function onBeforeRender () {\n      this.sync();\n      this._prepareForRender();\n    };\n\n    /**\n     * Shortcut to dispose the geometry specific to this instance.\n     * Note: we don\'t also dispose the derived material here because if anything else is\n     * sharing the same base material it will result in a pause next frame as the program\n     * is recompiled. Instead users can dispose the base material manually, like normal,\n     * and we\'ll also dispose the derived material at that time.\n     */\n    Text.prototype.dispose = function dispose () {\n      this.geometry.dispose();\n    };\n\n    /**\n     * @property {TroikaTextRenderInfo|null} textRenderInfo\n     * @readonly\n     * The current processed rendering data for this TextMesh, returned by the TextBuilder after\n     * a `sync()` call. This will be `null` initially, and may be stale for a short period until\n     * the asynchrous `sync()` process completes.\n     */\n    prototypeAccessors.textRenderInfo.get = function () {\n      return this._textRenderInfo || null\n    };\n\n    // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n    prototypeAccessors.material.get = function () {\n      var derivedMaterial = this._derivedMaterial;\n      var baseMaterial = this._baseMaterial || defaultMaterial;\n      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n        derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial);\n        // dispose the derived material when its base material is disposed:\n        baseMaterial.addEventListener(\'dispose\', function onDispose() {\n          baseMaterial.removeEventListener(\'dispose\', onDispose);\n          derivedMaterial.dispose();\n        });\n      }\n      return derivedMaterial\n    };\n    prototypeAccessors.material.set = function (baseMaterial) {\n      if (baseMaterial && baseMaterial.isTroikaTextMaterial) { //prevent double-derivation\n        this._derivedMaterial = baseMaterial;\n        this._baseMaterial = baseMaterial.baseMaterial;\n      } else {\n        this._baseMaterial = baseMaterial;\n      }\n    };\n\n    prototypeAccessors.glyphGeometryDetail.get = function () {\n      return this.geometry.detail\n    };\n    prototypeAccessors.glyphGeometryDetail.set = function (detail) {\n      this.geometry.detail = detail;\n    };\n\n    // Create and update material for shadows upon request:\n    prototypeAccessors.customDepthMaterial.get = function () {\n      return this.material.getDepthMaterial()\n    };\n    prototypeAccessors.customDistanceMaterial.get = function () {\n      return this.material.getDistanceMaterial()\n    };\n\n    Text.prototype._prepareForRender = function _prepareForRender () {\n      var material = this._derivedMaterial;\n      var uniforms = material.uniforms;\n      var textInfo = this.textRenderInfo;\n      if (textInfo) {\n        var sdfTexture = textInfo.sdfTexture;\n        var totalBounds = textInfo.totalBounds;\n        uniforms.uTroikaSDFTexture.value = sdfTexture;\n        uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);\n        uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;\n        uniforms.uTroikaSDFMinDistancePct.value = textInfo.sdfMinDistancePercent;\n        uniforms.uTroikaTotalBounds.value.fromArray(totalBounds);\n        uniforms.uTroikaUseGlyphColors.value = !!textInfo.glyphColors;\n\n        var clipRect = this.clipRect;\n        if (!(clipRect && Array.isArray(clipRect) && clipRect.length === 4)) {\n          uniforms.uTroikaClipRect.value.fromArray(totalBounds);\n        } else {\n          uniforms.uTroikaClipRect.value.set(\n            Math.max(totalBounds[0], clipRect[0]),\n            Math.max(totalBounds[1], clipRect[1]),\n            Math.min(totalBounds[2], clipRect[2]),\n            Math.min(totalBounds[3], clipRect[3])\n          );\n        }\n        this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);\n      }\n      uniforms.uTroikaSDFDebug.value = !!this.debugSDF;\n      material.polygonOffset = !!this.depthOffset;\n      material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0;\n\n      // shortcut for setting material color via `color` prop on the mesh:\n      var color = this.color;\n      if (color != null && material.color && material.color.isColor && color !== material._troikaColor) {\n        material.color.set(material._troikaColor = color);\n      }\n\n      // base orientation\n      var orient = this.orientation || defaultOrient;\n      if (orient !== material._orientation) {\n        var rotMat = uniforms.uTroikaOrient.value;\n        orient = orient.replace(/[^-+xyz]/g, \'\');\n        var match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);\n        if (match) {\n          var hSign = match[1];\n          var hAxis = match[2];\n          var vSign = match[3];\n          var vAxis = match[4];\n          tempVec3a.set(0, 0, 0)[hAxis] = hSign === \'-\' ? 1 : -1;\n          tempVec3b.set(0, 0, 0)[vAxis] = vSign === \'-\' ? -1 : 1;\n          tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);\n          rotMat.setFromMatrix4(tempMat4);\n        } else {\n          rotMat.identity();\n        }\n        material._orientation = orient;\n      }\n    };\n\n    /**\n     * @override Custom raycasting to test against the whole text block\'s max rectangular bounds\n     * TODO is there any reason to make this more granular, like within individual line or glyph rects?\n     */\n    Text.prototype.raycast = function raycast (raycaster, intersects) {\n      var textInfo = this.textRenderInfo;\n      if (textInfo) {\n        var bounds = textInfo.totalBounds;\n        raycastMesh.matrixWorld.multiplyMatrices(\n          this.matrixWorld,\n          tempMat4.set(\n            bounds[2] - bounds[0], 0, 0, bounds[0],\n            0, bounds[3] - bounds[1], 0, bounds[1],\n            0, 0, 1, 0,\n            0, 0, 0, 1\n          )\n        );\n        tempArray.length = 0;\n        raycastMesh.raycast(raycaster, tempArray);\n        for (var i = 0; i < tempArray.length; i++) {\n          tempArray[i].object = this;\n          intersects.push(tempArray[i]);\n        }\n      }\n    };\n\n    Text.prototype.copy = function copy (source) {\n      var this$1 = this;\n\n      Mesh.prototype.copy.call(this, source);\n      COPYABLE_PROPS.forEach(function (prop) {\n        this$1[prop] = source[prop];\n      });\n      return this\n    };\n\n    Text.prototype.clone = function clone () {\n      return new this.constructor().copy(this)\n    };\n\n    Object.defineProperties( Text.prototype, prototypeAccessors );\n\n    return Text;\n  }(three.Mesh));\n\n\n  // Create setters for properties that affect text layout:\n  SYNCABLE_PROPS.forEach(function (prop) {\n    var privateKey = \'_private_\' + prop;\n    Object.defineProperty(Text.prototype, prop, {\n      get: function get() {\n        return this[privateKey]\n      },\n      set: function set(value) {\n        if (value !== this[privateKey]) {\n          this[privateKey] = value;\n          this._needsSync = true;\n        }\n      }\n    });\n  });\n\n\n  // Deprecation handler for `anchor` array:\n  var deprMsgShown = false;\n  Object.defineProperty(Text.prototype, \'anchor\', {\n    get: function get() {\n      return this._deprecated_anchor\n    },\n    set: function set(val) {\n      this._deprecated_anchor = val;\n      if (!deprMsgShown) {\n        console.warn(\'TextMesh: `anchor` has been deprecated; use `anchorX` and `anchorY` instead.\');\n        deprMsgShown = true;\n      }\n      if (Array.isArray(val)) {\n        this.anchorX = ((+val[0] || 0) * 100) + "%";\n        this.anchorY = ((+val[1] || 0) * 100) + "%";\n      } else {\n        this.anchorX = this.anchorY = 0;\n      }\n    }\n  });\n\n  //=== Utility functions for dealing with carets and selection ranges ===//\n\n  /**\n   * @typedef {object} TextCaret\n   * @property {number} x - x position of the caret\n   * @property {number} y - y position of the caret\'s bottom\n   * @property {number} height - height of the caret\n   * @property {number} charIndex - the index in the original input string of this caret\'s target\n   *   character; the caret will be for the position _before_ that character.\n   */\n\n  /**\n   * Given a local x/y coordinate in the text block plane, find the nearest caret position.\n   * @param {TroikaTextRenderInfo} textRenderInfo - a result object from TextBuilder#getTextRenderInfo\n   * @param {number} x\n   * @param {number} y\n   * @return {TextCaret | null}\n   */\n  function getCaretAtPoint(textRenderInfo, x, y) {\n    var closestCaret = null;\n    var caretHeight = textRenderInfo.caretHeight;\n    var caretsByRow = groupCaretsByRow(textRenderInfo);\n\n    // Find nearest row by y first\n    var closestRowY = Infinity;\n    caretsByRow.forEach(function (carets, rowY) {\n      if (Math.abs(y - (rowY + caretHeight / 2)) < Math.abs(y - (closestRowY + caretHeight / 2))) {\n        closestRowY = rowY;\n      }\n    });\n\n    // Then find closest caret by x within that row\n    caretsByRow.get(closestRowY).forEach(function (caret) {\n      if (!closestCaret || Math.abs(x - caret.x) < Math.abs(x - closestCaret.x)) {\n        closestCaret = caret;\n      }\n    });\n    return closestCaret\n  }\n\n\n  var _rectsCache = new WeakMap();\n\n  /**\n   * Given start and end character indexes, return a list of rectangles covering all the\n   * characters within that selection.\n   * @param {TroikaTextRenderInfo} textRenderInfo\n   * @param {number} start - index of the first char in the selection\n   * @param {number} end - index of the first char after the selection\n   * @return {Array<{left, top, right, bottom}> | null}\n   */\n  function getSelectionRects(textRenderInfo, start, end) {\n    var rects;\n    if (textRenderInfo) {\n      // Check cache - textRenderInfo is frozen so it\'s safe to cache based on it\n      var prevResult = _rectsCache.get(textRenderInfo);\n      if (prevResult && prevResult.start === start && prevResult.end === end) {\n        return prevResult.rects\n      }\n\n      var caretPositions = textRenderInfo.caretPositions;\n      var caretHeight = textRenderInfo.caretHeight;\n      var totalBounds = textRenderInfo.totalBounds;\n\n      // Normalize\n      if (end < start) {\n        var s = start;\n        start = end;\n        end = s;\n      }\n      start = Math.max(start, 0);\n      end = Math.min(end, caretPositions.length + 1);\n\n      // Collect into one rect per row\n      var rows = new Map();\n      for (var i = start; i < end; i++) {\n        var x1 = caretPositions[i * 3];\n        var x2 = caretPositions[i * 3 + 1];\n        var y = caretPositions[i * 3 + 2];\n        var row = rows.get(y);\n        if (!row) {\n          row = {left: x1, right: x2, bottom: y, top: y + caretHeight};\n          rows.set(y, row);\n        } else {\n          row.left = Math.max(Math.min(row.left, x1), totalBounds[0]);\n          row.right = Math.min(Math.max(row.right, x2), totalBounds[2]);\n        }\n      }\n      rects = [];\n      rows.forEach(function (rect) {\n        rects.push(rect);\n      });\n\n      _rectsCache.set(textRenderInfo, {start: start, end: end, rects: rects});\n    }\n    return rects\n  }\n\n  var _caretsByRowCache = new WeakMap();\n\n  function groupCaretsByRow(textRenderInfo) {\n    // textRenderInfo is frozen so it\'s safe to cache based on it\n    var caretsByRow = _caretsByRowCache.get(textRenderInfo);\n    if (!caretsByRow) {\n      var caretPositions = textRenderInfo.caretPositions;\n      var caretHeight = textRenderInfo.caretHeight;\n      caretsByRow = new Map();\n      for (var i = 0; i < caretPositions.length; i += 3) {\n        var rowY = caretPositions[i + 2];\n        var rowCarets = caretsByRow.get(rowY);\n        if (!rowCarets) {\n          caretsByRow.set(rowY, rowCarets = []);\n        }\n        rowCarets.push({\n          x: caretPositions[i],\n          y: rowY,\n          height: caretHeight,\n          charIndex: i / 3\n        });\n        // Add one more caret after the final char\n        if (i + 3 >= caretPositions.length) {\n          rowCarets.push({\n            x: caretPositions[i + 1],\n            y: rowY,\n            height: caretHeight,\n            charIndex: i / 3 + 1\n          });\n        }\n      }\n    }\n    _caretsByRowCache.set(textRenderInfo, caretsByRow);\n    return caretsByRow\n  }\n\n  exports.GlyphsGeometry = GlyphsGeometry;\n  exports.Text = Text;\n  exports.configureTextBuilder = configureTextBuilder;\n  exports.createTextDerivedMaterial = createTextDerivedMaterial;\n  exports.fontProcessorWorkerModule = fontProcessorWorkerModule;\n  exports.getCaretAtPoint = getCaretAtPoint;\n  exports.getSelectionRects = getSelectionRects;\n  exports.preloadFont = preloadFont;\n\n  Object.defineProperty(exports, \'__esModule\', { value: true });\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/troika-three-text/dist/troika-three-text.umd.js\n'
      );

      /***/
    },
};
