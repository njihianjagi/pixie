"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/drei";
exports.ids = ["vendor-chunks/drei"];
exports.modules = {
  /***/ "(ssr)/./node_modules/drei/dist/index.cjs.js":
    /*!*********************************************!*\
  !*** ./node_modules/drei/dist/index.cjs.js ***!
  \*********************************************/
    /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      eval(
        '\nObject.defineProperty(exports, "__esModule", ({\n    value: true\n}));\nfunction _interopDefault(ex) {\n    return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;\n}\nvar _extends = _interopDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "(ssr)/./node_modules/@babel/runtime/helpers/extends.js"));\nvar React = __webpack_require__(/*! react */ "(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js");\nvar React__default = _interopDefault(React);\nvar reactThreeFiber = __webpack_require__(/*! react-three-fiber */ "(ssr)/./node_modules/react-three-fiber/web.cjs.js");\nvar OrbitControls$1 = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls */ "(ssr)/./node_modules/three/examples/jsm/controls/OrbitControls.js");\nvar mergeRefs = _interopDefault(__webpack_require__(/*! react-merge-refs */ "(ssr)/./node_modules/react-merge-refs/dist/index.js"));\nvar TrackballControls$1 = __webpack_require__(/*! three/examples/jsm/controls/TrackballControls */ "(ssr)/./node_modules/three/examples/jsm/controls/TrackballControls.js");\nvar DeviceOrientationControls$1 = __webpack_require__(/*! three/examples/jsm/controls/DeviceOrientationControls */ "(ssr)/./node_modules/three/examples/jsm/controls/DeviceOrientationControls.js");\nvar _objectWithoutPropertiesLoose = _interopDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ "(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"));\nvar TransformControls$1 = __webpack_require__(/*! three/examples/jsm/controls/TransformControls */ "(ssr)/./node_modules/three/examples/jsm/controls/TransformControls.js");\nvar pick = _interopDefault(__webpack_require__(/*! lodash.pick */ "(ssr)/./node_modules/lodash.pick/index.js"));\nvar omit = _interopDefault(__webpack_require__(/*! lodash.omit */ "(ssr)/./node_modules/lodash.omit/index.js"));\nvar FlyControls$1 = __webpack_require__(/*! three/examples/jsm/controls/FlyControls */ "(ssr)/./node_modules/three/examples/jsm/controls/FlyControls.js");\nvar THREE = __webpack_require__(/*! three */ "(ssr)/./node_modules/three/build/three.js");\nvar _construct = _interopDefault(__webpack_require__(/*! @babel/runtime/helpers/construct */ "(ssr)/./node_modules/@babel/runtime/helpers/construct.js"));\nvar postprocessing = __webpack_require__(/*! postprocessing */ "(ssr)/./node_modules/postprocessing/build/index.cjs");\nvar troikaThreeText = __webpack_require__(/*! troika-three-text */ "(ssr)/./node_modules/troika-three-text/dist/troika-three-text.umd.js");\nvar ReactDOM = _interopDefault(__webpack_require__(/*! react-dom */ "(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js"));\nvar StatsImpl = _interopDefault(__webpack_require__(/*! stats.js */ "(ssr)/./node_modules/stats.js/build/stats.min.js"));\nvar _createClass = _interopDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "(ssr)/./node_modules/@babel/runtime/helpers/createClass.js"));\nvar _assertThisInitialized = _interopDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "(ssr)/./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));\nvar _inheritsLoose = _interopDefault(__webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ "(ssr)/./node_modules/@babel/runtime/helpers/inheritsLoose.js"));\nvar _defineProperty = _interopDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js"));\nvar Sky$1 = __webpack_require__(/*! three/examples/jsm/objects/Sky */ "(ssr)/./node_modules/three/examples/jsm/objects/Sky.js");\nvar Reflector$1 = __webpack_require__(/*! three/examples/jsm/objects/Reflector */ "(ssr)/./node_modules/three/examples/jsm/objects/Reflector.js");\nvar LineGeometry = __webpack_require__(/*! three/examples/jsm/lines/LineGeometry */ "(ssr)/./node_modules/three/examples/jsm/lines/LineGeometry.js");\nvar LineMaterial = __webpack_require__(/*! three/examples/jsm/lines/LineMaterial */ "(ssr)/./node_modules/three/examples/jsm/lines/LineMaterial.js");\nvar Line2 = __webpack_require__(/*! three/examples/jsm/lines/Line2 */ "(ssr)/./node_modules/three/examples/jsm/lines/Line2.js");\nvar DRACOLoader = __webpack_require__(/*! three/examples/jsm/loaders/DRACOLoader */ "(ssr)/./node_modules/three/examples/jsm/loaders/DRACOLoader.js");\nvar GLTFLoader = __webpack_require__(/*! three/examples/jsm/loaders/GLTFLoader */ "(ssr)/./node_modules/three/examples/jsm/loaders/GLTFLoader.js");\nreactThreeFiber.extend({\n    OrbitControlsImpl: OrbitControls$1.OrbitControls\n});\nvar OrbitControls = /*#__PURE__*/ React.forwardRef(function(props, ref) {\n    if (props === void 0) {\n        props = {\n            enableDamping: true\n        };\n    }\n    var controls = React.useRef();\n    var _useThree = reactThreeFiber.useThree(), camera = _useThree.camera, gl = _useThree.gl, invalidate = _useThree.invalidate;\n    reactThreeFiber.useFrame(function() {\n        var _controls$current;\n        return (_controls$current = controls.current) == null ? void 0 : _controls$current.update();\n    });\n    React.useEffect(function() {\n        var _controls$current2;\n        (_controls$current2 = controls.current) == null ? void 0 : _controls$current2.addEventListener("change", invalidate);\n        return function() {\n            var _controls$current3;\n            return (_controls$current3 = controls.current) == null ? void 0 : _controls$current3.removeEventListener("change", invalidate);\n        };\n    }, [\n        controls.current\n    ]);\n    return /*#__PURE__*/ React__default.createElement("orbitControlsImpl", _extends({\n        ref: mergeRefs([\n            controls,\n            ref\n        ]),\n        args: [\n            camera,\n            gl.domElement\n        ],\n        enableDamping: true\n    }, props));\n});\nreactThreeFiber.extend({\n    MapControlsImpl: OrbitControls$1.MapControls\n});\nvar MapControls = /*#__PURE__*/ React.forwardRef(function(props, ref) {\n    if (props === void 0) {\n        props = {\n            enableDamping: true\n        };\n    }\n    var controls = React.useRef();\n    var _useThree = reactThreeFiber.useThree(), camera = _useThree.camera, gl = _useThree.gl, invalidate = _useThree.invalidate;\n    reactThreeFiber.useFrame(function() {\n        var _controls$current;\n        return (_controls$current = controls.current) == null ? void 0 : _controls$current.update();\n    });\n    React.useEffect(function() {\n        var _controls$current2;\n        (_controls$current2 = controls.current) == null ? void 0 : _controls$current2.addEventListener("change", invalidate);\n        return function() {\n            var _controls$current3;\n            return (_controls$current3 = controls.current) == null ? void 0 : _controls$current3.removeEventListener("change", invalidate);\n        };\n    }, [\n        controls.current\n    ]);\n    return /*#__PURE__*/ React__default.createElement("mapControlsImpl", _extends({\n        ref: mergeRefs([\n            controls,\n            ref\n        ]),\n        args: [\n            camera,\n            gl.domElement\n        ],\n        enableDamping: true\n    }, props));\n});\nreactThreeFiber.extend({\n    TrackballControlsImpl: TrackballControls$1.TrackballControls\n});\nvar TrackballControls = /*#__PURE__*/ React.forwardRef(function(props, ref) {\n    var controls = React.useRef();\n    var _useThree = reactThreeFiber.useThree(), camera = _useThree.camera, gl = _useThree.gl, invalidate = _useThree.invalidate;\n    reactThreeFiber.useFrame(function() {\n        var _controls$current;\n        return (_controls$current = controls.current) == null ? void 0 : _controls$current.update();\n    });\n    React.useEffect(function() {\n        var _controls$current2;\n        (_controls$current2 = controls.current) == null ? void 0 : _controls$current2.addEventListener("change", invalidate);\n        return function() {\n            var _controls$current3;\n            return (_controls$current3 = controls.current) == null ? void 0 : _controls$current3.removeEventListener("change", invalidate);\n        };\n    }, [\n        controls.current\n    ]);\n    return /*#__PURE__*/ React__default.createElement("trackballControlsImpl", _extends({\n        ref: mergeRefs([\n            controls,\n            ref\n        ]),\n        args: [\n            camera,\n            gl.domElement\n        ]\n    }, props));\n});\nreactThreeFiber.extend({\n    DeviceOrientationControlsImp: DeviceOrientationControls$1.DeviceOrientationControls\n});\nvar DeviceOrientationControls = /*#__PURE__*/ React.forwardRef(function(props, ref) {\n    var controls = React.useRef();\n    var _useThree = reactThreeFiber.useThree(), camera = _useThree.camera;\n    reactThreeFiber.useFrame(function() {\n        var _controls$current;\n        return (_controls$current = controls.current) == null ? void 0 : _controls$current.update();\n    });\n    React.useEffect(function() {\n        var currentControl = controls.current;\n        currentControl == null ? void 0 : currentControl.connect();\n        return function() {\n            return currentControl == null ? void 0 : currentControl.dispose();\n        };\n    });\n    return /*#__PURE__*/ React__default.createElement("deviceOrientationControlsImp", _extends({\n        ref: mergeRefs([\n            controls,\n            ref\n        ]),\n        args: [\n            camera\n        ]\n    }, props));\n});\nreactThreeFiber.extend({\n    TransformControlsImpl: TransformControls$1.TransformControls\n});\nvar TransformControls = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, [\n        "children"\n    ]);\n    var transformOnlyPropNames = [\n        "enabled",\n        "axis",\n        "mode",\n        "translationSnap",\n        "rotationSnap",\n        "scaleSnap",\n        "space",\n        "size",\n        "dragging",\n        "showX",\n        "showY",\n        "showZ"\n    ];\n    var transformProps = pick(props, transformOnlyPropNames);\n    var objectProps = omit(props, transformOnlyPropNames);\n    var controls = React.useRef();\n    var group = React.useRef();\n    var _useThree = reactThreeFiber.useThree(), camera = _useThree.camera, gl = _useThree.gl, invalidate = _useThree.invalidate;\n    React.useLayoutEffect(function() {\n        var _controls$current;\n        return void ((_controls$current = controls.current) == null ? void 0 : _controls$current.attach(group.current));\n    }, [\n        children\n    ]);\n    React.useEffect(function() {\n        var _controls$current2;\n        (_controls$current2 = controls.current) == null ? void 0 : _controls$current2.addEventListener("change", invalidate);\n        return function() {\n            var _controls$current3;\n            return (_controls$current3 = controls.current) == null ? void 0 : _controls$current3.removeEventListener("change", invalidate);\n        };\n    }, [\n        controls.current\n    ]);\n    return /*#__PURE__*/ React__default.createElement(React__default.Fragment, null, /*#__PURE__*/ React__default.createElement("transformControlsImpl", _extends({\n        ref: mergeRefs([\n            controls,\n            ref\n        ]),\n        args: [\n            camera,\n            gl.domElement\n        ]\n    }, transformProps)), /*#__PURE__*/ React__default.createElement("group", _extends({\n        ref: group\n    }, objectProps), children));\n});\nreactThreeFiber.extend({\n    FlyControlsImpl: FlyControls$1.FlyControls\n});\nvar FlyControls = /*#__PURE__*/ React.forwardRef(function(props, ref) {\n    var controls = React.useRef();\n    var _useThree = reactThreeFiber.useThree(), camera = _useThree.camera, gl = _useThree.gl;\n    reactThreeFiber.useFrame(function(state, delta) {\n        var _controls$current;\n        return (_controls$current = controls.current) == null ? void 0 : _controls$current.update(delta);\n    });\n    return /*#__PURE__*/ React__default.createElement("flyControlsImpl", _extends({\n        ref: mergeRefs([\n            controls,\n            ref\n        ]),\n        args: [\n            camera,\n            gl.domElement\n        ]\n    }, props));\n});\nvar Detailed = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var children = _ref.children, distances = _ref.distances, props = _objectWithoutPropertiesLoose(_ref, [\n        "children",\n        "distances"\n    ]);\n    var lod = reactThreeFiber.useUpdate(function(lod) {\n        lod.levels.length = 0;\n        lod.children.forEach(function(object, index) {\n            return lod.levels.push({\n                object: object,\n                distance: distances[index]\n            });\n        });\n    }, []);\n    reactThreeFiber.useFrame(function(state) {\n        var _lod$current;\n        return (_lod$current = lod.current) == null ? void 0 : _lod$current.update(state.camera);\n    });\n    return /*#__PURE__*/ React__default.createElement("lOD", _extends({\n        ref: mergeRefs([\n            lod,\n            ref\n        ])\n    }, props), children);\n});\nvar PositionalAudio = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var url = _ref.url, _ref$distance = _ref.distance, distance = _ref$distance === void 0 ? 1 : _ref$distance, _ref$loop = _ref.loop, loop = _ref$loop === void 0 ? true : _ref$loop, props = _objectWithoutPropertiesLoose(_ref, [\n        "url",\n        "distance",\n        "loop"\n    ]);\n    var sound = React.useRef();\n    var _useThree = reactThreeFiber.useThree(), camera = _useThree.camera;\n    var _useState = React.useState(function() {\n        return new THREE.AudioListener();\n    }), listener = _useState[0];\n    var buffer = reactThreeFiber.useLoader(THREE.AudioLoader, url);\n    React.useEffect(function() {\n        var _sound$current, _sound$current2, _sound$current3, _sound$current4;\n        (_sound$current = sound.current) == null ? void 0 : _sound$current.setBuffer(buffer);\n        (_sound$current2 = sound.current) == null ? void 0 : _sound$current2.setRefDistance(distance);\n        (_sound$current3 = sound.current) == null ? void 0 : _sound$current3.setLoop(loop);\n        (_sound$current4 = sound.current) == null ? void 0 : _sound$current4.play();\n        camera.add(listener);\n        return function() {\n            var _sound$current5, _sound$current6;\n            camera.remove(listener);\n            (_sound$current5 = sound.current) == null ? void 0 : _sound$current5.stop();\n            (_sound$current6 = sound.current) == null ? void 0 : _sound$current6.disconnect();\n        };\n    }, []);\n    return /*#__PURE__*/ React__default.createElement("positionalAudio", _extends({\n        ref: mergeRefs([\n            sound,\n            ref\n        ]),\n        args: [\n            listener\n        ]\n    }, props));\n});\nvar PerspectiveCamera = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var children = _ref.children, _ref$makeDefault = _ref.makeDefault, makeDefault = _ref$makeDefault === void 0 ? false : _ref$makeDefault, props = _objectWithoutPropertiesLoose(_ref, [\n        "children",\n        "makeDefault"\n    ]);\n    var _useThree = reactThreeFiber.useThree(), setDefaultCamera = _useThree.setDefaultCamera, camera = _useThree.camera, size = _useThree.size;\n    var cameraRef = reactThreeFiber.useUpdate(function(cam) {\n        cam.aspect = size.width / size.height;\n        cam.updateProjectionMatrix();\n    }, [\n        size,\n        props\n    ]);\n    React.useLayoutEffect(function() {\n        if (makeDefault && cameraRef.current) {\n            var oldCam = camera;\n            setDefaultCamera(cameraRef.current);\n            return function() {\n                return setDefaultCamera(oldCam);\n            };\n        }\n    }, []);\n    return /*#__PURE__*/ React__default.createElement("perspectiveCamera", _extends({\n        ref: mergeRefs([\n            cameraRef,\n            ref\n        ])\n    }, props), children);\n});\nvar OrthographicCamera = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var children = _ref.children, _ref$makeDefault = _ref.makeDefault, makeDefault = _ref$makeDefault === void 0 ? false : _ref$makeDefault, props = _objectWithoutPropertiesLoose(_ref, [\n        "children",\n        "makeDefault"\n    ]);\n    var _useThree = reactThreeFiber.useThree(), setDefaultCamera = _useThree.setDefaultCamera, camera = _useThree.camera, size = _useThree.size;\n    var cameraRef = reactThreeFiber.useUpdate(function(cam) {\n        return cam.updateProjectionMatrix();\n    }, [\n        size,\n        props\n    ]);\n    React.useLayoutEffect(function() {\n        if (makeDefault && cameraRef.current) {\n            var oldCam = camera;\n            setDefaultCamera(cameraRef.current);\n            return function() {\n                return setDefaultCamera(oldCam);\n            };\n        }\n    }, []);\n    return /*#__PURE__*/ React__default.createElement("orthographicCamera", _extends({\n        left: size.width / -2,\n        right: size.width / 2,\n        top: size.height / 2,\n        bottom: size.height / -2,\n        ref: mergeRefs([\n            cameraRef,\n            ref\n        ])\n    }, props), children);\n});\nfunction StandardEffects(_ref) {\n    var _ref$smaa = _ref.smaa, smaa = _ref$smaa === void 0 ? true : _ref$smaa, _ref$ao = _ref.ao, ao = _ref$ao === void 0 ? true : _ref$ao, _ref$bloom = _ref.bloom, bloom = _ref$bloom === void 0 ? true : _ref$bloom, _ref$edgeDetection = _ref.edgeDetection, edgeDetection = _ref$edgeDetection === void 0 ? 0.1 : _ref$edgeDetection, _ref$bloomOpacity = _ref.bloomOpacity, bloomOpacity = _ref$bloomOpacity === void 0 ? 1 : _ref$bloomOpacity, effects = _ref.effects;\n    var _useThree = reactThreeFiber.useThree(), gl = _useThree.gl, scene = _useThree.scene, camera = _useThree.camera, size = _useThree.size;\n    var smaaProps = reactThreeFiber.useLoader(postprocessing.SMAAImageLoader, "");\n    var composer = React.useMemo(function() {\n        var composer = new postprocessing.EffectComposer(gl, {\n            frameBufferType: THREE.HalfFloatType\n        });\n        composer.addPass(new postprocessing.RenderPass(scene, camera));\n        var smaaEffect = _construct(postprocessing.SMAAEffect, smaaProps);\n        smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(edgeDetection);\n        var normalPass = new postprocessing.NormalPass(scene, camera);\n        var ssaoEffect = new postprocessing.SSAOEffect(camera, normalPass.renderTarget.texture, _extends({\n            blendFunction: postprocessing.BlendFunction.MULTIPLY,\n            samples: 21,\n            // May get away with less samples\n            rings: 4,\n            // Just make sure this isn\'t a multiple of samples\n            distanceThreshold: 1.0,\n            distanceFalloff: 0.0,\n            rangeThreshold: 0.015,\n            // Controls sensitivity based on camera view distance **\n            rangeFalloff: 0.002,\n            luminanceInfluence: 0.9,\n            radius: 20,\n            // Spread range\n            scale: 1.0,\n            // Controls intensity **\n            bias: 0.05\n        }, ao));\n        var bloomEffect = new postprocessing.BloomEffect(_extends({\n            opacity: 1,\n            blendFunction: postprocessing.BlendFunction.SCREEN,\n            kernelSize: postprocessing.KernelSize.VERY_LARGE,\n            luminanceThreshold: 0.9,\n            luminanceSmoothing: 0.07,\n            height: 600\n        }, bloom));\n        bloomEffect.blendMode.opacity.value = bloomOpacity;\n        var effectsArray = [];\n        if (effects) effectsArray = effects([\n            smaaEffect,\n            ssaoEffect,\n            bloomEffect\n        ]);\n        else {\n            if (smaa) effectsArray.push(smaaEffect);\n            if (ao) effectsArray.push(ssaoEffect);\n            if (bloom) effectsArray.push(bloomEffect);\n        }\n        var effectPass = _construct(postprocessing.EffectPass, [\n            camera\n        ].concat(effectsArray));\n        effectPass.renderToScreen = true;\n        composer.addPass(normalPass);\n        composer.addPass(effectPass);\n        return composer;\n    }, [\n        camera,\n        gl,\n        scene,\n        smaa,\n        ao,\n        bloom,\n        edgeDetection,\n        bloomOpacity\n    ]);\n    React.useEffect(function() {\n        return void composer.setSize(size.width, size.height);\n    }, [\n        composer,\n        size\n    ]);\n    return reactThreeFiber.useFrame(function(_, delta) {\n        return composer.render(delta);\n    }, 1);\n}\nreactThreeFiber.extend({\n    TextMeshImpl: troikaThreeText.Text\n});\nvar Text = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var _ref$anchorX = _ref.anchorX, anchorX = _ref$anchorX === void 0 ? "center" : _ref$anchorX, _ref$anchorY = _ref.anchorY, anchorY = _ref$anchorY === void 0 ? "middle" : _ref$anchorY, children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, [\n        "anchorX",\n        "anchorY",\n        "children"\n    ]);\n    var textRef = React.useRef();\n    var _useState = React.useState(), baseMtl = _useState[0], setBaseMtl = _useState[1];\n    var _useMemo = React.useMemo(function() {\n        var n = [];\n        var t = "";\n        React.Children.forEach(children, function(child) {\n            if (typeof child === "string") t += child;\n            else if (child && typeof child === "object" && child.props.attach === "material") {\n                // Instantiate the base material and grab a reference to it, but don\'t assign any\n                // props, and assign it as the `material`, which Troika will replace behind the scenes.\n                n.push(/*#__PURE__*/ React.createElement(child.type, {\n                    ref: setBaseMtl,\n                    attach: "material"\n                })); // Once the base material has been assigned, grab the resulting upgraded material,\n                // and apply the original material props to that.\n                if (baseMtl) {\n                    n.push(/*#__PURE__*/ React__default.createElement("primitive", _extends({\n                        object: textRef.current.material\n                    }, child.props, {\n                        attach: null\n                    })));\n                }\n            } else n.push(child);\n        });\n        return [\n            n,\n            t\n        ];\n    }, [\n        children,\n        baseMtl\n    ]), nodes = _useMemo[0], text = _useMemo[1];\n    React.useLayoutEffect(function() {\n        return void textRef.current.sync();\n    });\n    return /*#__PURE__*/ React__default.createElement("textMeshImpl", _extends({\n        ref: mergeRefs([\n            textRef,\n            ref\n        ]),\n        text: text,\n        anchorX: anchorX,\n        anchorY: anchorY\n    }, props), nodes);\n});\nvar v1 = new THREE.Vector3();\nvar v2 = new THREE.Vector3();\nvar v3 = new THREE.Vector3();\nfunction calculatePosition(el, camera, size) {\n    var objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    objectPos.project(camera);\n    var widthHalf = size.width / 2;\n    var heightHalf = size.height / 2;\n    return [\n        objectPos.x * widthHalf + widthHalf,\n        -(objectPos.y * heightHalf) + heightHalf\n    ];\n}\nfunction isObjectBehindCamera(el, camera) {\n    var objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    var deltaCamObj = objectPos.sub(cameraPos);\n    var camDir = camera.getWorldDirection(v3);\n    return deltaCamObj.angleTo(camDir) > Math.PI / 2;\n}\nfunction objectScale(el, camera) {\n    if (camera instanceof THREE.PerspectiveCamera) {\n        var objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n        var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n        var vFOV = camera.fov * Math.PI / 180;\n        var dist = objectPos.distanceTo(cameraPos);\n        return 1 / (2 * Math.tan(vFOV / 2) * dist);\n    }\n    if (camera instanceof THREE.OrthographicCamera) return camera.zoom;\n    return 1;\n}\nfunction objectZIndex(el, camera, zIndexRange) {\n    if (camera instanceof THREE.PerspectiveCamera || camera instanceof THREE.OrthographicCamera) {\n        var objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n        var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n        var dist = objectPos.distanceTo(cameraPos);\n        var A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);\n        var B = zIndexRange[1] - A * camera.far;\n        return Math.round(A * dist + B);\n    }\n    return undefined;\n}\nvar Html = /*#__PURE__*/ React__default.forwardRef(function(_ref, ref) {\n    var _portal$current;\n    var children = _ref.children, _ref$eps = _ref.eps, eps = _ref$eps === void 0 ? 0.001 : _ref$eps, style = _ref.style, className = _ref.className, prepend = _ref.prepend, center = _ref.center, fullscreen = _ref.fullscreen, portal = _ref.portal, scaleFactor = _ref.scaleFactor, _ref$zIndexRange = _ref.zIndexRange, zIndexRange = _ref$zIndexRange === void 0 ? [\n        16777271,\n        0\n    ] : _ref$zIndexRange, props = _objectWithoutPropertiesLoose(_ref, [\n        "children",\n        "eps",\n        "style",\n        "className",\n        "prepend",\n        "center",\n        "fullscreen",\n        "portal",\n        "scaleFactor",\n        "zIndexRange"\n    ]);\n    var _useThree = reactThreeFiber.useThree(), gl = _useThree.gl, scene = _useThree.scene, camera = _useThree.camera, size = _useThree.size;\n    var _useState = React.useState(function() {\n        return document.createElement("div");\n    }), el = _useState[0];\n    var group = React.useRef(null);\n    var old = React.useRef([\n        0,\n        0\n    ]);\n    var target = (_portal$current = portal == null ? void 0 : portal.current) != null ? _portal$current : gl.domElement.parentNode;\n    React.useEffect(function() {\n        if (group.current) {\n            scene.updateMatrixWorld();\n            var vec = calculatePosition(group.current, camera, size);\n            el.style.cssText = "position:absolute;top:0;left:0;transform:translate3d(" + vec[0] + "px," + vec[1] + "px,0);transform-origin:0 0;";\n            if (target) {\n                if (prepend) target.prepend(el);\n                else target.appendChild(el);\n            }\n            return function() {\n                if (target) target.removeChild(el);\n                ReactDOM.unmountComponentAtNode(el);\n            };\n        } // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        target\n    ]);\n    var styles = React.useMemo(function() {\n        return _extends({\n            position: "absolute",\n            transform: center ? "translate3d(-50%,-50%,0)" : "none"\n        }, fullscreen && {\n            top: -size.height / 2,\n            left: -size.width / 2,\n            width: size.width,\n            height: size.height\n        }, style);\n    }, [\n        style,\n        center,\n        fullscreen,\n        size\n    ]);\n    React.useEffect(function() {\n        return void ReactDOM.render(/*#__PURE__*/ React__default.createElement("div", {\n            ref: ref,\n            style: styles,\n            className: className,\n            children: children\n        }), el);\n    });\n    reactThreeFiber.useFrame(function() {\n        if (group.current) {\n            var vec = calculatePosition(group.current, camera, size);\n            if (Math.abs(old.current[0] - vec[0]) > eps || Math.abs(old.current[1] - vec[1]) > eps) {\n                el.style.display = !isObjectBehindCamera(group.current, camera) ? "block" : "none";\n                var scale = scaleFactor === undefined ? 1 : objectScale(group.current, camera) * scaleFactor;\n                el.style.transform = "translate3d(" + vec[0] + "px," + vec[1] + "px,0) scale(" + scale + ")";\n                el.style.zIndex = "" + objectZIndex(group.current, camera, zIndexRange);\n            }\n            old.current = vec;\n        }\n    });\n    return /*#__PURE__*/ React__default.createElement("group", _extends({}, props, {\n        ref: group\n    }));\n});\nvar HTML = /*#__PURE__*/ React__default.forwardRef(function(props, ref) {\n    React.useEffect(function() {\n        return void console.warn("The <HTML> component was renamed to <Html>");\n    }, []);\n    return /*#__PURE__*/ React__default.createElement(Html, _extends({}, props, {\n        ref: ref\n    }));\n});\nvar Shadow = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var _ref$fog = _ref.fog, fog = _ref$fog === void 0 ? false : _ref$fog, _ref$colorStop = _ref.colorStop, colorStop = _ref$colorStop === void 0 ? 0.0 : _ref$colorStop, _ref$color = _ref.color, color = _ref$color === void 0 ? "black" : _ref$color, _ref$opacity = _ref.opacity, opacity = _ref$opacity === void 0 ? 0.5 : _ref$opacity, props = _objectWithoutPropertiesLoose(_ref, [\n        "fog",\n        "colorStop",\n        "color",\n        "opacity"\n    ]);\n    var canvas = React.useMemo(function() {\n        var canvas = document.createElement("canvas");\n        canvas.width = 128;\n        canvas.height = 128;\n        var context = canvas.getContext("2d");\n        var gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2);\n        gradient.addColorStop(colorStop, new THREE.Color(color).getStyle());\n        gradient.addColorStop(1, "rgba(0,0,0,0)");\n        context.fillStyle = gradient;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        return canvas;\n    }, [\n        color,\n        stop\n    ]);\n    return /*#__PURE__*/ React__default.createElement("mesh", _extends({\n        ref: ref\n    }, props), /*#__PURE__*/ React__default.createElement("planeBufferGeometry", {\n        attach: "geometry",\n        args: [\n            1,\n            1\n        ]\n    }), /*#__PURE__*/ React__default.createElement("meshBasicMaterial", {\n        attach: "material",\n        transparent: true,\n        opacity: opacity,\n        fog: fog\n    }, /*#__PURE__*/ React__default.createElement("canvasTexture", {\n        attach: "map",\n        args: [\n            canvas\n        ]\n    })));\n});\nfunction Stats(_ref) {\n    var _ref$showPanel = _ref.showPanel, showPanel = _ref$showPanel === void 0 ? 0 : _ref$showPanel, className = _ref.className, parent = _ref.parent;\n    var _useState = React.useState(function() {\n        return new StatsImpl();\n    }), stats = _useState[0];\n    React.useEffect(function() {\n        var node = parent && parent.current || document.body;\n        stats.showPanel(showPanel);\n        node == null ? void 0 : node.appendChild(stats.dom);\n        if (className) stats.dom.classList.add(className);\n        var begin = reactThreeFiber.addEffect(function() {\n            return stats.begin();\n        });\n        var end = reactThreeFiber.addAfterEffect(function() {\n            return stats.end();\n        });\n        return function() {\n            node == null ? void 0 : node.removeChild(stats.dom);\n            begin();\n            end();\n        };\n    }, [\n        parent\n    ]);\n    return null;\n}\nvar WobbleMaterialImpl = /*#__PURE__*/ function(_MeshStandardMaterial) {\n    _inheritsLoose(WobbleMaterialImpl, _MeshStandardMaterial);\n    function WobbleMaterialImpl(parameters) {\n        var _this;\n        _this = _MeshStandardMaterial.call(this, parameters) || this;\n        _defineProperty(_assertThisInitialized(_this), "_time", void 0);\n        _defineProperty(_assertThisInitialized(_this), "_factor", void 0);\n        _this.setValues(parameters);\n        _this._time = {\n            value: 0\n        };\n        _this._factor = {\n            value: 1\n        };\n        return _this;\n    }\n    var _proto = WobbleMaterialImpl.prototype;\n    _proto.onBeforeCompile = function onBeforeCompile(shader) {\n        shader.uniforms.time = this._time;\n        shader.uniforms.factor = this._factor;\n        shader.vertexShader = "\\n      uniform float time;\\n      uniform float factor;\\n      " + shader.vertexShader + "\\n    ";\n        shader.vertexShader = shader.vertexShader.replace("#include <begin_vertex>", "float theta = sin( time + position.y ) / 2.0 * factor;\\n        float c = cos( theta );\\n        float s = sin( theta );\\n        mat3 m = mat3( c, 0, s, 0, 1, 0, -s, 0, c );\\n        vec3 transformed = vec3( position ) * m;\\n        vNormal = vNormal * m;");\n    };\n    _createClass(WobbleMaterialImpl, [\n        {\n            key: "time",\n            get: function get() {\n                return this._time.value;\n            },\n            set: function set(v) {\n                this._time.value = v;\n            }\n        },\n        {\n            key: "factor",\n            get: function get() {\n                return this._factor.value;\n            },\n            set: function set(v) {\n                this._factor.value = v;\n            }\n        }\n    ]);\n    return WobbleMaterialImpl;\n}(THREE.MeshStandardMaterial);\nreactThreeFiber.extend({\n    WobbleMaterialImpl: WobbleMaterialImpl\n});\nvar MeshWobbleMaterial = /*#__PURE__*/ React__default.forwardRef(function(_ref, ref) {\n    var _ref$speed = _ref.speed, speed = _ref$speed === void 0 ? 1 : _ref$speed, props = _objectWithoutPropertiesLoose(_ref, [\n        "speed"\n    ]);\n    var material = React.useRef();\n    reactThreeFiber.useFrame(function(state) {\n        return material.current && (material.current.time = state.clock.getElapsedTime() * speed);\n    });\n    return /*#__PURE__*/ React__default.createElement("wobbleMaterialImpl", _extends({\n        ref: mergeRefs([\n            ref,\n            material\n        ]),\n        attach: "material"\n    }, props));\n});\nvar distort = "#define GLSLIFY 1\\nvec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}"; // eslint-disable-line\nvar DistortMaterialImpl = /*#__PURE__*/ function(_MeshPhysicalMaterial) {\n    _inheritsLoose(DistortMaterialImpl, _MeshPhysicalMaterial);\n    function DistortMaterialImpl(parameters) {\n        var _this;\n        _this = _MeshPhysicalMaterial.call(this, parameters) || this;\n        _defineProperty(_assertThisInitialized(_this), "_time", void 0);\n        _defineProperty(_assertThisInitialized(_this), "_distort", void 0);\n        _defineProperty(_assertThisInitialized(_this), "_radius", void 0);\n        _this.setValues(parameters);\n        _this._time = {\n            value: 0\n        };\n        _this._distort = {\n            value: 0.4\n        };\n        _this._radius = {\n            value: 1\n        };\n        return _this;\n    }\n    var _proto = DistortMaterialImpl.prototype;\n    _proto.onBeforeCompile = function onBeforeCompile(shader) {\n        shader.uniforms.time = this._time;\n        shader.uniforms.radius = this._radius;\n        shader.uniforms.distort = this._distort;\n        shader.vertexShader = "\\n      uniform float time;\\n      uniform float radius;\\n      uniform float distort;\\n      " + distort + "\\n      " + shader.vertexShader + "\\n    ";\n        shader.vertexShader = shader.vertexShader.replace("#include <begin_vertex>", "\\n        float updateTime = time / 50.0;\\n        float noise = snoise(vec3(position / 2.0 + updateTime * 5.0));\\n        vec3 transformed = vec3(position * (noise * pow(distort, 2.0) + radius));\\n        ");\n    };\n    _createClass(DistortMaterialImpl, [\n        {\n            key: "time",\n            get: function get() {\n                return this._time.value;\n            },\n            set: function set(v) {\n                this._time.value = v;\n            }\n        },\n        {\n            key: "distort",\n            get: function get() {\n                return this._distort.value;\n            },\n            set: function set(v) {\n                this._distort.value = v;\n            }\n        },\n        {\n            key: "radius",\n            get: function get() {\n                return this._radius.value;\n            },\n            set: function set(v) {\n                this._radius.value = v;\n            }\n        }\n    ]);\n    return DistortMaterialImpl;\n}(THREE.MeshPhysicalMaterial);\nreactThreeFiber.extend({\n    DistortMaterialImpl: DistortMaterialImpl\n});\nvar MeshDistortMaterial = /*#__PURE__*/ React__default.forwardRef(function(_ref, ref) {\n    var _ref$speed = _ref.speed, speed = _ref$speed === void 0 ? 1 : _ref$speed, props = _objectWithoutPropertiesLoose(_ref, [\n        "speed"\n    ]);\n    var material = React.useRef();\n    reactThreeFiber.useFrame(function(state) {\n        return material.current && (material.current.time = state.clock.getElapsedTime() * speed);\n    });\n    return /*#__PURE__*/ React__default.createElement("distortMaterialImpl", _extends({\n        ref: mergeRefs([\n            ref,\n            material\n        ]),\n        attach: "material"\n    }, props));\n});\nreactThreeFiber.extend({\n    SkyImpl: Sky$1.Sky\n});\nvar Sky = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var _ref$distance = _ref.distance, distance = _ref$distance === void 0 ? 450000 : _ref$distance, _ref$sunPosition = _ref.sunPosition, sunPosition = _ref$sunPosition === void 0 ? [\n        0,\n        1,\n        0\n    ] : _ref$sunPosition, props = _objectWithoutPropertiesLoose(_ref, [\n        "distance",\n        "sunPosition"\n    ]);\n    var scale = React.useMemo(function() {\n        return new THREE.Vector3().setScalar(distance);\n    }, [\n        distance\n    ]);\n    return /*#__PURE__*/ React__default.createElement("skyImpl", _extends({\n        ref: ref,\n        "material-uniforms-sunPosition-value": sunPosition,\n        scale: scale\n    }, props));\n});\nreactThreeFiber.extend({\n    ReflectorImpl: Reflector$1.Reflector\n});\nvar Reflector = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var children = _ref.children, color = _ref.color, textureWidth = _ref.textureWidth, textureHeight = _ref.textureHeight, clipBias = _ref.clipBias, shader = _ref.shader, encoding = _ref.encoding, props = _objectWithoutPropertiesLoose(_ref, [\n        "children",\n        "color",\n        "textureWidth",\n        "textureHeight",\n        "clipBias",\n        "shader",\n        "encoding"\n    ]);\n    return /*#__PURE__*/ React__default.createElement("reflectorImpl", _extends({\n        ref: ref,\n        args: [\n            undefined,\n            {\n                color: color,\n                textureWidth: textureWidth,\n                textureHeight: textureHeight,\n                clipBias: clipBias,\n                shader: shader,\n                encoding: encoding\n            }\n        ]\n    }, props), React__default.Children.only(children));\n});\nreactThreeFiber.extend({\n    Line2: Line2.Line2,\n    LineGeometry: LineGeometry.LineGeometry,\n    LineMaterial: LineMaterial.LineMaterial\n});\nvar Line = /*#__PURE__*/ React__default.forwardRef(function Line(_ref, ref) {\n    var points = _ref.points, _ref$color = _ref.color, color = _ref$color === void 0 ? "black" : _ref$color, vertexColors = _ref.vertexColors, rest = _objectWithoutPropertiesLoose(_ref, [\n        "points",\n        "color",\n        "vertexColors"\n    ]);\n    var lineRef = React.useRef();\n    var geomRef = React.useRef();\n    var resolution = React.useMemo(function() {\n        return new THREE.Vector2(512, 512);\n    }, []);\n    React.useEffect(function() {\n        if (!geomRef.current || !lineRef.current) return;\n        geomRef.current.setPositions(points.flat());\n        if (vertexColors) geomRef.current.setColors(vertexColors.flat());\n        lineRef.current.computeLineDistances();\n    }, [\n        points,\n        vertexColors\n    ]);\n    return /*#__PURE__*/ React__default.createElement("line2", _extends({\n        ref: mergeRefs([\n            lineRef,\n            ref\n        ])\n    }, rest), /*#__PURE__*/ React__default.createElement("lineGeometry", {\n        attach: "geometry",\n        ref: geomRef\n    }), /*#__PURE__*/ React__default.createElement("lineMaterial", _extends({\n        attach: "material",\n        color: color,\n        vertexColors: Boolean(vertexColors),\n        resolution: resolution\n    }, rest)));\n});\nvar StarfieldMaterial = /*#__PURE__*/ function(_ShaderMaterial) {\n    _inheritsLoose(StarfieldMaterial, _ShaderMaterial);\n    function StarfieldMaterial() {\n        return _ShaderMaterial.call(this, {\n            uniforms: {\n                time: {\n                    value: 0.0\n                },\n                fade: {\n                    value: 1.0\n                }\n            },\n            vertexShader: "uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }",\n            fragmentShader: "uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n      }"\n        }) || this;\n    }\n    return StarfieldMaterial;\n}(THREE.ShaderMaterial);\nreactThreeFiber.extend({\n    StarfieldMaterial: StarfieldMaterial\n});\nvar genStar = function genStar(r) {\n    return new THREE.Vector3().setFromSpherical(new THREE.Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\nvar Stars = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n    var _ref$radius = _ref.radius, radius = _ref$radius === void 0 ? 100 : _ref$radius, _ref$depth = _ref.depth, depth = _ref$depth === void 0 ? 50 : _ref$depth, _ref$count = _ref.count, count = _ref$count === void 0 ? 5000 : _ref$count, _ref$saturation = _ref.saturation, saturation = _ref$saturation === void 0 ? 0 : _ref$saturation, _ref$factor = _ref.factor, factor = _ref$factor === void 0 ? 4 : _ref$factor, _ref$fade = _ref.fade, fade = _ref$fade === void 0 ? false : _ref$fade;\n    var material = React.useRef();\n    var _useMemo = React.useMemo(function() {\n        var positions = [];\n        var colors = [];\n        var sizes = Array.from({\n            length: count\n        }, function() {\n            return (0.5 + 0.5 * Math.random()) * factor;\n        });\n        var color = new THREE.Color();\n        var r = radius + depth;\n        var increment = depth / count;\n        for(var i = 0; i < count; i++){\n            r -= increment * Math.random();\n            positions.push.apply(positions, genStar(r).toArray());\n            color.setHSL(i / count, saturation, 0.9);\n            colors.push(color.r, color.g, color.b);\n        }\n        return [\n            new Float32Array(positions),\n            new Float32Array(colors),\n            new Float32Array(sizes)\n        ];\n    }, []), position = _useMemo[0], color = _useMemo[1], size = _useMemo[2];\n    reactThreeFiber.useFrame(function(state) {\n        return material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime());\n    });\n    return /*#__PURE__*/ React__default.createElement("points", {\n        ref: ref\n    }, /*#__PURE__*/ React__default.createElement("bufferGeometry", {\n        attach: "geometry"\n    }, /*#__PURE__*/ React__default.createElement("bufferAttribute", {\n        attachObject: [\n            "attributes",\n            "position"\n        ],\n        args: [\n            position,\n            3\n        ]\n    }), /*#__PURE__*/ React__default.createElement("bufferAttribute", {\n        attachObject: [\n            "attributes",\n            "color"\n        ],\n        args: [\n            color,\n            3\n        ]\n    }), /*#__PURE__*/ React__default.createElement("bufferAttribute", {\n        attachObject: [\n            "attributes",\n            "size"\n        ],\n        args: [\n            size,\n            1\n        ]\n    })), /*#__PURE__*/ React__default.createElement("starfieldMaterial", {\n        ref: material,\n        attach: "material",\n        blending: THREE.AdditiveBlending,\n        "uniforms-fade-value": fade,\n        transparent: true,\n        vertexColors: true\n    }));\n});\nfunction draco(url) {\n    if (url === void 0) {\n        url = "/draco-gltf/";\n    }\n    return function(loader) {\n        var dracoLoader = new DRACOLoader.DRACOLoader();\n        dracoLoader.setDecoderPath(url);\n        loader.setDRACOLoader(dracoLoader);\n    };\n}\nvar pcss = function pcss(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp, _ref$frustrum = _ref.frustrum, frustrum = _ref$frustrum === void 0 ? 3.75 : _ref$frustrum, _ref$size = _ref.size, size = _ref$size === void 0 ? 0.005 : _ref$size, _ref$near = _ref.near, near = _ref$near === void 0 ? 9.5 : _ref$near, _ref$samples = _ref.samples, samples = _ref$samples === void 0 ? 17 : _ref$samples, _ref$rings = _ref.rings, rings = _ref$rings === void 0 ? 11 : _ref$rings;\n    return "#define LIGHT_WORLD_SIZE " + size + "\\n#define LIGHT_FRUSTUM_WIDTH " + frustrum + "\\n#define LIGHT_SIZE_UV (LIGHT_WORLD_SIZE / LIGHT_FRUSTUM_WIDTH)\\n#define NEAR_PLANE " + near + "\\n\\n#define NUM_SAMPLES " + samples + "\\n#define NUM_RINGS " + rings + "\\n#define BLOCKER_SEARCH_NUM_SAMPLES NUM_SAMPLES\\n#define PCF_NUM_SAMPLES NUM_SAMPLES\\n\\nvec2 poissonDisk[NUM_SAMPLES];\\n\\nvoid initPoissonSamples(const in vec2 randomSeed) {\\n\tfloat ANGLE_STEP = PI2 * float(NUM_RINGS) / float(NUM_SAMPLES);\\n\tfloat INV_NUM_SAMPLES = 1.0 / float(NUM_SAMPLES);\\n\tfloat angle = rand(randomSeed) * PI2;\\n\tfloat radius = INV_NUM_SAMPLES;\\n\tfloat radiusStep = radius;\\n\tfor (int i = 0; i < NUM_SAMPLES; i++) {\\n\t\tpoissonDisk[i] = vec2(cos(angle), sin(angle)) * pow(radius, 0.75);\\n\t\tradius += radiusStep;\\n\t\tangle += ANGLE_STEP;\\n\t}\\n}\\n\\nfloat penumbraSize(const in float zReceiver, const in float zBlocker) { // Parallel plane estimation\\n\treturn (zReceiver - zBlocker) / zBlocker;\\n}\\n\\nfloat findBlocker(sampler2D shadowMap, const in vec2 uv, const in float zReceiver) {\\n\tfloat searchRadius = LIGHT_SIZE_UV * (zReceiver - NEAR_PLANE) / zReceiver;\\n\tfloat blockerDepthSum = 0.0;\\n\tint numBlockers = 0;\\n\tfor (int i = 0; i < BLOCKER_SEARCH_NUM_SAMPLES; i++) {\\n\t\tfloat shadowMapDepth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[i] * searchRadius));\\n\t\tif (shadowMapDepth < zReceiver) {\\n\t\t\tblockerDepthSum += shadowMapDepth;\\n\t\t\tnumBlockers++;\\n\t\t}\\n\t}\\n\tif (numBlockers == 0) return -1.0;\\n\treturn blockerDepthSum / float(numBlockers);\\n}\\n\\nfloat PCF_Filter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius) {\\n\tfloat sum = 0.0;\\n\tfor (int i = 0; i < PCF_NUM_SAMPLES; i++) {\\n\t\tfloat depth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[ i ] * filterRadius));\\n\t\tif (zReceiver <= depth) sum += 1.0;\\n\t}\\n\tfor (int i = 0; i < PCF_NUM_SAMPLES; i++) {\\n\t\tfloat depth = unpackRGBAToDepth(texture2D(shadowMap, uv + -poissonDisk[ i ].yx * filterRadius));\\n\t\tif (zReceiver <= depth) sum += 1.0;\\n\t}\\n\treturn sum / (2.0 * float(PCF_NUM_SAMPLES));\\n}\\n\\nfloat PCSS(sampler2D shadowMap, vec4 coords) {\\n\tvec2 uv = coords.xy;\\n\tfloat zReceiver = coords.z; // Assumed to be eye-space z in this code\\n\tinitPoissonSamples(uv);\\n\tfloat avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver);\\n\tif (avgBlockerDepth == -1.0) return 1.0;\\n\tfloat penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);\\n\tfloat filterRadius = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;\\n\treturn PCF_Filter(shadowMap, uv, zReceiver, filterRadius);\\n}";\n};\nvar deployed = false;\nvar softShadows = function softShadows(props) {\n    // Avoid adding the effect twice, which may happen in HMR scenarios\n    if (!deployed) {\n        deployed = true;\n        var shader = THREE.ShaderChunk.shadowmap_pars_fragment;\n        shader = shader.replace("#ifdef USE_SHADOWMAP", "#ifdef USE_SHADOWMAP\\n" + pcss(_extends({}, props)));\n        shader = shader.replace("#if defined( SHADOWMAP_TYPE_PCF )", "\\nreturn PCSS(shadowMap, shadowCoord);\\n#if defined( SHADOWMAP_TYPE_PCF )");\n        THREE.ShaderChunk.shadowmap_pars_fragment = shader;\n    }\n};\nvar _inverseMatrix = new THREE.Matrix4();\nvar _ray = new THREE.Ray();\nvar _sphere = new THREE.Sphere();\nvar _vA = new THREE.Vector3();\nfunction meshBounds(raycaster, intersects) {\n    var geometry = this.geometry;\n    var material = this.material;\n    var matrixWorld = this.matrixWorld;\n    if (material === undefined) return; // Checking boundingSphere distance to ray\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n    _sphere.copy(geometry.boundingSphere);\n    _sphere.applyMatrix4(matrixWorld);\n    if (raycaster.ray.intersectsSphere(_sphere) === false) return;\n    _inverseMatrix.getInverse(matrixWorld);\n    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n    if (geometry.boundingBox !== null && _ray.intersectBox(geometry.boundingBox, _vA) === null) return;\n    intersects.push({\n        distance: _vA.distanceTo(raycaster.ray.origin),\n        point: _vA.clone(),\n        object: this\n    });\n}\nfunction useCamera(camera, props) {\n    var _useThree = reactThreeFiber.useThree(), mouse = _useThree.mouse;\n    var _useState = React.useState(function() {\n        var raycaster = new THREE.Raycaster();\n        if (props) reactThreeFiber.applyProps(raycaster, props, {});\n        return function(_, intersects) {\n            raycaster.setFromCamera(mouse, camera instanceof THREE.Camera ? camera : camera.current);\n            var rc = this.constructor.prototype.raycast.bind(this);\n            if (rc) rc(raycaster, intersects);\n        };\n    }), raycast = _useState[0];\n    return raycast;\n}\nfunction useHelper(object3D, proto) {\n    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        args[_key - 2] = arguments[_key];\n    }\n    var helper = React__default.useRef();\n    var _useThree = reactThreeFiber.useThree(), scene = _useThree.scene;\n    React.useEffect(function() {\n        if (proto && object3D.current) {\n            helper.current = _construct(proto, [\n                object3D.current\n            ].concat(args));\n            if (helper.current) {\n                scene.add(helper.current);\n            }\n        }\n        return function() {\n            if (helper.current) {\n                scene.remove(helper.current);\n            }\n        };\n    }, [\n        scene,\n        proto,\n        object3D,\n        args\n    ]);\n    reactThreeFiber.useFrame(function() {\n        if (helper.current) {\n            helper.current.update();\n        }\n    });\n    return helper;\n}\nfunction useAspect(type, width, height, factor) {\n    if (factor === void 0) {\n        factor = 1;\n    }\n    var _useThree = reactThreeFiber.useThree(), v = _useThree.viewport, aspect = _useThree.aspect;\n    var adaptedHeight = height * (aspect > width / height ? v.width / width : v.height / height);\n    var adaptedWidth = width * (aspect > width / height ? v.width / width : v.height / height);\n    return [\n        adaptedWidth * factor,\n        adaptedHeight * factor,\n        1\n    ];\n}\nfunction create(type) {\n    var El = type + "BufferGeometry";\n    return /*#__PURE__*/ React.forwardRef(function(_ref, ref) {\n        var args = _ref.args, children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, [\n            "args",\n            "children"\n        ]);\n        return /*#__PURE__*/ React__default.createElement("mesh", _extends({\n            ref: ref\n        }, props), /*#__PURE__*/ React__default.createElement(El, {\n            attach: "geometry",\n            args: args\n        }), children);\n    });\n}\nvar Box = create("box");\nvar Circle = create("circle");\nvar Cone = create("cone");\nvar Cylinder = create("cylinder");\nvar Sphere = create("sphere");\nvar Plane = create("plane");\nvar Tube = create("tube");\nvar Torus = create("torus");\nvar TorusKnot = create("torusKnot");\nvar Tetrahedron = create("tetrahedron");\nvar Ring = create("ring");\nvar Polyhedron = create("polyhedron");\nvar Icosahedron = create("icosahedron");\nvar Octahedron = create("octahedron");\nvar Dodecahedron = create("dodecahedron");\nvar Extrude = create("extrude");\nvar Lathe = create("lathe");\nvar Parametric = create("parametric");\nfunction useTextureLoader(url) {\n    return reactThreeFiber.useLoader(THREE.TextureLoader, url);\n}\nfunction useGLTFLoader(path, useDraco) {\n    var gltf = reactThreeFiber.useLoader(GLTFLoader.GLTFLoader, path, useDraco ? draco(typeof useDraco === "string" ? useDraco : "/draco-gltf/") : undefined);\n    return gltf;\n}\nfunction useCubeTextureLoader(files, _ref) {\n    var path = _ref.path;\n    // @ts-ignore\n    var _useLoader = reactThreeFiber.useLoader(THREE.CubeTextureLoader, [\n        files\n    ], function(loader) {\n        return loader.setPath(path);\n    }), cubeTexture = _useLoader[0];\n    return cubeTexture;\n}\nexports.Box = Box;\nexports.Circle = Circle;\nexports.Cone = Cone;\nexports.Cylinder = Cylinder;\nexports.Detailed = Detailed;\nexports.DeviceOrientationControls = DeviceOrientationControls;\nexports.Dodecahedron = Dodecahedron;\nexports.Extrude = Extrude;\nexports.FlyControls = FlyControls;\nexports.HTML = HTML;\nexports.Html = Html;\nexports.Icosahedron = Icosahedron;\nexports.Lathe = Lathe;\nexports.Line = Line;\nexports.MapControls = MapControls;\nexports.MeshDistortMaterial = MeshDistortMaterial;\nexports.MeshWobbleMaterial = MeshWobbleMaterial;\nexports.Octahedron = Octahedron;\nexports.OrbitControls = OrbitControls;\nexports.OrthographicCamera = OrthographicCamera;\nexports.Parametric = Parametric;\nexports.PerspectiveCamera = PerspectiveCamera;\nexports.Plane = Plane;\nexports.Polyhedron = Polyhedron;\nexports.PositionalAudio = PositionalAudio;\nexports.Reflector = Reflector;\nexports.Ring = Ring;\nexports.Shadow = Shadow;\nexports.Sky = Sky;\nexports.Sphere = Sphere;\nexports.StandardEffects = StandardEffects;\nexports.Stars = Stars;\nexports.Stats = Stats;\nexports.Tetrahedron = Tetrahedron;\nexports.Text = Text;\nexports.Torus = Torus;\nexports.TorusKnot = TorusKnot;\nexports.TrackballControls = TrackballControls;\nexports.TransformControls = TransformControls;\nexports.Tube = Tube;\nexports.draco = draco;\nexports.meshBounds = meshBounds;\nexports.softShadows = softShadows;\nexports.useAspect = useAspect;\nexports.useCamera = useCamera;\nexports.useCubeTextureLoader = useCubeTextureLoader;\nexports.useGLTFLoader = useGLTFLoader;\nexports.useHelper = useHelper;\nexports.useTextureLoader = useTextureLoader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/drei/dist/index.cjs.js\n'
      );

      /***/
    },
};
